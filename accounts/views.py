from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth import update_session_auth_hash
from django.contrib import messages
from django.views.generic import TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.db.models import Q, Count, Sum, F
from django.utils.decorators import method_decorator
from django.http import JsonResponse
from django.core.paginator import Paginator
from django.utils import timezone
from datetime import datetime, timedelta
import calendar

from .models import UserProfile
from .forms import UserProfileForm, PasswordChangeForm
from books.models import UserFavoriteBook, ReadingSession, BookDownload
from shop.models import Order, Purchase
# from stories.models import Playlist  # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

@method_decorator(login_required, name='dispatch')
class ProfileView(LoginRequiredMixin, TemplateView):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    template_name = 'accounts/profile.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile, created = UserProfile.objects.get_or_create(user=user)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è
        reading_stats = {
            'books_reading': ReadingSession.objects.filter(user=user).count(),
            'books_completed': ReadingSession.objects.filter(
                user=user, 
                current_page__gte=F('total_pages')
            ).count(),
            'books_downloaded': BookDownload.objects.filter(user=user).count(),
            'favorite_books': UserFavoriteBook.objects.filter(user=user).count(),
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
        purchase_stats = {
            'total_orders': Order.objects.filter(user=user).count(),
            'completed_orders': Order.objects.filter(user=user, status='completed').count(),
            'total_purchases': Purchase.objects.filter(user=user).count(),
            'total_spent': Order.objects.filter(
                user=user, 
                status='completed'
            ).aggregate(total=Sum('total_amount'))['total'] or 0,
        }
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        recent_orders = Order.objects.filter(user=user).order_by('-created_at')[:5]
        recent_reading = ReadingSession.objects.filter(user=user).select_related('book').order_by('-last_read')[:5]
        recent_favorites = UserFavoriteBook.objects.filter(user=user).select_related('book').order_by('-added_at')[:5]
        
        # –ü–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # user_playlists = Playlist.objects.filter(user=user).annotate(
        #     story_count=Count('items')
        # ).order_by('-created_at')[:5]
        user_playlists = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        membership_duration = self.get_membership_duration(user.date_joined)
        
        context.update({
            'title': '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            'profile': profile,
            'reading_stats': reading_stats,
            'purchase_stats': purchase_stats,
            'recent_orders': recent_orders,
            'recent_reading': recent_reading,
            'recent_favorites': recent_favorites,
            'user_playlists': user_playlists,
            'membership_duration': membership_duration,
        })
        
        return context
    
    def get_membership_duration(self, join_date):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        now = timezone.now()
        diff = now - join_date
        
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞
        if diff.days < 30:
            if diff.days < 1:
                return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú®"
            elif diff.days == 1:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ –¥–µ–Ω—å! üåü"
            elif diff.days == 2:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 2 –¥–Ω—è! üåü"
            elif diff.days < 5:
                return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ {diff.days} –¥–Ω—è! üåü"
            elif diff.days < 7:
                return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ {diff.days} –¥–Ω–µ–π! üåü"
            else:
                weeks = diff.days // 7
                if weeks == 1:
                    return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ –Ω–µ–¥–µ–ª—é! üåü"
                elif weeks == 2:
                    return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 2 –Ω–µ–¥–µ–ª–∏! üåü"
                elif weeks == 3:
                    return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 3 –Ω–µ–¥–µ–ª–∏! üåü"
                else:
                    return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ {weeks} –Ω–µ–¥–µ–ª–∏! üåü"
        
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –≥–æ–¥–∞
        elif diff.days < 365:
            months = diff.days // 30
            if months == 1:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ –º–µ—Å—è—Ü! üåü"
            elif months == 2:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 2 –º–µ—Å—è—Ü–∞! üåü"
            elif months == 3:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 3 –º–µ—Å—è—Ü–∞! üåü"
            elif months == 4:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 4 –º–µ—Å—è—Ü–∞! üåü"
            elif months < 12:
                return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ {months} –º–µ—Å—è—Ü–µ–≤! üåü"
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –≥–æ–¥–∞
        else:
            years = diff.days // 365
            if years == 1:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ —Ü–µ–ª—ã–π –≥–æ–¥! üéâ"
            elif years == 2:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 2 –≥–æ–¥–∞! üéâ"
            elif years == 3:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 3 –≥–æ–¥–∞! üéâ"
            elif years == 4:
                return "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ 4 –≥–æ–¥–∞! üéâ"
            elif years < 10:
                return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ {years} –ª–µ—Ç! üéâ"
            else:
                return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ {years} –ª–µ—Ç! üéä –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å!"


@method_decorator(login_required, name='dispatch')
class ProfileEditView(LoginRequiredMixin, TemplateView):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    template_name = 'accounts/profile_edit.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile, created = UserProfile.objects.get_or_create(user=user)
        
        context.update({
            'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
            'form': UserProfileForm(instance=profile, user=user),
            'profile': profile,
        })
        
        return context
    
    def post(self, request, *args, **kwargs):
        user = request.user
        profile, created = UserProfile.objects.get_or_create(user=user)
        
        form = UserProfileForm(request.POST, request.FILES, instance=profile, user=user)
        
        if form.is_valid():
            form.save(user=user)
            messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return redirect('accounts:profile')
        else:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.')
        
        context = self.get_context_data(**kwargs)
        context['form'] = form
        return render(request, self.template_name, context)


@method_decorator(login_required, name='dispatch')
class PasswordChangeView(LoginRequiredMixin, TemplateView):
    """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"""
    template_name = 'accounts/password_change.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'title': '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è',
            'form': PasswordChangeForm(user=self.request.user),
        })
        return context
    
    def post(self, request, *args, **kwargs):
        form = PasswordChangeForm(user=request.user, data=request.POST)
        
        if form.is_valid():
            form.save()
            update_session_auth_hash(request, request.user)  # –í–∞–∂–Ω–æ! –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            messages.success(request, '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
            return redirect('accounts:profile')
        else:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.')
        
        context = self.get_context_data(**kwargs)
        context['form'] = form
        return render(request, self.template_name, context)


@method_decorator(login_required, name='dispatch')
class FavoritesView(LoginRequiredMixin, TemplateView):
    """–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    template_name = 'accounts/favorites.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
        favorite_books = UserFavoriteBook.objects.filter(user=user).select_related('book').order_by('-added_at')
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        paginator = Paginator(favorite_books, 12)  # 12 –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_number = self.request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        
        context.update({
            'title': '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏',
            'favorite_books': page_obj,
            'total_favorites': favorite_books.count(),
        })
        
        return context


@method_decorator(login_required, name='dispatch')
class MyOrdersView(LoginRequiredMixin, TemplateView):
    """–ú–æ–∏ –∑–∞–∫–∞–∑—ã"""
    template_name = 'accounts/my_orders.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        # –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = Order.objects.filter(user=user).order_by('-created_at')
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_filter = self.request.GET.get('status')
        if status_filter:
            orders = orders.filter(status=status_filter)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        paginator = Paginator(orders, 10)  # 10 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_number = self.request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        order_stats = {
            'total': Order.objects.filter(user=user).count(),
            'pending': Order.objects.filter(user=user, status='pending').count(),
            'completed': Order.objects.filter(user=user, status='completed').count(),
            'cancelled': Order.objects.filter(user=user, status='cancelled').count(),
        }
        
        context.update({
            'title': '–ú–æ–∏ –∑–∞–∫–∞–∑—ã',
            'orders': page_obj,
            'order_stats': order_stats,
            'current_filter': status_filter,
        })
        
        return context


@method_decorator(login_required, name='dispatch')
class MyPurchasesView(LoginRequiredMixin, TemplateView):
    """–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"""
    template_name = 'accounts/my_purchases.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        # –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        purchases = Purchase.objects.filter(user=user).select_related('product', 'order').order_by('-purchased_at')
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        product_type = self.request.GET.get('type')
        if product_type:
            purchases = purchases.filter(product__product_type=product_type)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        paginator = Paginator(purchases, 12)  # 12 –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_number = self.request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
        purchase_stats = {
            'total': purchases.count(),
            'books': purchases.filter(product__product_type='book').count(),
            'audio': purchases.filter(product__product_type='audio').count(),
            'subscriptions': purchases.filter(product__product_type='subscription').count(),
        }
        
        context.update({
            'title': '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏',
            'purchases': page_obj,
            'purchase_stats': purchase_stats,
            'current_filter': product_type,
        })
        
        return context


@method_decorator(login_required, name='dispatch')
class MyPlaylistsView(LoginRequiredMixin, TemplateView):
    """–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã"""
    template_name = 'accounts/my_playlists.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        # –ü–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # playlists = Playlist.objects.filter(user=user).annotate(
        #     story_count=Count('items')
        # ).order_by('-created_at')
        playlists = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        paginator = Paginator(playlists, 12)  # 12 –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_number = self.request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        
        context.update({
            'title': '–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã',
            'playlists': page_obj,
            'total_playlists': playlists.count(),
        })
        
        return context


@method_decorator(login_required, name='dispatch')
class ReadingProgressView(LoginRequiredMixin, TemplateView):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è"""
    template_name = 'accounts/reading_progress.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        
        # –°–µ—Å—Å–∏–∏ —á—Ç–µ–Ω–∏—è
        reading_sessions = ReadingSession.objects.filter(user=user).select_related('book').order_by('-last_read')
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        active_reading = reading_sessions.filter(current_page__lt=F('total_pages'))
        completed_reading = reading_sessions.filter(current_page__gte=F('total_pages'))
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        active_paginator = Paginator(active_reading, 10)
        active_page = self.request.GET.get('active_page', 1)
        active_page_obj = active_paginator.get_page(active_page)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        completed_paginator = Paginator(completed_reading, 10)
        completed_page = self.request.GET.get('completed_page', 1)
        completed_page_obj = completed_paginator.get_page(completed_page)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è
        reading_stats = {
            'total_books': reading_sessions.count(),
            'active_books': active_reading.count(),
            'completed_books': completed_reading.count(),
            'total_reading_time': reading_sessions.aggregate(
                total_time=Sum('reading_time')
            )['total_time'] or 0,
        }
        
        context.update({
            'title': '–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è',
            'active_reading': active_page_obj,
            'completed_reading': completed_page_obj,
            'reading_stats': reading_stats,
        })
        
        return context


@login_required
def profile_stats_api(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è (–¥–ª—è AJAX)"""
    user = request.user
    
    stats = {
        'reading': {
            'active': ReadingSession.objects.filter(user=user, current_page__lt=F('total_pages')).count(),
            'completed': ReadingSession.objects.filter(user=user, current_page__gte=F('total_pages')).count(),
            'favorites': UserFavoriteBook.objects.filter(user=user).count(),
        },
        'purchases': {
            'orders': Order.objects.filter(user=user).count(),
            'completed_orders': Order.objects.filter(user=user, status='completed').count(),
            'total_spent': float(Order.objects.filter(user=user, status='completed').aggregate(
                total=Sum('total_amount')
            )['total'] or 0),
        },
        'social': {
            'playlists': Playlist.objects.filter(user=user).count(),
        }
    }
    
    return JsonResponse(stats)
