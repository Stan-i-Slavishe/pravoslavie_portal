# analytics/admin.py

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.db.models import Count
from .models import PurchaseIntent, PopularContent, UserBehavior, EmailSubscription, WeeklyReport

@admin.register(PurchaseIntent)
class PurchaseIntentAdmin(admin.ModelAdmin):
    list_display = [
        'content_info', 'button_type', 'user_info', 'click_count', 
        'admin_notified_display', 'clicked_at'
    ]
    list_filter = [
        'content_type', 'button_type', 'admin_notified', 'clicked_at'
    ]
    search_fields = [
        'user__username', 'session_key', 'page_url'
    ]
    readonly_fields = [
        'clicked_at', 'ip_address', 'user_agent', 'referer', 'notification_sent_at'
    ]
    ordering = ['-clicked_at']
    
    # –†—É—Å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞
    list_display_links = ['content_info']
    list_per_page = 25
    
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
    def content_info(self, obj):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        icons = {
            'book': 'üìö',
            'fairy_tale': 'üßö‚Äç‚ôÄÔ∏è',
            'subscription': 'üëë',
            'audio': 'üéß',
            'product': 'üõçÔ∏è'
        }
        icon = icons.get(obj.content_type, 'üìÑ')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        content_name = self.get_content_name(obj)
        
        return format_html(
            '{} {} (ID: {})',
            icon,
            content_name,
            obj.object_id
        )
    content_info.short_description = '–ö–æ–Ω—Ç–µ–Ω—Ç'
    
    def get_content_name(self, obj):
        """–ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            if obj.content_type == 'book':
                from books.models import Book
                book = Book.objects.get(id=obj.object_id)
                return book.title[:50]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
            elif obj.content_type == 'fairy_tale':
                from fairy_tales.models import FairyTaleTemplate
                fairy_tale = FairyTaleTemplate.objects.get(id=obj.object_id)
                return fairy_tale.title[:50]
            elif obj.content_type == 'audio':
                from audio.models import AudioTrack
                audio = AudioTrack.objects.get(id=obj.object_id)
                return audio.title[:50]
            elif obj.content_type == 'subscription':
                from subscriptions.models import Subscription
                subscription = Subscription.objects.get(id=obj.object_id)
                return subscription.name[:50]
            elif obj.content_type == 'product':
                from shop.models import Product
                product = Product.objects.get(id=obj.object_id)
                return product.name[:50]
            else:
                return f"{obj.get_content_type_display()} #{obj.object_id}"
        except Exception:
            return f"{obj.get_content_type_display()} #{obj.object_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
    
    def user_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if obj.user:
            return obj.user.username
        else:
            return f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π_{obj.session_key[:8]}"
    user_info.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    def button_type(self, obj):
        return obj.get_button_type_display()
    button_type.short_description = '–¢–∏–ø –∫–Ω–æ–ø–∫–∏'
    
    def click_count(self, obj):
        return f"{obj.click_count} —Ä–∞–∑"
    click_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤'
    
    def admin_notified_display(self, obj):
        if obj.admin_notified:
            return format_html('<span style="color: green;">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>')
        else:
            return format_html('<span style="color: red;">‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>')
    admin_notified_display.short_description = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É'
    
    def clicked_at(self, obj):
        return obj.clicked_at.strftime('%d.%m.%Y %H:%M')
    clicked_at.short_description = '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('content_type', 'object_id', 'button_type', 'click_count')
        }),
        ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
            'fields': ('user', 'session_key')
        }),
        ('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('ip_address', 'user_agent', 'page_url', 'referer'),
            'classes': ('collapse',)
        }),
        ('Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
            'fields': ('admin_notified', 'notification_sent_at'),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('clicked_at',),
            'classes': ('collapse',)
        })
    )

@admin.register(PopularContent)
class PopularContentAdmin(admin.ModelAdmin):
    list_display = [
        'content_info', 'views_count', 'purchase_intents', 
        'conversion_rate_display', 'last_viewed_display'
    ]
    list_filter = ['content_type', 'last_viewed']
    ordering = ['-purchase_intents']
    readonly_fields = ['last_viewed', 'conversion_rate']
    list_per_page = 20
    
    def content_info(self, obj):
        icons = {
            'book': 'üìö',
            'fairy_tale': 'üßö‚Äç‚ôÄÔ∏è',
            'subscription': 'üëë',
            'audio': 'üéß',
            'product': 'üõçÔ∏è'
        }
        icon = icons.get(obj.content_type, 'üìÑ')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥)
        content_name = self.get_content_name(obj)
        
        return format_html(
            '{} {} (ID: {})',
            icon, 
            content_name, 
            obj.object_id
        )
    content_info.short_description = '–ö–æ–Ω—Ç–µ–Ω—Ç'
    
    def get_content_name(self, obj):
        """–ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            if obj.content_type == 'book':
                from books.models import Book
                book = Book.objects.get(id=obj.object_id)
                return book.title[:50]
            elif obj.content_type == 'fairy_tale':
                from fairy_tales.models import FairyTaleTemplate
                fairy_tale = FairyTaleTemplate.objects.get(id=obj.object_id)
                return fairy_tale.title[:50]
            elif obj.content_type == 'audio':
                from audio.models import AudioTrack
                audio = AudioTrack.objects.get(id=obj.object_id)
                return audio.title[:50]
            elif obj.content_type == 'subscription':
                from subscriptions.models import Subscription
                subscription = Subscription.objects.get(id=obj.object_id)
                return subscription.name[:50]
            elif obj.content_type == 'product':
                from shop.models import Product
                product = Product.objects.get(id=obj.object_id)
                return product.name[:50]
            else:
                return f"{obj.content_type.title()} #{obj.object_id}"
        except Exception:
            return f"{obj.content_type.title()} #{obj.object_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
    
    def views_count(self, obj):
        return f"{obj.views_count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    views_count.short_description = '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'
    
    def purchase_intents(self, obj):
        return f"{obj.purchase_intents} –∫–ª–∏–∫–æ–≤"
    purchase_intents.short_description = '–ù–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏'
    
    def conversion_rate_display(self, obj):
        if obj.conversion_rate >= 10:
            color = 'red'
        elif obj.conversion_rate >= 5:
            color = 'orange'
        else:
            color = 'green'
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{:.1f}%</span>',
            color, obj.conversion_rate
        )
    conversion_rate_display.short_description = '–ö–æ–Ω–≤–µ—Ä—Å–∏—è'
    
    def last_viewed_display(self, obj):
        return obj.last_viewed.strftime('%d.%m.%Y %H:%M')
    last_viewed_display.short_description = '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä'

@admin.register(UserBehavior)
class UserBehaviorAdmin(admin.ModelAdmin):
    list_display = [
        'user_info', 'total_page_views', 'total_purchase_intents',
        'purchase_probability_display', 'last_active_display'
    ]
    list_filter = [
        'purchase_probability', 'last_active'
    ]
    search_fields = ['user__username', 'session_key']
    readonly_fields = ['last_active', 'purchase_probability']
    ordering = ['-purchase_probability']
    list_per_page = 20
    
    def user_info(self, obj):
        if obj.user:
            return obj.user.username
        else:
            return f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π_{obj.session_key[:8]}"
    user_info.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    def total_page_views(self, obj):
        return f"{obj.total_page_views} —Å—Ç—Ä–∞–Ω–∏—Ü"
    total_page_views.short_description = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü'
    
    def total_purchase_intents(self, obj):
        return f"{obj.total_purchase_intents} –∫–ª–∏–∫–æ–≤"
    total_purchase_intents.short_description = '–ö–ª–∏–∫–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É'
    
    def purchase_probability_display(self, obj):
        probability = obj.purchase_probability
        
        if probability >= 80:
            color = 'red'
            emoji = 'üî•'
        elif probability >= 60:
            color = 'orange'
            emoji = '‚ö°'
        elif probability >= 40:
            color = 'blue'
            emoji = 'üí°'
        else:
            color = 'gray'
            emoji = 'üí§'
        
        return format_html(
            '{} <span style="color: {}; font-weight: bold;">{:.0f}%</span>',
            emoji, color, probability
        )
    purchase_probability_display.short_description = '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏'
    
    def last_active_display(self, obj):
        return obj.last_active.strftime('%d.%m.%Y %H:%M')
    last_active_display.short_description = '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
    
    actions = ['recalculate_probability']
    
    def recalculate_probability(self, request, queryset):
        """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏"""
        for behavior in queryset:
            behavior.calculate_purchase_probability()
        
        self.message_user(
            request,
            f'–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è {queryset.count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        )
    recalculate_probability.short_description = '–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏'

@admin.register(EmailSubscription)
class EmailSubscriptionAdmin(admin.ModelAdmin):
    list_display = [
        'email', 'user_link', 'interested_in_display', 'subscribed_at_display',
        'is_active_display', 'confirmed_display', 'notification_preferences'
    ]
    list_filter = [
        'interested_in', 'is_active', 'confirmed', 'subscribed_at',
        'notify_payment_launch', 'notify_new_content'
    ]
    search_fields = ['email', 'user__username']
    readonly_fields = ['subscribed_at', 'confirmation_token']
    ordering = ['-subscribed_at']
    list_per_page = 30
    
    def user_link(self, obj):
        if obj.user:
            return obj.user.username
        else:
            return '–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    user_link.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    def interested_in_display(self, obj):
        interest_names = {
            'book': '–ö–Ω–∏–≥–∏',
            'fairy_tale': '–°–∫–∞–∑–∫–∏', 
            'subscription': '–ü–æ–¥–ø–∏—Å–∫–∏',
            'audio': '–ê—É–¥–∏–æ'
        }
        return interest_names.get(obj.interested_in, obj.interested_in or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    interested_in_display.short_description = '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç'
    
    def subscribed_at_display(self, obj):
        return obj.subscribed_at.strftime('%d.%m.%Y %H:%M')
    subscribed_at_display.short_description = '–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏'
    
    def is_active_display(self, obj):
        return '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if obj.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
    is_active_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def confirmed_display(self, obj):
        return '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' if obj.confirmed else '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    confirmed_display.short_description = 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
    
    def notification_preferences(self, obj):
        prefs = []
        if obj.notify_payment_launch:
            prefs.append('üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç–µ–∂–µ–π')
        if obj.notify_new_content:
            prefs.append('üìù –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')
        if obj.notify_discounts:
            prefs.append('üí∞ –°–∫–∏–¥–∫–∏')
        
        return ' | '.join(prefs) if prefs else '–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    notification_preferences.short_description = '–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    
    actions = ['send_test_notification', 'mark_as_confirmed']
    
    def send_test_notification(self, request, queryset):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        count = queryset.count()
        self.message_user(
            request,
            f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'
        )
    send_test_notification.short_description = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    
    def mark_as_confirmed(self, request, queryset):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –∞–¥—Ä–µ—Å–∞"""
        count = queryset.update(confirmed=True)
        self.message_user(
            request,
            f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {count} email –∞–¥—Ä–µ—Å–æ–≤'
        )
    mark_as_confirmed.short_description = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –∞–¥—Ä–µ—Å–∞'
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ
    fieldsets = (
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('email', 'user')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
            'fields': ('notify_payment_launch', 'notify_new_content', 'notify_discounts')
        }),
        ('–ò–Ω—Ç–µ—Ä–µ—Å—ã', {
            'fields': ('interested_in', 'source_page')
        }),
        ('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', {
            'fields': ('is_active', 'confirmed', 'confirmation_token')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('subscribed_at',),
            'classes': ('collapse',)
        })
    )


@admin.register(WeeklyReport)
class WeeklyReportAdmin(admin.ModelAdmin):
    list_display = [
        'week_period', 'total_purchase_intents', 'unique_users', 
        'new_subscriptions', 'sent_to_admins_display', 'sent_to_subscribers_display',
        'created_at_display'
    ]
    list_filter = [
        'sent_to_admins', 'sent_to_subscribers', 'created_at', 'week_start'
    ]
    readonly_fields = [
        'created_at', 'top_content'
    ]
    ordering = ['-week_start']
    list_per_page = 20
    
    def week_period(self, obj):
        return f"{obj.week_start.strftime('%d.%m')} - {obj.week_end.strftime('%d.%m.%Y')}"
    week_period.short_description = '–ü–µ—Ä–∏–æ–¥'
    
    def sent_to_admins_display(self, obj):
        if obj.sent_to_admins:
            return format_html('<span style="color: green;">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>')
        else:
            return format_html('<span style="color: red;">‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>')
    sent_to_admins_display.short_description = '–ê–¥–º–∏–Ω–∞–º'
    
    def sent_to_subscribers_display(self, obj):
        if obj.sent_to_subscribers:
            return format_html('<span style="color: green;">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>')
        else:
            return format_html('<span style="color: red;">‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>')
    sent_to_subscribers_display.short_description = '–ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º'
    
    def created_at_display(self, obj):
        return obj.created_at.strftime('%d.%m.%Y %H:%M')
    created_at_display.short_description = '–°–æ–∑–¥–∞–Ω'
    
    fieldsets = (
        ('–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞', {
            'fields': ('week_start', 'week_end')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('total_purchase_intents', 'unique_users', 'new_subscriptions')
        }),
        ('–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('top_content',),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏', {
            'fields': ('sent_to_admins', 'sent_to_subscribers')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        })
    )
