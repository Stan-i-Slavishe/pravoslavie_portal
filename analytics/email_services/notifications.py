# analytics/email_services/notifications.py

from django.core.mail import send_mail, EmailMultiAlternatives
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

def get_admin_emails():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ settings –∏–ª–∏ –±—Ä–∞—Ç—å –∏–∑ User.is_staff
    admin_emails = getattr(settings, 'ADMIN_EMAIL_LIST', ['admin@pravoslavie-portal.ru'])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö staff –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from django.contrib.auth.models import User
    staff_emails = User.objects.filter(is_staff=True, email__isnull=False).values_list('email', flat=True)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    all_emails = list(set(list(admin_emails) + list(staff_emails)))
    return [email for email in all_emails if email]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ

def send_purchase_intent_notification(purchase_intent):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
    try:
        from ..views import get_content_title
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
        content_title = get_content_title(purchase_intent.content_type, purchase_intent.object_id)
        user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {purchase_intent.user.username}" if purchase_intent.user else f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π (—Å–µ—Å—Å–∏—è: {purchase_intent.session_key[:8]})"
        
        # –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        subject = f"üõí –ù–æ–≤—ã–π –∫–ª–∏–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {content_title}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        context = {
            'purchase_intent': purchase_intent,
            'content_title': content_title,
            'user_info': user_info,
            'admin_url': f"http://localhost:8000/admin/analytics/purchaseintent/{purchase_intent.id}/change/",
            'analytics_url': "http://localhost:8000/analytics/dashboard/",
        }
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω—ã
        html_content = render_to_string('analytics/emails/purchase_intent_notification.html', context)
        text_content = render_to_string('analytics/emails/purchase_intent_notification.txt', context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        admin_emails = get_admin_emails()
        if admin_emails:
            msg = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=admin_emails,
            )
            msg.attach_alternative(html_content, "text/html")
            msg.send()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            purchase_intent.admin_notified = True
            purchase_intent.notification_sent_at = timezone.now()
            purchase_intent.save(update_fields=['admin_notified', 'notification_sent_at'])
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ {purchase_intent.id} –Ω–∞ {len(admin_emails)} –∞–¥—Ä–µ—Å–æ–≤")
            return True
        else:
            logger.warning("–ù–µ—Ç email –∞–¥—Ä–µ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ {purchase_intent.id}: {e}")
        return False

def send_subscription_confirmation(subscription):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        subject = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"
        
        context = {
            'subscription': subscription,
            'unsubscribe_url': f"http://localhost:8000/analytics/unsubscribe/{subscription.id}/",
        }
        
        html_content = render_to_string('analytics/emails/subscription_confirmation.html', context)
        text_content = render_to_string('analytics/emails/subscription_confirmation.txt', context)
        
        msg = EmailMultiAlternatives(
            subject=subject,
            body=text_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[subscription.email],
        )
        msg.attach_alternative(html_content, "text/html")
        msg.send()
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {subscription.email}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
        return False

def generate_weekly_report(week_start, week_end):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    from ..models import PurchaseIntent, PopularContent, EmailSubscription, WeeklyReport
    from django.db.models import Count, Q
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        week_intents = PurchaseIntent.objects.filter(
            clicked_at__date__gte=week_start,
            clicked_at__date__lte=week_end
        )
        
        total_intents = week_intents.count()
        unique_users = week_intents.values('user', 'session_key').distinct().count()
        
        # –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        new_subscriptions = EmailSubscription.objects.filter(
            subscribed_at__date__gte=week_start,
            subscribed_at__date__lte=week_end
        ).count()
        
        # –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        from ..views import get_content_title
        top_content_data = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ ID
        content_stats = week_intents.values('content_type', 'object_id').annotate(
            clicks=Count('id')
        ).order_by('-clicks')[:10]
        
        for stat in content_stats:
            title = get_content_title(stat['content_type'], stat['object_id'])
            top_content_data.append({
                'title': title,
                'content_type': stat['content_type'],
                'object_id': stat['object_id'],
                'clicks': stat['clicks']
            })
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report, created = WeeklyReport.objects.get_or_create(
            week_start=week_start,
            week_end=week_end,
            defaults={
                'total_purchase_intents': total_intents,
                'unique_users': unique_users,
                'new_subscriptions': new_subscriptions,
                'top_content': top_content_data,
            }
        )
        
        if not created:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
            report.total_purchase_intents = total_intents
            report.unique_users = unique_users
            report.new_subscriptions = new_subscriptions
            report.top_content = top_content_data
            report.save()
        
        return report
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def send_weekly_report(report):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        subject = f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report.week_start.strftime('%d.%m')} - {report.week_end.strftime('%d.%m.%Y')}"
        
        context = {
            'report': report,
            'period': f"{report.week_start.strftime('%d.%m')} - {report.week_end.strftime('%d.%m.%Y')}",
            'analytics_url': "http://localhost:8000/analytics/dashboard/",
        }
        
        html_content = render_to_string('analytics/emails/weekly_report.html', context)
        text_content = render_to_string('analytics/emails/weekly_report.txt', context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_emails = get_admin_emails()
        if admin_emails:
            msg = EmailMultiAlternatives(
                subject=f"[–ê–î–ú–ò–ù] {subject}",
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=admin_emails,
            )
            msg.attach_alternative(html_content, "text/html")
            msg.send()
            
            report.sent_to_admins = True
            logger.info(f"–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {len(admin_emails)} –∞–¥—Ä–µ—Å–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        from ..models import EmailSubscription
        subscribers = EmailSubscription.objects.filter(
            is_active=True,
            notify_weekly_reports=True
        )
        
        if subscribers.exists():
            subscriber_emails = list(subscribers.values_list('email', flat=True))
            
            msg = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=subscriber_emails,
            )
            msg.attach_alternative(html_content, "text/html")
            msg.send()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            from django.db import models
            subscribers.update(
                emails_sent=models.F('emails_sent') + 1,
                last_email_sent=timezone.now()
            )
            
            report.sent_to_subscribers = True
            logger.info(f"–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º: {len(subscriber_emails)} –∞–¥—Ä–µ—Å–æ–≤")
        
        report.save()
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def send_payment_launch_notification():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        from ..models import EmailSubscription
        
        subscribers = EmailSubscription.objects.filter(
            is_active=True,
            notify_payment_launch=True
        )
        
        if not subscribers.exists():
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π")
            return True
        
        subject = "üéâ –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–º –ø–æ—Ä—Ç–∞–ª–µ!"
        
        context = {
            'shop_url': "http://localhost:8000/shop/",
            'site_name': "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª",
        }
        
        html_content = render_to_string('analytics/emails/payment_launch.html', context)
        text_content = render_to_string('analytics/emails/payment_launch.txt', context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 50 –∞–¥—Ä–µ—Å–æ–≤
        batch_size = 50
        total_sent = 0
        
        for i in range(0, subscribers.count(), batch_size):
            batch = subscribers[i:i + batch_size]
            batch_emails = list(batch.values_list('email', flat=True))
            
            msg = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=batch_emails,
            )
            msg.attach_alternative(html_content, "text/html")
            msg.send()
            
            total_sent += len(batch_emails)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∞—Ç—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {len(batch_emails)} –∞–¥—Ä–µ—Å–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from django.db import models
        subscribers.update(
            emails_sent=models.F('emails_sent') + 1,
            last_email_sent=timezone.now()
        )
        
        logger.info(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {total_sent}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return False
