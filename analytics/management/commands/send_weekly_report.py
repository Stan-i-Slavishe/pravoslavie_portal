# analytics/management/commands/send_weekly_report.py

from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime, timedelta
from analytics.email_services.notifications import generate_weekly_report, send_weekly_report

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--week-start',
            type=str,
            help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è)'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        )

    def handle(self, *args, **options):
        self.stdout.write('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if options['week_start']:
            try:
                week_start = datetime.strptime(options['week_start'], '%Y-%m-%d').date()
            except ValueError:
                self.stdout.write(
                    self.style.ERROR('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD')
                )
                return
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            today = timezone.now().date()
            days_since_monday = today.weekday()
            last_monday = today - timedelta(days=days_since_monday + 7)
            week_start = last_monday

        week_end = week_start + timedelta(days=6)
        
        self.stdout.write(f'–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞: {week_start.strftime(\"%d.%m.%Y\")} - {week_end.strftime(\"%d.%m.%Y\")}')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_weekly_report(week_start, week_end)
        
        if not report:
            self.stdout.write(self.style.ERROR('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'))
            return
        
        self.stdout.write(f'‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:')
        self.stdout.write(f'   - –ö–ª–∏–∫–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {report.total_purchase_intents}')
        self.stdout.write(f'   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report.unique_users}')
        self.stdout.write(f'   - –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {report.new_subscriptions}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not options['force'] and report.sent_to_admins and report.sent_to_subscribers:
            self.stdout.write(
                self.style.WARNING('–û—Ç—á–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏')
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        self.stdout.write('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞...')
        
        if send_weekly_report(report):
            self.stdout.write(self.style.SUCCESS('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'))
        else:
            self.stdout.write(self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞'))
