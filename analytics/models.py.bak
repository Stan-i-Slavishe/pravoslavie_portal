# analytics/models.py - НОВОЕ ПРИЛОЖЕНИЕ ДЛЯ АНАЛИТИКИ

from django.db import models
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey

class PurchaseIntent(models.Model):
    """Отслеживание намерений покупки - клики на заглушки"""
    
    CONTENT_TYPES = [
        ('book', 'Книга'),
        ('fairy_tale', 'Сказка'),
        ('subscription', 'Подписка'),
        ('audio', 'Аудио'),
    ]
    
    BUTTON_TYPES = [
        ('buy', 'Купить'),
        ('download', 'Скачать'),
        ('subscribe', 'Подписаться'),
        ('listen', 'Слушать'),
        ('read_full', 'Читать полностью'),
    ]
    
    # Пользователь (может быть анонимным)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    session_key = models.CharField(max_length=40, help_text="Для анонимных пользователей")
    
    # Что хотели купить
    content_type = models.CharField(max_length=20, choices=CONTENT_TYPES)
    object_id = models.PositiveIntegerField()
    button_type = models.CharField(max_length=20, choices=BUTTON_TYPES)
    
    # Метаданные
    ip_address = models.GenericIPAddressField()
    user_agent = models.TextField()
    referer = models.URLField(blank=True)
    page_url = models.URLField()
    
    # Время и частота
    clicked_at = models.DateTimeField(auto_now_add=True)
    click_count = models.PositiveIntegerField(default=1)
    
    # Email уведомления
    admin_notified = models.BooleanField('Админ уведомлен', default=False)
    notification_sent_at = models.DateTimeField('Уведомление отправлено', null=True, blank=True)
    
    class Meta:
        db_table = 'analytics_purchase_intent'
        verbose_name = 'Намерение покупки'
        verbose_name_plural = 'Намерения покупки'
        indexes = [
            models.Index(fields=['content_type', 'object_id']),
            models.Index(fields=['clicked_at']),
            models.Index(fields=['user']),
            models.Index(fields=['session_key']),
        ]
    
    def __str__(self):
        return f"{self.get_content_type_display()} #{self.object_id} - {self.get_button_type_display()}"


class PopularContent(models.Model):
    """Отслеживание популярности контента"""
    
    content_type = models.CharField(max_length=20)
    object_id = models.PositiveIntegerField()
    
    # Статистика
    views_count = models.PositiveIntegerField(default=0)
    purchase_intents = models.PositiveIntegerField(default=0)
    conversion_rate = models.FloatField(default=0.0)  # purchase_intents / views_count
    
    # Временные метрики
    last_viewed = models.DateTimeField(auto_now=True)
    trending_score = models.FloatField(default=0.0)  # Алгоритм популярности
    
    class Meta:
        unique_together = ['content_type', 'object_id']
        db_table = 'analytics_popular_content'
        verbose_name = 'Популярный контент'
        verbose_name_plural = 'Популярный контент'
    
    def update_conversion_rate(self):
        if self.views_count > 0:
            self.conversion_rate = (self.purchase_intents / self.views_count) * 100
        else:
            self.conversion_rate = 0.0
        self.save(update_fields=['conversion_rate'])


class UserBehavior(models.Model):
    """Профиль поведения пользователя"""
    
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)
    session_key = models.CharField(max_length=40, unique=True, null=True, blank=True)
    
    # Интересы
    preferred_age_group = models.CharField(max_length=10, blank=True)  # 3-5, 6-8, 9-12
    interested_categories = models.JSONField(default=list)  # ['страхи', 'самооценка']
    
    # Активность
    total_page_views = models.PositiveIntegerField(default=0)
    total_purchase_intents = models.PositiveIntegerField(default=0)
    avg_session_duration = models.DurationField(null=True, blank=True)
    
    # Вероятность покупки
    purchase_probability = models.FloatField(default=0.0)  # 0-100%
    last_active = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'analytics_user_behavior'
        verbose_name = 'Поведение пользователя'
        verbose_name_plural = 'Поведение пользователей'
    
    def calculate_purchase_probability(self):
        """Алгоритм расчета вероятности покупки"""
        score = 0
        
        # Частота кликов на заглушки
        if self.total_purchase_intents > 5:
            score += 30
        elif self.total_purchase_intents > 2:
            score += 20
        elif self.total_purchase_intents > 0:
            score += 10
        
        # Активность на сайте
        if self.total_page_views > 20:
            score += 25
        elif self.total_page_views > 10:
            score += 15
        elif self.total_page_views > 5:
            score += 10
        
        # Зарегистрированный пользователь
        if self.user:
            score += 20
        
        # Заполненный профиль интересов
        if self.preferred_age_group:
            score += 10
        if self.interested_categories:
            score += 15
        
        self.purchase_probability = min(score, 100)
        self.save(update_fields=['purchase_probability'])
        return self.purchase_probability


class EmailSubscription(models.Model):
    """Подписки на уведомления о запуске платежей"""
    
    SUBSCRIPTION_TYPES = [
        ('payment_launch', 'Запуск платежей'),
        ('new_content', 'Новый контент'),
        ('discounts', 'Скидки и акции'),
        ('weekly_reports', 'Недельные отчеты'),
    ]
    
    email = models.EmailField(unique=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    
    # На что подписался
    notify_payment_launch = models.BooleanField('Уведомлять о запуске платежей', default=True)
    notify_new_content = models.BooleanField('Уведомлять о новом контенте', default=True)
    notify_discounts = models.BooleanField('Уведомлять о скидках', default=False)
    notify_weekly_reports = models.BooleanField('Получать недельные отчеты', default=False)
    
    # Метаданные подписки
    subscribed_at = models.DateTimeField(auto_now_add=True)
    source_page = models.URLField(help_text="Страница, где подписался")
    interested_in = models.CharField(max_length=50, blank=True)  # books, fairy_tales, etc
    
    # Статус
    is_active = models.BooleanField(default=True)
    confirmed = models.BooleanField(default=False)
    confirmation_token = models.CharField(max_length=100, blank=True)
    
    # Статистика отправки
    emails_sent = models.PositiveIntegerField('Отправлено email', default=0)
    last_email_sent = models.DateTimeField('Последний email', null=True, blank=True)
    
    class Meta:
        db_table = 'analytics_email_subscription'
        verbose_name = 'Email подписка'
        verbose_name_plural = 'Email подписки'
    
    def __str__(self):
        return f"{self.email} - {self.interested_in}"


class WeeklyReport(models.Model):
    """Недельные отчеты по аналитике"""
    
    # Период отчета
    week_start = models.DateField('Начало недели')
    week_end = models.DateField('Конец недели')
    
    # Статистика
    total_purchase_intents = models.PositiveIntegerField('Общее количество кликов', default=0)
    unique_users = models.PositiveIntegerField('Уникальные пользователи', default=0)
    new_subscriptions = models.PositiveIntegerField('Новые подписки', default=0)
    top_content = models.JSONField('Популярный контент', default=list)
    
    # Метаданные
    created_at = models.DateTimeField('Создан', auto_now_add=True)
    sent_to_admins = models.BooleanField('Отправлен админам', default=False)
    sent_to_subscribers = models.BooleanField('Отправлен подписчикам', default=False)
    
    class Meta:
        verbose_name = 'Недельный отчет'
        verbose_name_plural = 'Недельные отчеты'
        unique_together = ['week_start', 'week_end']
        ordering = ['-week_start']
    
    def __str__(self):
        return f"Отчет {self.week_start.strftime('%d.%m')} - {self.week_end.strftime('%d.%m.%Y')}"
