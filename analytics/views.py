# analytics/views.py

import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.admin.views.decorators import staff_member_required
from django.db.models import Count, F, Avg
from django.utils import timezone
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from datetime import timedelta
import requests

def get_content_title(content_type, object_id):
    """–ü–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–æ–º–µ—Ç–∫–∞–º–∏"""
    try:
        if content_type == 'book':
            from books.models import Book
            book = Book.objects.get(id=object_id)
            return f"{book.title} (–∫–Ω–∏–≥–∏)"
        elif content_type == 'fairy_tale':
            from fairy_tales.models import FairyTaleTemplate
            fairy_tale = FairyTaleTemplate.objects.get(id=object_id)
            return f"{fairy_tale.title} (–ø–æ–¥—Ä–æ–±–Ω–æ)"
        elif content_type == 'audio':
            from audio.models import AudioTrack
            audio = AudioTrack.objects.get(id=object_id)
            return f"{audio.title} (–∞—É–¥–∏–æ)"
        elif content_type == 'subscription':
            from subscriptions.models import Subscription
            subscription = Subscription.objects.get(id=object_id)
            return f"{subscription.name} (–ø–æ–¥–ø–∏—Å–∫–∞)"
        elif content_type == 'product':
            from shop.models import Product
            product = Product.objects.get(id=object_id)
            
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏
            if product.product_type == 'fairy_tale' and product.fairy_tale_template_id:
                try:
                    from fairy_tales.models import FairyTaleTemplate
                    fairy_tale = FairyTaleTemplate.objects.get(id=product.fairy_tale_template_id)
                    return f"{fairy_tale.title} (–º–∞–≥–∞–∑–∏–Ω)"
                except:
                    pass
            
            return f"{product.title} (–º–∞–≥–∞–∑–∏–Ω)"
        else:
            return f"{content_type.title()} #{object_id}"
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è {content_type} #{object_id}: {e}")
        return f"{content_type.title()} #{object_id} (–æ—à–∏–±–∫–∞)"

from .models import PurchaseIntent, PopularContent, UserBehavior, EmailSubscription

@csrf_exempt
@require_http_methods(["POST"])
def track_purchase_intent(request):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –ø–æ–∫—É–ø–∫–∏"""
    try:
        data = json.loads(request.body)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        user_behavior = None
        if request.user.is_authenticated:
            user_behavior, _ = UserBehavior.objects.get_or_create(user=request.user)
        else:
            session_key = data.get('session_key')
            if session_key:
                user_behavior, _ = UserBehavior.objects.get_or_create(session_key=session_key)
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        ip_address = get_client_ip(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä–µ–∫—Ç–∞
        intent_filter = {
            'content_type': data['content_type'],
            'object_id': data['object_id'],
            'button_type': data['button_type'],
        }
        
        if request.user.is_authenticated:
            intent_filter['user'] = request.user
        else:
            intent_filter['session_key'] = data.get('session_key')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏
        intent, created = PurchaseIntent.objects.get_or_create(
            **intent_filter,
            defaults={
                'ip_address': ip_address,
                'user_agent': request.META.get('HTTP_USER_AGENT', ''),
                'referer': data.get('referer', ''),
                'page_url': data.get('page_url', ''),
            }
        )
        
        if not created:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
            intent.click_count = F('click_count') + 1
            intent.clicked_at = timezone.now()
            intent.save(update_fields=['click_count', 'clicked_at'])
            intent.refresh_from_db()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        popular_content, _ = PopularContent.objects.get_or_create(
            content_type=data['content_type'],
            object_id=data['object_id']
        )
        popular_content.purchase_intents = F('purchase_intents') + 1
        popular_content.save(update_fields=['purchase_intents'])
        popular_content.refresh_from_db()
        popular_content.update_conversion_rate()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_behavior:
            user_behavior.total_purchase_intents = F('total_purchase_intents') + 1
            user_behavior.save(update_fields=['total_purchase_intents'])
            user_behavior.refresh_from_db()
            user_behavior.calculate_purchase_probability()
        
        # üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–û–¢–ö–õ–Æ–ß–ï–ù–û - —Å–ø–∞–º)
        # if created:  # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤
        #     from .email_services.notifications import send_purchase_intent_notification
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å –æ—Ç–≤–µ—Ç
        #     try:
        #         send_purchase_intent_notification(intent)
        #     except Exception as e:
        #         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        #         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return JsonResponse({
            'success': True,
            'total_clicks': intent.click_count,
            'user_probability': user_behavior.purchase_probability if user_behavior else 0,
            'message': 'Purchase intent tracked successfully'
        })
        
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=400)

@csrf_exempt
@require_http_methods(["POST"])
def subscribe_notifications(request):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        data = json.loads(request.body)
        email = data.get('email')
        
        if not email:
            return JsonResponse({'success': False, 'error': 'Email required'})
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription, created = EmailSubscription.objects.get_or_create(
            email=email,
            defaults={
                'user': request.user if request.user.is_authenticated else None,
                'interested_in': data.get('interested_in', ''),
                'source_page': data.get('source_page', ''),
                'notify_payment_launch': True,
                'notify_new_content': True,
            }
        )
        
        # üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if created:
            from .email_services.notifications import send_subscription_confirmation
            try:
                send_subscription_confirmation(subscription)
                message = '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.'
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                message = '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!'
        else:
            message = 'Email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω'
        
        return JsonResponse({
            'success': True,
            'message': message,
            'total_subscribers': EmailSubscription.objects.filter(is_active=True).count()
        })
        
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=400)

@staff_member_required
def analytics_dashboard(request):
    """–î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    today = timezone.now().date()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total_intents': PurchaseIntent.objects.count(),
        'unique_users': PurchaseIntent.objects.values('user', 'session_key').distinct().count(),
        'total_subscribers': EmailSubscription.objects.filter(is_active=True).count(),
        
        'intents_today': PurchaseIntent.objects.filter(clicked_at__date=today).count(),
        'intents_week': PurchaseIntent.objects.filter(clicked_at__date__gte=week_ago).count(),
        'intents_month': PurchaseIntent.objects.filter(clicked_at__date__gte=month_ago).count(),
    }
    
    # –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º –ø–æ–∫—É–ø–∫–∏ (—Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
    top_content = PopularContent.objects.order_by('-purchase_intents')[:10]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
    for content in top_content:
        content.title = get_content_title(content.content_type, content.object_id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_stats = PurchaseIntent.objects.values('content_type').annotate(
        total_clicks=Count('id'),
        unique_users=Count('session_key', distinct=True)
    ).order_by('-total_clicks')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–Ω–æ–ø–æ–∫
    button_stats = PurchaseIntent.objects.values('button_type').annotate(
        total_clicks=Count('id')
    ).order_by('-total_clicks')
    
    # IP –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–º–µ—Å—Ç–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏)
    ip_stats = PurchaseIntent.objects.values('ip_address').annotate(
        clicks=Count('id')
    ).order_by('-clicks')[:10]
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–∫—É–ø–∫–∏
    hot_users = UserBehavior.objects.filter(
        purchase_probability__gte=70
    ).order_by('-purchase_probability')[:20]
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
    daily_stats = []
    for i in range(30):
        date = today - timedelta(days=i)
        count = PurchaseIntent.objects.filter(clicked_at__date=date).count()
        daily_stats.append({
            'date': date.strftime('%Y-%m-%d'),
            'clicks': count
        })
    daily_stats.reverse()
    
    context = {
        'stats': stats,
        'top_content': top_content,
        'content_stats': list(content_stats),
        'button_stats': list(button_stats),
        'ip_stats': ip_stats,
        'hot_users': hot_users,
        'daily_stats': daily_stats,
    }
    
    return render(request, 'analytics/dashboard.html', context)

def get_client_ip(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip

@staff_member_required
def api_stats(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    stats = {
        'intents_today': PurchaseIntent.objects.filter(
            clicked_at__date=timezone.now().date()
        ).count(),
        
        'recent_subscribers': EmailSubscription.objects.filter(
            subscribed_at__gte=timezone.now() - timedelta(hours=24)
        ).count(),
        
        'purchase_ready_users': UserBehavior.objects.filter(
            purchase_probability__gte=80
        ).count(),
    }
    
    return JsonResponse(stats)

# üìß –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Email –ø–æ–¥–ø–∏—Å–æ–∫

def subscription_form(request):
    """–§–æ—Ä–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if request.method == 'POST':
        email = request.POST.get('email')
        interested_in = request.POST.get('interested_in', '')
        
        if not email:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ email –∞–¥—Ä–µ—Å')
            return render(request, 'analytics/subscription_form.html')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription, created = EmailSubscription.objects.get_or_create(
            email=email,
            defaults={
                'user': request.user if request.user.is_authenticated else None,
                'interested_in': interested_in,
                'source_page': request.META.get('HTTP_REFERER', ''),
                'notify_payment_launch': True,
                'notify_new_content': True,
            }
        )
        
        if created:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            from .email_services.notifications import send_subscription_confirmation
            try:
                send_subscription_confirmation(subscription)
                messages.success(request, '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.')
            except Exception as e:
                messages.success(request, '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!')
        else:
            messages.info(request, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        
        return redirect('analytics:subscription_success')
    
    return render(request, 'analytics/subscription_form.html')

def subscription_success(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    return render(request, 'analytics/subscription_success.html')

def unsubscribe(request, subscription_id):
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    subscription = get_object_or_404(EmailSubscription, id=subscription_id)
    
    if request.method == 'POST':
        subscription.is_active = False
        subscription.save()
        messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        return render(request, 'analytics/unsubscribe_success.html')
    
    return render(request, 'analytics/unsubscribe_confirm.html', {
        'subscription': subscription
    })

@staff_member_required
def email_campaigns(request):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ email –∫–∞–º–ø–∞–Ω–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    from .models import WeeklyReport
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    recent_reports = WeeklyReport.objects.all()[:10]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    total_subscribers = EmailSubscription.objects.filter(is_active=True).count()
    payment_subscribers = EmailSubscription.objects.filter(
        is_active=True, notify_payment_launch=True
    ).count()
    
    context = {
        'recent_reports': recent_reports,
        'total_subscribers': total_subscribers,
        'payment_subscribers': payment_subscribers,
    }
    
    return render(request, 'analytics/email_campaigns.html', context)
