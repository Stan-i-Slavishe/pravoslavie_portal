"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤ –º–µ–∂–¥—É core.Tag –∏ stories
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from core.models import Tag as CoreTag
from stories.models import Story
from django.db import connection

def analyze_tags():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–≥–æ–≤"""
    
    print("=" * 70)
    print("–ê–ù–ê–õ–ò–ó –¢–ï–ì–û–í –í –°–ò–°–¢–ï–ú–ï")
    print("=" * 70)
    
    # 1. –¢–µ–≥–∏ –≤ core.Tag
    print("\n1. –¢–ï–ì–ò –í –ú–û–î–ï–õ–ò core.Tag:")
    print("-" * 40)
    core_tags = CoreTag.objects.all().order_by('name')
    
    if core_tags.exists():
        for tag in core_tags:
            print(f"  - {tag.name} (slug: {tag.slug}, –∞–∫—Ç–∏–≤–µ–Ω: {tag.is_active})")
        print(f"\n–í—Å–µ–≥–æ —Ç–µ–≥–æ–≤ –≤ core.Tag: {core_tags.count()}")
    else:
        print("  –ù–ï–¢ –¢–ï–ì–û–í –í core.Tag!")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ stories —Å —Ç–µ–≥–∞–º–∏
    print("\n2. –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô –° –¢–ï–ì–ê–ú–ò –í STORIES:")
    print("-" * 40)
    
    # –°–º–æ—Ç—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã many-to-many
    with connection.cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å –¥–ª—è —Å–≤—è–∑–∏ —Ç–µ–≥–æ–≤
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name LIKE '%tag%'
            ORDER BY name;
        """)
        tables = cursor.fetchall()
        
        print("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–µ–≥–∞–º–∏ –≤ –ë–î:")
        for table in tables:
            print(f"  - {table[0]}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã stories_story_tags
        try:
            cursor.execute("""
                SELECT COUNT(*) FROM stories_story_tags;
            """)
            count = cursor.fetchone()[0]
            print(f"\n–°–≤—è–∑–µ–π –≤ stories_story_tags: {count}")
            
            if count > 0:
                cursor.execute("""
                    SELECT DISTINCT tag_id FROM stories_story_tags;
                """)
                tag_ids = [row[0] for row in cursor.fetchall()]
                print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —Ç–µ–≥–æ–≤ –≤ stories: {tag_ids}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —ç—Ç–∏ —Ç–µ–≥–∏ –≤ core_tag
                existing_tags = CoreTag.objects.filter(id__in=tag_ids)
                print(f"–ò–∑ –Ω–∏—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ core.Tag: {existing_tags.count()}")
                
                if existing_tags.exists():
                    print("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:")
                    for tag in existing_tags:
                        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏–π —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º
                        cursor.execute("""
                            SELECT COUNT(*) FROM stories_story_tags WHERE tag_id = %s;
                        """, [tag.id])
                        story_count = cursor.fetchone()[0]
                        print(f"  - {tag.name}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {story_count} —Ä–∞—Å—Å–∫–∞–∑–∞—Ö")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" —Å–≤—è–∑–∏
                missing_ids = set(tag_ids) - set(existing_tags.values_list('id', flat=True))
                if missing_ids:
                    print(f"\n–í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏: {missing_ids}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ stories_story_tags: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º stories —Å —Ç–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ ORM
    print("\n3. –†–ê–°–°–ö–ê–ó–´ –° –¢–ï–ì–ê–ú–ò (—á–µ—Ä–µ–∑ ORM):")
    print("-" * 40)
    
    stories_with_tags = Story.objects.filter(tags__isnull=False).distinct()
    print(f"–†–∞—Å—Å–∫–∞–∑–æ–≤ —Å —Ç–µ–≥–∞–º–∏: {stories_with_tags.count()}")
    
    if stories_with_tags.exists():
        for story in stories_with_tags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            tags = story.tags.all()
            tag_names = [tag.name for tag in tags]
            print(f"  - {story.title}: {', '.join(tag_names) if tag_names else '–Ω–µ—Ç —Ç–µ–≥–æ–≤'}")
        
        if stories_with_tags.count() > 5:
            print(f"  ... –∏ –µ—â–µ {stories_with_tags.count() - 5} —Ä–∞—Å—Å–∫–∞–∑–æ–≤")

def create_missing_tags():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    
    print("\n" + "=" * 70)
    print("–°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –¢–ï–ì–û–í")
    print("=" * 70)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å)
    required_tags = [
        '–∞–ª–∫–æ–≥–æ–ª—å', '–±–∞–±—É—à–∫–∞', '–±–∞–Ω–¥–∏—Ç—ã', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞', '–í–û–í',
        '–≤—Ä–∞–∑—É–º–ª–µ–Ω–∏–µ', '–≤—Ä–∞—á–µ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏', '–≥–æ–Ω–µ–Ω–∏—è', '–¥–µ–¥—É—à–∫–∞', '–¥–µ—Ç–∏',
        '–¥–æ–±—Ä–æ–µ —Å–ª–æ–≤–æ', '–¥–æ—á—å', '–∂–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ª–æ–≥–∏–∫–∏',
        '–∏—Å–ø—ã—Ç–∞–Ω–∏—è', '–∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏', '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ', '–∫—Ä–æ—Ç–æ—Å—Ç—å', '–º–∞–º–∞',
        '–º–æ–ª–∏—Ç–≤–∞', '–º–æ—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞', '–ø–∞–ø–∞', '–ø–æ–∫–∞—è–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ)',
        '–ø—Ä–æ—Å—Ç–∞—è —Ä–∞–¥–æ—Å—Ç—å', '—Å–µ–º—å—è', '—Å–∏–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å', '—Å–º–∏—Ä–µ–Ω–∏–µ',
        '—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ', '—Å—ã–Ω', '—Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–∞—è –ª—é–±–æ–≤—å', '—á—É–¥–µ—Å–∞', '—à–∫–æ–ª–∞'
    ]
    
    created_count = 0
    updated_count = 0
    
    for tag_name in required_tags:
        tag, created = CoreTag.objects.get_or_create(
            name=tag_name,
            defaults={
                'is_active': True,
                'description': f'–¢–µ–≥ –¥–ª—è –≤–∏–¥–µ–æ-—Ä–∞—Å—Å–∫–∞–∑–æ–≤: {tag_name}',
                'color': '#74b9ff'  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        )
        
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ–≥: {tag.name} (slug: {tag.slug})")
            created_count += 1
        else:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–≥ –∞–∫—Ç–∏–≤–µ–Ω
            if not tag.is_active:
                tag.is_active = True
                tag.save()
                updated_count += 1
                print(f"üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–µ–≥: {tag.name}")
            else:
                print(f"‚úîÔ∏è –¢–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {tag.name}")
    
    print(f"\n–ò–¢–û–ì–û:")
    print(f"  - –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤: {created_count}")
    print(f"  - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–≥–æ–≤: {updated_count}")
    print(f"  - –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {CoreTag.objects.count()}")

def sync_story_tags():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ —É —Ä–∞—Å—Å–∫–∞–∑–æ–≤"""
    
    print("\n" + "=" * 70)
    print("–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¢–ï–ì–û–í –í –†–ê–°–°–ö–ê–ó–ê–•")
    print("=" * 70)
    
    # –ú–∞–ø–∏–Ω–≥ —Ç–µ–≥–æ–≤ –∫ —Ä–∞—Å—Å–∫–∞–∑–∞–º (–ø—Ä–∏–º–µ—Ä–Ω—ã–π, –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å)
    tag_mappings = {
        '–º–æ–ª–∏—Ç–≤–∞': ['–º–æ–ª–∏—Ç', '–ø–æ–º–æ–ª–∏–ª', '–º–æ–ª–µ–±–µ–Ω'],
        '—á—É–¥–µ—Å–∞': ['—á—É–¥–æ', '—á—É–¥–µ—Å', '–Ω–µ–æ–±—ä—è—Å–Ω–∏–º–æ'],
        '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ': ['–∏—Å—Ü–µ–ª', '–≤—ã–∑–¥–æ—Ä–æ–≤', '–∏–∑–ª–µ—á–∏–ª'],
        '—Å–µ–º—å—è': ['—Å–µ–º—å', '—Ä–æ–¥–∏—Ç–µ–ª', '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫'],
        '–¥–µ—Ç–∏': ['—Ä–µ–±–µ–Ω–æ–∫', '—Ä–µ–±—ë–Ω–æ–∫', '–¥–µ—Ç', '—Å—ã–Ω', '–¥–æ—á—å', '–¥–æ—á–∫'],
        '–º–∞–º–∞': ['–º–∞–º', '–º–∞—Ç–µ—Ä', '–º–∞—Ç—É—à–∫'],
        '–ø–∞–ø–∞': ['–æ—Ç–µ—Ü', '–æ—Ç—Ü', '–ø–∞–ø–∞', '–±–∞—Ç—é—à–∫'],
        '–≤—Ä–∞–∑—É–º–ª–µ–Ω–∏–µ': ['–≤—Ä–∞–∑—É–º', '–ø–æ–Ω—è–ª', '–æ—Å–æ–∑–Ω–∞–ª'],
        '–ø–æ–∫–∞—è–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ)': ['–ø–æ–∫–∞—è', '—Ä–∞—Å–∫–∞—è', '–∏–∑–º–µ–Ω–∏–ª', '–ø—Ä–æ—Å—Ç–∏–ª'],
        '—Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–∞—è –ª—é–±–æ–≤—å': ['–ª—é–±–æ–≤', '–º–∏–ª–æ—Å–µ—Ä–¥', '—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω'],
    }
    
    stories = Story.objects.all()
    
    for story in stories:
        added_tags = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        text_to_analyze = f"{story.title} {story.description}".lower()
        
        for tag_name, keywords in tag_mappings.items():
            for keyword in keywords:
                if keyword in text_to_analyze:
                    try:
                        tag = CoreTag.objects.get(name=tag_name)
                        if not story.tags.filter(id=tag.id).exists():
                            story.tags.add(tag)
                            added_tags.append(tag_name)
                    except CoreTag.DoesNotExist:
                        print(f"‚ö†Ô∏è –¢–µ–≥ '{tag_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    break
        
        if added_tags:
            print(f"üìå {story.title}: –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–≥–∏: {', '.join(added_tags)}")
    
    print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def clean_broken_references():
    """–û—á–∏—â–∞–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–≥–∏"""
    
    print("\n" + "=" * 70)
    print("–û–ß–ò–°–¢–ö–ê –ë–ò–¢–´–• –°–°–´–õ–û–ö")
    print("=" * 70)
    
    with connection.cursor() as cursor:
        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏
        cursor.execute("""
            DELETE FROM stories_story_tags 
            WHERE tag_id NOT IN (SELECT id FROM core_tag);
        """)
        
        deleted_count = cursor.rowcount
        
        if deleted_count > 0:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {deleted_count}")
        else:
            print("‚úÖ –ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == '__main__':
    print("\nüöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¢–ï–ì–û–í\n")
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    analyze_tags()
    
    # 2. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ–≥–∏
    create_missing_tags()
    
    # 3. –û—á–∏—â–∞–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏
    clean_broken_references()
    
    # 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    sync_choice = input("\n–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Ç–µ–≥–∏ —Ä–∞—Å—Å–∫–∞–∑–∞–º? (y/n): ")
    if sync_choice.lower() == 'y':
        sync_story_tags()
    
    # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 70)
    print("–§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 70)
    analyze_tags()
    
    print("\n‚ú® –ì–û–¢–û–í–û!")
