#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import glob

def check_python_file(filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python —Ñ–∞–π–ª –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if not content.strip():
            return f"‚ùå –ü–£–°–¢–û–ô: {filepath}"
        
        if content.startswith('from django.db ') and len(content) < 50:
            return f"‚ùå –û–ë–†–ï–ó–ê–ù: {filepath}"
        
        if content.startswith('from django.contrib ') and len(content) < 50:
            return f"‚ùå –û–ë–†–ï–ó–ê–ù: {filepath}"
            
        if content.startswith('return f"') and not content.startswith('def '):
            return f"‚ùå –ü–û–í–†–ï–ñ–î–Å–ù: {filepath}"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
        try:
            compile(content, filepath, 'exec')
            return f"‚úÖ OK: {filepath}"
        except SyntaxError as e:
            return f"‚ùå –°–ò–ù–¢–ê–ö–°–ò–°: {filepath} - {e}"
            
    except Exception as e:
        return f"‚ùå –û–®–ò–ë–ö–ê: {filepath} - {e}"

def main():
    print("üîç –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í DJANGO")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ Python —Ñ–∞–π–ª—ã Django
    patterns = [
        '*/models.py',
        '*/admin.py', 
        '*/views.py',
        '*/forms.py',
        '*/urls.py',
    ]
    
    damaged_files = []
    
    for pattern in patterns:
        files = glob.glob(pattern, recursive=True)
        for file in files:
            if '.venv' not in file and '__pycache__' not in file:
                result = check_python_file(file)
                print(result)
                if result.startswith('‚ùå'):
                    damaged_files.append(file)
    
    if damaged_files:
        print("\n" + "=" * 50)
        print("üö® –ù–ê–ô–î–ï–ù–´ –ü–û–í–†–ï–ñ–î–Å–ù–ù–´–ï –§–ê–ô–õ–´:")
        for file in damaged_files:
            print(f"   üìÑ {file}")
            
        print(f"\nüí° –ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {len(damaged_files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (.bak)")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        print("\nüîß –ü–û–ü–´–¢–ö–ê –ê–í–¢–û–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø...")
        for file in damaged_files:
            backup_file = f"{file}.bak"
            if os.path.exists(backup_file):
                try:
                    with open(backup_file, 'r', encoding='utf-8') as f:
                        backup_content = f.read()
                    
                    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    lines = backup_content.split('\n')
                    clean_lines = []
                    
                    for line in lines:
                        if any(comment_word in line.lower() for comment_word in ['comment_admin', 'from .comment_admin', 'comments = GenericRelation']):
                            continue
                        clean_lines.append(line)
                    
                    clean_content = '\n'.join(clean_lines)
                    
                    with open(file, 'w', encoding='utf-8') as f:
                        f.write(clean_content)
                    
                    print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {file}")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {file}: {e}")
            else:
                print(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è {file}")
    else:
        print("\n‚úÖ –í–°–ï –§–ê–ô–õ–´ –í –ü–û–†–Ø–î–ö–ï!")

if __name__ == "__main__":
    main()
