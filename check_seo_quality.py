#!/usr/bin/env python
"""
SEO QUALITY METRICS CHECKER
===========================
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ SEO —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Google
"""

import os
import sys
import django
from pathlib import Path
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
PROJECT_ROOT = Path(r'E:\pravoslavie_portal')
sys.path.append(str(PROJECT_ROOT))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

try:
    django.setup()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django: {e}")
    sys.exit(1)

class SEOQualityChecker:
    def __init__(self):
        self.issues = []
        self.recommendations = []
        
    def check_title_quality(self, title, page_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ title —Ç–µ–≥–æ–≤"""
        issues = []
        recommendations = []
        
        if not title:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title")
            return issues, recommendations
            
        length = len(title)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã
        if length < 30:
            issues.append(f"Title —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({length} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 30-60)")
        elif length > 60:
            issues.append(f"Title —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({length} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 30-60)")
        else:
            recommendations.append(f"Title –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã ({length} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if not re.search(r'–ø—Ä–∞–≤–æ—Å–ª–∞–≤|–¥—É—Ö–æ–≤|–¥–æ–±—Ä|–∏—Å—Ç–æ—Ä|—Å–∫–∞–∑–∫', title.lower()):
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π, –¥—É—Ö–æ–≤–Ω—ã–π, –¥–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if title.count('|') > 1:
            issues.append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≤ title")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–µ–Ω–¥–∞
        if '–¥–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏' not in title.lower():
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ '–î–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏'")
            
        return issues, recommendations
    
    def check_description_quality(self, description, page_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ meta description"""
        issues = []
        recommendations = []
        
        if not description:
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç meta description")
            return issues, recommendations
            
        length = len(description)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã
        if length < 120:
            issues.append(f"Description —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({length} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 120-160)")
        elif length > 160:
            issues.append(f"Description —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({length} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 120-160)")
        else:
            recommendations.append(f"Description –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã ({length} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if not re.search(r'–ø—Ä–∞–≤–æ—Å–ª–∞–≤|–¥—É—Ö–æ–≤|–¥–æ–±—Ä|–∏—Å—Ç–æ—Ä|—Å–∫–∞–∑–∫|–∫–Ω–∏–≥|—Ä–∞—Å—Å–∫–∞–∑', description.lower()):
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        action_words = ['—á–∏—Ç–∞–π—Ç–µ', '—Å–º–æ—Ç—Ä–∏—Ç–µ', '—Å–ª—É—à–∞–π—Ç–µ', '—Å–∫–∞—á–∏–≤–∞–π—Ç–µ', '–ø–æ–∫—É–ø–∞–π—Ç–µ', '–∏–∑—É—á–∞–π—Ç–µ']
        if not any(word in description.lower() for word in action_words):
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (—á–∏—Ç–∞–π—Ç–µ, —Å–º–æ—Ç—Ä–∏—Ç–µ, —Å–∫–∞—á–∏–≤–∞–π—Ç–µ)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å title
        if description == page_name:
            issues.append("Description –¥—É–±–ª–∏—Ä—É–µ—Ç title")
            
        return issues, recommendations
    
    def check_keywords_quality(self, keywords, page_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ keywords"""
        issues = []
        recommendations = []
        
        if not keywords:
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ meta keywords –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return issues, recommendations
        
        keywords_list = [k.strip() for k in keywords.split(',')]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if len(keywords_list) > 10:
            issues.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ keywords ({len(keywords_list)}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10)")
        elif len(keywords_list) < 3:
            recommendations.append(f"–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ keywords (—Ç–µ–∫—É—â–µ–µ: {len(keywords_list)}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        orthodox_keywords = ['–ø—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ', '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å', '–≤–µ—Ä–∞', '—Ü–µ—Ä–∫–æ–≤—å', '—Å–≤—è—Ç—ã–µ', '–º–æ–ª–∏—Ç–≤–∞']
        content_keywords = ['–∫–Ω–∏–≥–∏', '—Ä–∞—Å—Å–∫–∞–∑—ã', '—Å–∫–∞–∑–∫–∏', '–∞—É–¥–∏–æ', '–∏—Å—Ç–æ—Ä–∏–∏', '—á—Ç–µ–Ω–∏–µ']
        
        has_orthodox = any(kw in keywords.lower() for kw in orthodox_keywords)
        has_content = any(kw in keywords.lower() for kw in content_keywords)
        
        if not has_orthodox:
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –ø—Ä–∞–≤–æ—Å–ª–∞–≤–∏–µ, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –≤–µ—Ä–∞")
        if not has_content:
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –∫–Ω–∏–≥–∏, —Ä–∞—Å—Å–∫–∞–∑—ã, –∞—É–¥–∏–æ")
            
        return issues, recommendations
    
    def check_page_meta_quality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        from core.seo import page_meta
        
        pages_to_check = {
            'home': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            'about': '–û –ø—Ä–æ–µ–∫—Ç–µ', 
            'contact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
            'books_list': '–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥',
            'stories_list': '–í–∏–¥–µ–æ-—Ä–∞—Å—Å–∫–∞–∑—ã',
            'shop': '–ú–∞–≥–∞–∑–∏–Ω',
            'fairy_tales': '–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏'
        }
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤...")
        print("-" * 60)
        
        total_issues = 0
        total_recommendations = 0
        
        for page_key, page_name in pages_to_check.items():
            try:
                meta = page_meta(page_key)
                
                print(f"\nüìÑ {page_name} ({page_key}):")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ title
                title_issues, title_recs = self.check_title_quality(meta.get('title', ''), page_name)
                if title_issues:
                    for issue in title_issues:
                        print(f"   ‚ùå Title: {issue}")
                        total_issues += 1
                else:
                    print(f"   ‚úÖ Title: '{meta.get('title', '')[:50]}...'")
                
                for rec in title_recs:
                    print(f"   üí° Title: {rec}")
                    total_recommendations += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ description
                desc_issues, desc_recs = self.check_description_quality(meta.get('description', ''), page_name)
                if desc_issues:
                    for issue in desc_issues:
                        print(f"   ‚ùå Description: {issue}")
                        total_issues += 1
                else:
                    print(f"   ‚úÖ Description: '{meta.get('description', '')[:50]}...'")
                
                for rec in desc_recs:
                    print(f"   üí° Description: {rec}")
                    total_recommendations += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ keywords
                kw_issues, kw_recs = self.check_keywords_quality(meta.get('keywords', ''), page_name)
                if kw_issues:
                    for issue in kw_issues:
                        print(f"   ‚ùå Keywords: {issue}")
                        total_issues += 1
                elif meta.get('keywords'):
                    print(f"   ‚úÖ Keywords: {len(meta.get('keywords', '').split(','))} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
                
                for rec in kw_recs:
                    print(f"   üí° Keywords: {rec}")
                    total_recommendations += 1
                    
            except Exception as e:
                print(f"   üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {page_key}: {e}")
                total_issues += 1
        
        return total_issues, total_recommendations
    
    def check_schema_org_quality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Schema.org –¥–∞–Ω–Ω—ã—Ö"""
        from core.seo.schema_org import get_schema_data
        import json
        
        print("\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Schema.org...")
        print("-" * 60)
        
        schema_checks = [
            ('organization', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'),
            ('website', '–í–µ–±-—Å–∞–π—Ç'),
        ]
        
        issues = 0
        recommendations = 0
        
        for schema_type, name in schema_checks:
            try:
                schema_json = get_schema_data(schema_type)
                if not schema_json:
                    print(f"   ‚ùå {name}: —Å—Ö–µ–º–∞ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è")
                    issues += 1
                    continue
                
                schema_data = json.loads(schema_json)
                
                print(f"\nüîç {name} Schema:")
                
                # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                required_fields = ['@context', '@type', 'name', 'description', 'url']
                missing_fields = [field for field in required_fields if field not in schema_data]
                
                if missing_fields:
                    print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
                    issues += len(missing_fields)
                else:
                    print(f"   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
                # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if schema_data.get('description') and len(schema_data['description']) < 50:
                    print(f"   üí° –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ ({len(schema_data['description'])} —Å–∏–º–≤–æ–ª–æ–≤)")
                    recommendations += 1
                
                if schema_type == 'organization':
                    org_recommendations = []
                    if 'logo' not in schema_data:
                        org_recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
                    if 'contactPoint' not in schema_data:
                        org_recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    if 'sameAs' not in schema_data:
                        org_recommendations.append("–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")
                    
                    for rec in org_recommendations:
                        print(f"   üí° {rec}")
                        recommendations += 1
                
                elif schema_type == 'website':
                    if 'potentialAction' not in schema_data:
                        print(f"   üí° –î–æ–±–∞–≤—å—Ç–µ SearchAction –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∞–π—Ç—É")
                        recommendations += 1
                        
            except Exception as e:
                print(f"   üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {name}: {e}")
                issues += 1
        
        return issues, recommendations
    
    def check_seo_technical_quality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ SEO"""
        print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ SEO...")
        print("-" * 60)
        
        issues = 0
        recommendations = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
        from django.conf import settings
        
        print("\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django:")
        
        # ALLOWED_HOSTS
        if hasattr(settings, 'ALLOWED_HOSTS') and settings.ALLOWED_HOSTS:
            if 'localhost' in settings.ALLOWED_HOSTS and len(settings.ALLOWED_HOSTS) == 1:
                print("   üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ ALLOWED_HOSTS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
                recommendations += 1
            else:
                print("   ‚úÖ ALLOWED_HOSTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("   ‚ùå ALLOWED_HOSTS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            issues += 1
        
        # SECURE_SSL_REDIRECT
        if not getattr(settings, 'SECURE_SSL_REDIRECT', False):
            print("   üí° –í–∫–ª—é—á–∏—Ç–µ SECURE_SSL_REDIRECT –¥–ª—è HTTPS")
            recommendations += 1
        else:
            print("   ‚úÖ SECURE_SSL_REDIRECT –≤–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ sitemap
        print("\nüó∫Ô∏è  Sitemap:")
        try:
            from core.seo.sitemaps import sitemaps
            if sitemaps:
                print(f"   ‚úÖ Sitemap –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {len(sitemaps)} —Ä–∞–∑–¥–µ–ª–∞–º–∏")
            else:
                print("   ‚ùå Sitemap –ø—É—Å—Ç")
                issues += 1
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ sitemap: {e}")
            issues += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ robots.txt
        print("\nü§ñ Robots.txt:")
        try:
            from core.views.seo_views import robots_txt
            print("   ‚úÖ robots.txt view –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ robots.txt: {e}")
            issues += 1
        
        return issues, recommendations
    
    def generate_quality_report(self, meta_issues, meta_recs, schema_issues, schema_recs, tech_issues, tech_recs):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É"""
        print("\n" + "=" * 80)
        print("üìä –û–¢–ß–ï–¢ –ü–û –ö–ê–ß–ï–°–¢–í–£ SEO")
        print("=" * 80)
        
        total_issues = meta_issues + schema_issues + tech_issues
        total_recommendations = meta_recs + schema_recs + tech_recs
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {total_issues}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {total_recommendations}")
        
        print(f"\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø:")
        print(f"   –ú–µ—Ç–∞-—Ç–µ–≥–∏ - –ø—Ä–æ–±–ª–µ–º—ã: {meta_issues}, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {meta_recs}")
        print(f"   Schema.org - –ø—Ä–æ–±–ª–µ–º—ã: {schema_issues}, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {schema_recs}")
        print(f"   –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ - –ø—Ä–æ–±–ª–µ–º—ã: {tech_issues}, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {tech_recs}")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if total_issues == 0:
            if total_recommendations <= 5:
                grade = "üèÜ –û–¢–õ–ò–ß–ù–û"
                color = "–ó–µ–ª–µ–Ω—ã–π"
            else:
                grade = "‚úÖ –•–û–†–û–®–û"
                color = "–°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π"
        elif total_issues <= 3:
            grade = "‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            color = "–ñ–µ–ª—Ç—ã–π"
        else:
            grade = "‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"
            color = "–ö—Ä–∞—Å–Ω—ã–π"
        
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê SEO: {grade}")
        
        print(f"\nüí° –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        if total_issues > 0:
            print(f"   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ {total_issues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        if total_recommendations > 10:
            print(f"   2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ {total_recommendations}")
        if total_issues == 0 and total_recommendations <= 5:
            print(f"   üéâ SEO –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å.")
        else:
            print(f"   3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ audit –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä SEO QUALITY METRICS CHECKER")
    print("üéØ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª '–î–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏'")
    print("=" * 80)
    
    checker = SEOQualityChecker()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
    meta_issues, meta_recs = checker.check_page_meta_quality()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Schema.org
    schema_issues, schema_recs = checker.check_schema_org_quality()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
    tech_issues, tech_recs = checker.check_seo_technical_quality()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    checker.generate_quality_report(meta_issues, meta_recs, schema_issues, schema_recs, tech_issues, tech_recs)

if __name__ == '__main__':
    main()
