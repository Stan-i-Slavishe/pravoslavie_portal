#!/usr/bin/env python
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∏ –º–æ–¥–µ–ª–∏ FastingPeriod
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

def check_fasting_period_table():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã FastingPeriod"""
    try:
        from pwa.models import FastingPeriod
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        count = FastingPeriod.objects.count()
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ FastingPeriod —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ó–∞–ø–∏—Å–µ–π: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç
        petrov_fast = FastingPeriod.objects.filter(name='peter_paul_fast').first()
        if petrov_fast:
            print(f"‚úÖ –ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: {petrov_fast.title}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {petrov_fast.priority}")
            print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {petrov_fast.is_active}")
            print(f"   Easter offset: {petrov_fast.easter_start_offset}")
            print(f"   End date: {petrov_fast.end_month}/{petrov_fast.end_day}")
        else:
            print("‚ùå –ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        print(f"\nüìã –í—Å–µ –ø–æ—Å—Ç—ã –≤ –±–∞–∑–µ:")
        for period in FastingPeriod.objects.all():
            print(f"   - {period.name}: {period.title} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {period.priority})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ FastingPeriod: {e}")
        return False

def check_migrations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        from django.core.management import execute_from_command_line
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
        execute_from_command_line(['manage.py', 'showmigrations', 'pwa'])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")

def test_june_2026():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—é–Ω—å 2026"""
    try:
        from pwa.models import DailyOrthodoxInfo, OrthodoxEvent
        from datetime import date
        
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—é–Ω—è 2026:")
        
        test_dates = [
            date(2026, 6, 1),   # –¢—Ä–æ–∏—Ü–∫–∞—è —Å–µ–¥–º–∏—Ü–∞
            date(2026, 6, 8),   # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç
            date(2026, 6, 15),  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç
        ]
        
        for test_date in test_dates:
            daily_info = DailyOrthodoxInfo.get_info_for_date(test_date)
            active_periods = DailyOrthodoxInfo.get_active_fasting_periods(test_date)
            
            print(f"   {test_date.strftime('%d.%m')}: {daily_info.get_fasting_type_display()}")
            print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {daily_info.fasting_description}")
            print(f"      –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã: {[p.title for p in active_periods]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–¢–†–û–í–ê –ü–û–°–¢–ê")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    check_migrations()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É FastingPeriod
    table_exists = check_fasting_period_table()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—é–Ω—å 2026
    if table_exists:
        test_june_2026()
    
    print("=" * 50)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("–ï—Å–ª–∏ –ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç –ù–ï –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("1. python manage.py makemigrations pwa")
    print("2. python manage.py migrate") 
    print("3. python add_petrov_fast.py")
    print("4. python manage.py runserver")

if __name__ == "__main__":
    main()
