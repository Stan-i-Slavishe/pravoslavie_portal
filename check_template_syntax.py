#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
"""
import os
import re

def check_template_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Django —à–∞–±–ª–æ–Ω–∞"""
    errors = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–Ω–æ—Å—Ç—å –±–ª–æ–∫–æ–≤
        block_stack = []
        for i, line in enumerate(lines, 1):
            # –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –±–ª–æ–∫–∏
            block_matches = re.findall(r'{%\s*block\s+(\w+)', line)
            for block_name in block_matches:
                block_stack.append((block_name, i))
            
            # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –±–ª–æ–∫–∏
            endblock_matches = re.findall(r'{%\s*endblock\s*(\w+)?', line)
            for endblock_match in endblock_matches:
                if not block_stack:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: endblock –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ block")
                else:
                    block_name, block_line = block_stack.pop()
                    if endblock_match and endblock_match != block_name:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: endblock {endblock_match} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç block {block_name} (—Å—Ç—Ä–æ–∫–∞ {block_line})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏
        for block_name, block_line in block_stack:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {block_line}: block {block_name} –Ω–µ –∑–∞–∫—Ä—ã—Ç")
            
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    return errors

def scan_templates():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    template_dirs = [
        'templates',
        'stories/templates',
        'books/templates', 
        'fairy_tales/templates',
        'shop/templates',
        'accounts/templates',
        'core/templates'
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Django —à–∞–±–ª–æ–Ω–æ–≤...")
    print("=" * 50)
    
    all_good = True
    
    for template_dir in template_dirs:
        if os.path.exists(template_dir):
            for root, dirs, files in os.walk(template_dir):
                for file in files:
                    if file.endswith('.html'):
                        file_path = os.path.join(root, file)
                        errors = check_template_syntax(file_path)
                        
                        if errors:
                            all_good = False
                            print(f"‚ùå {file_path}:")
                            for error in errors:
                                print(f"   {error}")
                            print()
                        else:
                            print(f"‚úÖ {file_path}")
    
    if all_good:
        print("\nüéâ –í—Å–µ —à–∞–±–ª–æ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        print("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

if __name__ == "__main__":
    scan_templates()
