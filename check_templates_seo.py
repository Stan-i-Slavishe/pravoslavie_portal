#!/usr/bin/env python
"""
SEO TEMPLATES CHECKER
====================
–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ SEO —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
import django
from pathlib import Path
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
PROJECT_ROOT = Path(r'E:\pravoslavie_portal')
sys.path.append(str(PROJECT_ROOT))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

try:
    django.setup()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django: {e}")
    sys.exit(1)

class TemplatesSEOChecker:
    def __init__(self):
        self.templates_dir = PROJECT_ROOT / 'templates'
        self.issues = []
        self.checked_templates = 0
        
    def check_template_file(self, template_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        try:
            with open(template_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            relative_path = template_path.relative_to(self.templates_dir)
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            if template_path.name == 'base.html':
                if '{% block title %}' not in content:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫ title")
                if '{% block meta_tags %}' not in content:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫ meta_tags")
                if '{% block schema_ld %}' not in content:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫ schema_ld")
                if '<meta name="viewport"' not in content:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç meta viewport")
                if 'canonical' not in content.lower():
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç canonical URL")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            elif '_detail.html' in template_path.name:
                if '{% load seo_tags %}' not in content:
                    issues.append("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã seo_tags")
                if '{% render_meta_tags' not in content and '{% block meta_tags %}' not in content:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–∞-—Ç–µ–≥–∏")
                if '{% schema_ld' not in content and '{% block schema_ld %}' not in content:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Schema.org")
                if 'og:' not in content and '{% render_meta_tags' not in content:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç OpenGraph —Ç–µ–≥–∏")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            elif '_list.html' in template_path.name:
                if '{% load seo_tags %}' not in content:
                    issues.append("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã seo_tags")
                if 'title' not in content.lower():
                    issues.append("–í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title")
            
            if issues:
                self.issues.append({
                    'template': str(relative_path),
                    'issues': issues
                })
                print(f"   ‚ö†Ô∏è  {relative_path}: {len(issues)} –ø—Ä–æ–±–ª–µ–º")
                for issue in issues:
                    print(f"      ‚îî‚îÄ {issue}")
            else:
                print(f"   ‚úÖ {relative_path}")
                
            self.checked_templates += 1
            
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {template_path}: {e}")
    
    def check_all_templates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SEO –≤ —à–∞–±–ª–æ–Ω–∞—Ö...")
        print("-" * 50)
        
        if not self.templates_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.templates_dir}")
            return False
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ HTML —Ñ–∞–π–ª—ã
        html_files = list(self.templates_dir.rglob('*.html'))
        
        if not html_files:
            print("‚ùå HTML —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(html_files)} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n")
        
        for template_file in html_files:
            self.check_template_file(template_file)
        
        return True
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""
        print("\n" + "=" * 80)
        print("üìä –û–¢–ß–ï–¢ –ü–û SEO –í –®–ê–ë–õ–û–ù–ê–•")
        print("=" * 80)
        
        if not self.issues:
            print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç SEO —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")
        else:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –≤ {len(self.issues)} —à–∞–±–ª–æ–Ω–∞—Ö –∏–∑ {self.checked_templates}:\n")
            
            for issue_data in self.issues:
                print(f"üìÑ {issue_data['template']}:")
                for issue in issue_data['issues']:
                    print(f"   ‚îî‚îÄ {issue}")
                print()
        
        success_rate = ((self.checked_templates - len(self.issues)) / self.checked_templates) * 100 if self.checked_templates > 0 else 0
        
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –®–ê–ë–õ–û–ù–û–í:")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.checked_templates}")
        print(f"   –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º: {self.checked_templates - len(self.issues)}")
        print(f"   –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {len(self.issues)}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç SEO TEMPLATES CHECKER")
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ SEO —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
    print("=" * 50)
    
    checker = TemplatesSEOChecker()
    
    if checker.check_all_templates():
        checker.generate_report()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —à–∞–±–ª–æ–Ω—ã")

if __name__ == '__main__':
    main()
