#!/usr/bin/env python3
"""
üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ .env —Ñ–∞–π–ª–æ–≤
–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ 3 –Ω—É–∂–Ω—ã—Ö
"""

import os
import shutil
from datetime import datetime

def cleanup_env_files():
    print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É .env —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º backup –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    backup_dir = f"backups/deleted_env_files_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: {backup_dir}")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_remove = [
        '.env',
        '.env.lightweight', 
        '.env.postgres_local',
        '.env.push_test',
        '.env.temp'
    ]
    
    removed_count = 0
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã (—Å backup'–æ–º)
    for file_name in files_to_remove:
        if os.path.exists(file_name):
            # –°–æ–∑–¥–∞–µ–º backup –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            shutil.copy2(file_name, os.path.join(backup_dir, file_name))
            os.remove(file_name)
            print(f"‚ùå –£–¥–∞–ª–µ–Ω: {file_name}")
            removed_count += 1
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {file_name}")
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π .env.local –Ω–∞ –Ω–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π
    if os.path.exists('.env.local.new'):
        if os.path.exists('.env.local'):
            shutil.copy2('.env.local', os.path.join(backup_dir, '.env.local.old'))
        shutil.move('.env.local.new', '.env.local')
        print("‚úÖ .env.local –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π settings_local.py
    if os.path.exists('config/settings_local_new.py'):
        if os.path.exists('config/settings_local.py'):
            shutil.copy2('config/settings_local.py', os.path.join(backup_dir, 'settings_local.py.old'))
        shutil.move('config/settings_local_new.py', 'config/settings_local.py')
        print("‚úÖ config/settings_local.py –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ß–ò–°–¢–ö–ò:")
    env_files = [f for f in os.listdir('.') if f.startswith('.env')]
    for env_file in sorted(env_files):
        if env_file in ['.env.local', '.env.staging', '.env.production']:
            print(f"‚úÖ {env_file} - –û–°–¢–ê–õ–°–Ø")
        else:
            print(f"‚ùì {env_file} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed_count}")
    print(f"   Backup —Å–æ–∑–¥–∞–Ω –≤: {backup_dir}")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å .env —Ñ–∞–π–ª–æ–≤: {len([f for f in env_files if f in ['.env.local', '.env.staging', '.env.production']])}")
    
    return backup_dir

def update_gitignore():
    """–û–±–Ω–æ–≤–ª—è–µ–º .gitignore –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîí –û–±–Ω–æ–≤–ª—è–µ–º .gitignore...")
    
    gitignore_content = """
# === –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –§–ê–ô–õ–´ ===
.env.local
.env.staging
.env.production
.env.*

# === –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
db.sqlite3
*.db

# === –õ–û–ì–ò ===
logs/
*.log

# === PYTHON ===
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.venv/

# === DJANGO ===
staticfiles/
media/uploads/
local_settings.py

# === IDE ===
.vscode/
.idea/
*.swp
*.swo

# === –°–ò–°–¢–ï–ú–ê ===
.DS_Store
Thumbs.db
"""
    
    with open('.gitignore', 'w', encoding='utf-8') as f:
        f.write(gitignore_content.strip())
    
    print("‚úÖ .gitignore –æ–±–Ω–æ–≤–ª–µ–Ω")

def create_environment_docs():
    """–°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º"""
    print("\nüìö –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
    
    doc_content = """# üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏–π

## üéØ –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã

–ü—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç **3 —á–µ—Ç–∫–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è**:

### üîß `.env.local` - –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
- DEBUG=True
- –ü–∏—Å—å–º–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
- –¢–µ—Å—Ç–æ–≤—ã–µ API –∫–ª—é—á–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ PostgreSQL

### üß™ `.env.staging` - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- PostgreSQL (–æ—Ç–¥–µ–ª—å–Ω–∞—è –±–∞–∑–∞!)
- DEBUG=False
- –ü–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –¢–µ—Å—Ç–æ–≤—ã–µ API –∫–ª—é—á–∏
- –î–æ–º–µ–Ω: staging.dobrist.com

### üöÄ `.env.production` - –ü—Ä–æ–¥–∞–∫—à–Ω
- PostgreSQL –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
- DEBUG=False
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –†–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏
- –î–æ–º–µ–Ω: dobrist.com

## üîÑ –ö–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏

### Windows:
```powershell
# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
$env:DJANGO_ENV = "local"

# Staging —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
$env:DJANGO_ENV = "staging"

# –ü—Ä–æ–¥–∞–∫—à–Ω
$env:DJANGO_ENV = "production"
```

### Linux/Mac:
```bash
# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
export DJANGO_ENV=local

# Staging —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
export DJANGO_ENV=staging

# –ü—Ä–æ–¥–∞–∫—à–Ω
export DJANGO_ENV=production
```

## ‚öôÔ∏è –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env.local

### SQLite (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):
```env
USE_SQLITE=True
```

### PostgreSQL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```env
USE_SQLITE=False
DB_NAME=pravoslavie_portal_dev
DB_USER=postgres
DB_PASSWORD=your_password
```

## üö® –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

1. **–ù–ò–ö–û–ì–î–ê** –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ .env —Ñ–∞–π–ª—ã –≤ Git!
2. **–í–°–ï–ì–î–ê** —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ staging –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º
3. **–ò–°–ü–û–õ–¨–ó–£–ô–¢–ï** —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
4. **–°–û–ó–î–ê–í–ê–ô–¢–ï** backup –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

## üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
python manage.py check

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
python manage.py check --deploy

# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
python manage.py shell -c "from django.conf import settings; print(f'Environment: {settings.ENVIRONMENT}')"
```
"""
    
    with open('ENVIRONMENTS.md', 'w', encoding='utf-8') as f:
        f.write(doc_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ENVIRONMENTS.md")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    print("üöÄ –ó–ê–ü–£–°–ö –û–ß–ò–°–¢–ö–ò .ENV –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('manage.py'):
        print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ Django –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    backup_dir = cleanup_env_files()
    update_gitignore()
    create_environment_docs()
    
    print("\n" + "=" * 50)
    print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print(f"üìÅ Backup —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {backup_dir}")
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: python manage.py check")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ staging —Å–µ—Ä–≤–µ—Ä")
    print("4. –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è staging - –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ OAuth")
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ENVIRONMENTS.md")

if __name__ == "__main__":
    main()
