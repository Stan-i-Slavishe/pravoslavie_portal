# üßπ –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫: core/management/commands/cleanup_logs.py

from django.core.management.base import BaseCommand
from django.conf import settings
import os
import glob
from datetime import datetime, timedelta

class Command(BaseCommand):
    help = '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--days',
            type=int,
            default=30,
            help='–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å –∏—Ö',
        )
    
    def handle(self, *args, **options):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        days = options['days']
        dry_run = options['dry_run']
        
        self.stdout.write(f'üßπ {"–ü—Ä–æ–≤–µ—Ä–∫–∞" if dry_run else "–û—á–∏—Å—Ç–∫–∞"} –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...')
        
        logs_dir = getattr(settings, 'LOGS_DIR', '/app/logs/')
        if not os.path.exists(logs_dir):
            self.stdout.write(self.style.WARNING(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {logs_dir}'))
            return
        
        cutoff_date = datetime.now() - timedelta(days=days)
        deleted_count = 0
        freed_space = 0
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ –ª–æ–≥ —Ñ–∞–π–ª—ã
        log_patterns = [
            '*.log',
            '*.log.*',
            '*.json',
            '*.out',
            '*.err'
        ]
        
        for pattern in log_patterns:
            for log_file in glob.glob(os.path.join(logs_dir, pattern)):
                try:
                    file_stat = os.stat(log_file)
                    file_date = datetime.fromtimestamp(file_stat.st_mtime)
                    
                    if file_date < cutoff_date:
                        file_size = file_stat.st_size
                        
                        if dry_run:
                            self.stdout.write(f'   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω: {log_file} ({file_size} –±–∞–π—Ç)')
                        else:
                            os.remove(log_file)
                            self.stdout.write(f'   –£–¥–∞–ª–µ–Ω: {log_file}')
                        
                        deleted_count += 1
                        freed_space += file_size
                        
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º {log_file}: {e}'))
        
        if deleted_count > 0:
            freed_mb = freed_space / (1024 * 1024)
            action = "–±—É–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ" if dry_run else "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ"
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚úÖ {"–ù–∞–π–¥–µ–Ω–æ" if dry_run else "–£–¥–∞–ª–µ–Ω–æ"} {deleted_count} —Ñ–∞–π–ª–æ–≤, '
                    f'{action} {freed_mb:.2f} –ú–ë'
                )
            )
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ –°—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'))
