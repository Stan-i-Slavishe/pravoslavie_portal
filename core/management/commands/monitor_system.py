# üìä –ö–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫: core/management/commands/monitor_system.py

import psutil
import logging
import json
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand
from django.core.cache import cache
from django.db import connection
from django.conf import settings
from django.core.mail import mail_admins

logger = logging.getLogger('monitoring')

class Command(BaseCommand):
    help = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--check-all',
            action='store_true',
            help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
        )
        parser.add_argument(
            '--send-alerts',
            action='store_true',
            help='–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        )
    
    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        self.stdout.write(self.style.SUCCESS('üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...'))
        
        if options['check_all'] or not any([options['check_all']]):
            self.check_system_resources(options)
            self.check_database_health(options)
            self.check_cache_health(options)
            self.check_disk_space(options)
            self.check_application_metrics(options)
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω'))
    
    def check_system_resources(self, options):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.stdout.write('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        self.log_metric('cpu_usage', cpu_percent, '%')
        
        if cpu_percent > 80:
            self.send_alert(f"üî• –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%", options)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        self.log_metric('memory_usage', memory.percent, '%')
        
        if memory.percent > 85:
            self.send_alert(f"üî• –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%", options)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        try:
            load_avg = psutil.getloadavg()
            self.log_metric('load_average', load_avg[0], '')
        except:
            load_avg = [0, 0, 0]  # Fallback –¥–ª—è Windows
        
        if options['verbose']:
            self.stdout.write(f"   CPU: {cpu_percent}%")
            self.stdout.write(f"   –ü–∞–º—è—Ç—å: {memory.percent}%")
            self.stdout.write(f"   –ó–∞–≥—Ä—É–∑–∫–∞: {load_avg[0]}")
    
    def check_database_health(self, options):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            start_time = datetime.now()
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                cursor.fetchone()
            db_response_time = (datetime.now() - start_time).total_seconds()
            
            self.log_metric('db_response_time', db_response_time, '—Å–µ–∫')
            
            if db_response_time > 1.0:
                self.send_alert(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –ë–î: {db_response_time:.2f}—Å", options)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT count(*) FROM pg_stat_activity 
                    WHERE state = 'active' AND pid <> pg_backend_pid()
                """)
                active_connections = cursor.fetchone()[0]
            
            self.log_metric('db_active_connections', active_connections, '')
            
            if active_connections > 80:
                self.send_alert(f"üìä –ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î: {active_connections}", options)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT pg_size_pretty(pg_database_size(current_database()))
                """)
                db_size = cursor.fetchone()[0]
            
            if options['verbose']:
                self.stdout.write(f"   –û—Ç–∫–ª–∏–∫ –ë–î: {db_response_time:.3f}—Å")
                self.stdout.write(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {active_connections}")
                self.stdout.write(f"   –†–∞–∑–º–µ—Ä –ë–î: {db_size}")
                
        except Exception as e:
            self.send_alert(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}", options)
            logger.error(f"Database health check failed: {e}")
    
    def check_cache_health(self, options):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–µ—à–∞"""
        self.stdout.write('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ Redis...')
        
        try:
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = 'health_check_test'
            test_value = datetime.now().isoformat()
            
            start_time = datetime.now()
            cache.set(test_key, test_value, 60)
            retrieved_value = cache.get(test_key)
            cache_response_time = (datetime.now() - start_time).total_seconds()
            
            self.log_metric('cache_response_time', cache_response_time, '—Å–µ–∫')
            
            if retrieved_value != test_value:
                self.send_alert("‚ùå –ö–µ—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", options)
            elif cache_response_time > 0.1:
                self.send_alert(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –∫–µ—à–∞: {cache_response_time:.3f}—Å", options)
            
            if options['verbose']:
                self.stdout.write(f"   –û—Ç–∫–ª–∏–∫ –∫–µ—à–∞: {cache_response_time:.3f}—Å")
                self.stdout.write(f"   –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏: ‚úÖ")
                
        except Exception as e:
            self.send_alert(f"‚ùå –û—à–∏–±–∫–∞ –∫–µ—à–∞: {str(e)}", options)
            logger.error(f"Cache health check failed: {e}")
    
    def check_disk_space(self, options):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        self.stdout.write('üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...')
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏—Å–∫–∞
            disk_usage = psutil.disk_usage('/')
            disk_percent = (disk_usage.used / disk_usage.total) * 100
            
            self.log_metric('disk_usage', disk_percent, '%')
            
            if disk_percent > 85:
                self.send_alert(f"üíæ –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent:.1f}%", options)
            elif disk_percent > 75:
                self.send_alert(f"‚ö†Ô∏è –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è: {disk_percent:.1f}%", options)
            
            if options['verbose']:
                self.stdout.write(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_percent:.1f}%")
                self.stdout.write(f"   –°–≤–æ–±–æ–¥–Ω–æ: {disk_usage.free // (1024**3)} –ì–ë")
                
        except Exception as e:
            logger.error(f"Disk space check failed: {e}")
    
    def check_application_metrics(self, options):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.stdout.write('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...')
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            current_hour = datetime.now().strftime('%Y%m%d_%H')
            error_count = cache.get(f"error_count_{current_hour}", 0)
            
            self.log_metric('hourly_errors', error_count, '')
            
            if error_count > 50:
                self.send_alert(f"üö® –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: {error_count}", options)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            recent_requests = cache.get('recent_requests', [])
            if recent_requests:
                avg_response_time = sum(req.get('response_time', 0) for req in recent_requests[-20:]) / min(20, len(recent_requests))
                self.log_metric('avg_response_time', avg_response_time, '—Å–µ–∫')
                
                if avg_response_time > 2.0:
                    self.send_alert(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {avg_response_time:.2f}—Å", options)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –∑–∞ —á–∞—Å
            hour_metrics = cache.get(f"metrics_{current_hour}", {})
            if hour_metrics:
                total_requests = hour_metrics.get('total_requests', 0)
                error_rate = (hour_metrics.get('error_count', 0) / max(total_requests, 1)) * 100
                
                self.log_metric('hourly_requests', total_requests, '')
                self.log_metric('error_rate', error_rate, '%')
                
                if error_rate > 5:
                    self.send_alert(f"üìä –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {error_rate:.1f}%", options)
            
            if options['verbose']:
                self.stdout.write(f"   –û—à–∏–±–∫–∏ –∑–∞ —á–∞—Å: {error_count}")
                self.stdout.write(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {len(recent_requests)}")
                if recent_requests:
                    avg_response_time = sum(req.get('response_time', 0) for req in recent_requests[-20:]) / min(20, len(recent_requests))
                    self.stdout.write(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}—Å")
                
        except Exception as e:
            logger.error(f"Application metrics check failed: {e}")
    
    def log_metric(self, metric_name, value, unit):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
        metric_data = {
            'timestamp': datetime.now().isoformat(),
            'metric': metric_name,
            'value': value,
            'unit': unit
        }
        logger.info(f"–ú–µ—Ç—Ä–∏–∫–∞: {json.dumps(metric_data, ensure_ascii=False)}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        cache_key = f"metric_{metric_name}_{datetime.now().strftime('%Y%m%d_%H%M')}"
        cache.set(cache_key, value, 86400)  # 24 —á–∞—Å–∞
    
    def send_alert(self, message, options):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        if not options.get('send_alerts'):
            return
        
        try:
            # Email –∞–ª–µ—Ä—Ç
            alerts_config = getattr(settings, 'ALERTS_CONFIG', {})
            if alerts_config.get('SEND_EMAIL_ALERTS'):
                mail_admins(
                    subject=f"[–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª] –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç",
                    message=f"{message}\n\n–í—Ä–µ–º—è: {datetime.now()}",
                    fail_silently=True
                )
            
            # Telegram –∞–ª–µ—Ä—Ç
            if alerts_config.get('SEND_TELEGRAM_ALERTS') and hasattr(settings, 'TELEGRAM_CONFIG'):
                self.send_telegram_alert(message)
            
            logger.warning(f"Alert sent: {message}")
            
        except Exception as e:
            logger.error(f"Failed to send alert: {e}")
    
    def send_telegram_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        try:
            import requests
            telegram_config = settings.TELEGRAM_CONFIG
            
            url = f"https://api.telegram.org/bot{telegram_config['BOT_TOKEN']}/sendMessage"
            data = {
                'chat_id': telegram_config['CHAT_ID'],
                'text': f"üîî <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç</b>\n\n{message}\n\n‚è∞ {datetime.now().strftime('%H:%M:%S')}",
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data, timeout=5)
            response.raise_for_status()
            
        except Exception as e:
            logger.error(f"Failed to send Telegram alert: {e}")
