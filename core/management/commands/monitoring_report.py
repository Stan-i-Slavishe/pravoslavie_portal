# üìä –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫: core/management/commands/monitoring_report.py

import json
import psutil
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand
from django.core.cache import cache

class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--hours',
            type=int,
            default=24,
            help='–ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)',
        )
        parser.add_argument(
            '--email',
            action='store_true',
            help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ email',
        )
        parser.add_argument(
            '--save',
            type=str,
            help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª',
        )
    
    def handle(self, *args, **options):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        hours = options['hours']
        
        self.stdout.write(f'üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤...')
        
        report_data = self.collect_metrics(hours)
        report_text = self.generate_report(report_data, hours)
        
        if options['save']:
            with open(options['save'], 'w', encoding='utf-8') as f:
                f.write(report_text)
            self.stdout.write(f'üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {options["save"]}')
        
        if options['email']:
            self.send_email_report(report_text, hours)
        
        # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        self.stdout.write('\n' + report_text)
    
    def collect_metrics(self, hours):
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        now = datetime.now()
        metrics = {
            'system': self.get_current_system_metrics(),
            'requests': [],
            'errors': [],
            'hourly_stats': {}
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        for i in range(hours):
            hour = now - timedelta(hours=i)
            hour_key = hour.strftime('%Y%m%d_%H')
            
            hour_metrics = cache.get(f"metrics_{hour_key}", {})
            if hour_metrics:
                metrics['hourly_stats'][hour_key] = hour_metrics
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        metrics['requests'] = cache.get('recent_requests', [])[-50:]
        
        return metrics
    
    def get_current_system_metrics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        return {
            'cpu_percent': psutil.cpu_percent(),
            'memory_percent': psutil.virtual_memory().percent,
            'disk_percent': (psutil.disk_usage('/').used / psutil.disk_usage('/').total) * 100,
            'load_average': psutil.getloadavg()[0] if hasattr(psutil, 'getloadavg') else 0,
        }
    
    def generate_report(self, data, hours):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = f"""
üîç –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–ê–í–û–°–õ–ê–í–ù–û–ì–û –ü–û–†–¢–ê–õ–ê
{'=' * 50}
üìÖ –ü–µ—Ä–∏–æ–¥: {datetime.now().strftime('%Y-%m-%d %H:%M')} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤)

üìä –¢–ï–ö–£–©–ò–ï –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
   CPU: {data['system']['cpu_percent']:.1f}%
   –ü–∞–º—è—Ç—å: {data['system']['memory_percent']:.1f}%
   –î–∏—Å–∫: {data['system']['disk_percent']:.1f}%
   –ó–∞–≥—Ä—É–∑–∫–∞: {data['system']['load_average']:.2f}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–ï–†–ò–û–î:
"""
        
        if data['hourly_stats']:
            total_requests = sum(stats.get('total_requests', 0) for stats in data['hourly_stats'].values())
            total_errors = sum(stats.get('error_count', 0) for stats in data['hourly_stats'].values())
            avg_response_times = [stats.get('avg_response_time', 0) for stats in data['hourly_stats'].values() if stats.get('avg_response_time')]
            
            avg_response_time = sum(avg_response_times) / len(avg_response_times) if avg_response_times else 0
            error_rate = (total_errors / max(total_requests, 1)) * 100
            
            report += f"""   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}
   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}
   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {error_rate:.2f}%
   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}—Å
"""
        else:
            report += "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
        
        if data['requests']:
            report += f"""
üïê –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–†–û–°–´ ({len(data['requests'])}):
"""
            for req in data['requests'][-10:]:
                status_emoji = "‚úÖ" if req.get('status_code', 0) < 400 else "‚ùå"
                report += f"   {status_emoji} {req.get('method', 'GET')} {req.get('path', 'N/A')} - {req.get('response_time', 0):.3f}—Å\n"
        
        report += f"""
üìù –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        return report
    
    def send_email_report(self, report_text, hours):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ email"""
        try:
            from django.core.mail import mail_admins
            
            mail_admins(
                subject=f"[–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª] –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞ {hours}—á",
                message=report_text,
                fail_silently=False
            )
            
            self.stdout.write(self.style.SUCCESS('üìß –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ email'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}'))
