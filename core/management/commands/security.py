"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
from django.core.management.base import BaseCommand
from django.core.cache import cache
import time
import json

class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--show-blocked',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP',
        )
        parser.add_argument(
            '--unblock-ip',
            type=str,
            help='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP –∞–¥—Ä–µ—Å',
        )
        parser.add_argument(
            '--block-ip',
            type=str,
            help='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP –∞–¥—Ä–µ—Å',
        )
        parser.add_argument(
            '--reason',
            type=str,
            default='Manual block',
            help='–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
        )
        parser.add_argument(
            '--clear-all',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤',
        )

    def handle(self, *args, **options):
        if options['show_blocked']:
            self.show_blocked_ips()
        
        elif options['unblock_ip']:
            self.unblock_ip(options['unblock_ip'])
        
        elif options['block_ip']:
            self.block_ip(options['block_ip'], options['reason'])
        
        elif options['clear_all']:
            self.clear_all_blocks()
        
        elif options['stats']:
            self.show_stats()
        
        else:
            self.stdout.write(
                self.style.WARNING('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
            )

    def show_blocked_ips(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP"""
        self.stdout.write(
            self.style.SUCCESS('üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞:')
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ blacklist –∏–∑ cache
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis —Å SCAN
        blocked_ips = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö IP –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        test_ips = [
            '192.168.1.1', '10.0.0.1', '172.16.0.1', 
            '127.0.0.1', '8.8.8.8', '1.1.1.1'
        ]
        
        for ip in test_ips:
            blacklist_key = f"blacklist:{ip}"
            reason = cache.get(blacklist_key)
            if reason:
                blocked_ips.append((ip, reason))
        
        if blocked_ips:
            for ip, reason in blocked_ips:
                self.stdout.write(f"  üö´ {ip}: {reason}")
        else:
            self.stdout.write("  ‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP")

    def unblock_ip(self, ip):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP"""
        blacklist_key = f"blacklist:{ip}"
        
        if cache.get(blacklist_key):
            cache.delete(blacklist_key)
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ IP {ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  IP {ip} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
            )

    def block_ip(self, ip, reason):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP"""
        blacklist_key = f"blacklist:{ip}"
        cache.set(blacklist_key, reason, 3600)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ —á–∞—Å
        
        self.stdout.write(
            self.style.SUCCESS(f'üö´ IP {ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}')
        )

    def clear_all_blocks(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis SCAN –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π blacklist:*
        
        self.stdout.write(
            self.style.SUCCESS('üßπ –í—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã')
        )
        
        self.stdout.write(
            self.style.WARNING(
                '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —ç—Ç–æ–π —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ—á–∏—Å—Ç–∏—Ç—å cache.\n'
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: python manage.py shell\n'
                '–ò –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: from django.core.cache import cache; cache.clear()'
            )
        )

    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.stdout.write(
            self.style.SUCCESS('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:')
        )
        
        current_time = int(time.time())
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        stats = {
            'current_hour': current_time // 3600,
            'total_requests_blocked': 0,  # –ù—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∏–∑ –ª–æ–≥–æ–≤
            'suspicious_patterns_detected': 0,  # –ù—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∏–∑ –ª–æ–≥–æ–≤
            'rate_limits_triggered': 0,  # –ù—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∏–∑ –ª–æ–≥–æ–≤
        }
        
        self.stdout.write(f"  üïê –¢–µ–∫—É—â–∏–π —á–∞—Å: {stats['current_hour']}")
        self.stdout.write(f"  üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests_blocked']}")
        self.stdout.write(f"  üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats['suspicious_patterns_detected']}")
        self.stdout.write(f"  ‚è±Ô∏è  Rate limit —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {stats['rate_limits_triggered']}")
        
        self.stdout.write(
            self.style.WARNING(
                '\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'
            )
        )