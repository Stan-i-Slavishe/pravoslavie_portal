"""
üõ°Ô∏è –£—Å–∏–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç DDoS, –∏–Ω—ä–µ–∫—Ü–∏–π –∏ –¥—Ä—É–≥–∏—Ö –∞—Ç–∞–∫
–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞
"""
import time
import logging
import re
import hashlib
import ipaddress
from collections import defaultdict
from django.http import HttpResponse, JsonResponse
from django.core.cache import cache
from django.conf import settings
from django.utils.deprecation import MiddlewareMixin
from django.contrib.auth.models import AnonymousUser

logger = logging.getLogger('security')

class AdvancedSecurityMiddleware(MiddlewareMixin):
    """
    üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç DDoS, –∏–Ω—ä–µ–∫—Ü–∏–π –∏ –¥—Ä—É–≥–∏—Ö –∞—Ç–∞–∫
    """
    
    def __init__(self, get_response):
        self.get_response = get_response
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Django settings –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        self.rate_limits = getattr(settings, 'SECURITY_RATE_LIMITS', {
            'requests_per_minute': 60,
            'requests_per_hour': 1000,
            'mobile_feedback_per_hour': 10,
            'login_attempts_per_hour': 10,
            'admin_attempts_per_hour': 5,
            'api_requests_per_minute': 30,
        })
        
        # üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        self.suspicious_patterns = [
            # Path traversal
            r'\.\./',
            r'\.\.\\',
            r'\/\.\.\/',
            r'\\\.\.\\',
            
            # XSS attempts
            r'<script[^>]*>',
            r'javascript:',
            r'vbscript:',
            r'onload\s*=',
            r'onerror\s*=',
            r'<iframe[^>]*>',
            
            # SQL injection
            r'union\s+select',
            r'drop\s+table',
            r'delete\s+from',
            r'insert\s+into',
            r'update\s+.*set',
            r'exec\s*\(',
            r'sp_executesql',
            r'xp_cmdshell',
            
            # Code injection
            r'eval\s*\(',
            r'system\s*\(',
            r'exec\s*\(',
            r'passthru\s*\(',
            r'shell_exec\s*\(',
            r'base64_decode\s*\(',
            
            # File inclusion
            r'include\s*\(',
            r'require\s*\(',
            r'file_get_contents\s*\(',
            r'fopen\s*\(',
            r'readfile\s*\(',
            
            # Admin/sensitive paths
            r'wp-admin',
            r'wp-login',
            r'phpmyadmin',
            r'admin\.php',
            r'config\.php',
            r'\.env',
            r'\.git',
            r'\.svn',
            r'backup\.sql',
            r'database\.sql',
            
            # File types that shouldn't be accessed
            r'\.php\d*$',
            r'\.asp$',
            r'\.aspx$',
            r'\.jsp$',
            r'\.cgi$',
            r'\.pl$',
            r'\.py$',
            r'\.sh$',
            r'\.bat$',
            
            # Suspicious parameters
            r'cmd\s*=',
            r'exec\s*=',
            r'command\s*=',
            r'shell\s*=',
            r'file\s*=.*\.\.',
        ]
        
        # ü§ñ Whitelist –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –±–æ—Ç–æ–≤
        self.bot_whitelist = [
            'googlebot',
            'bingbot',
            'yandexbot',
            'slurp',
            'facebookexternalhit',
            'twitterbot',
            'linkedinbot',
        ]
        
        super().__init__(get_response)
    
    def process_request(self, request):
        """üõ°Ô∏è –ì–ª–∞–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
        client_ip = self.get_client_ip(request)
        user_agent = request.META.get('HTTP_USER_AGENT', '').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist –¥–ª—è –±–æ—Ç–æ–≤
        if self.is_whitelisted_bot(user_agent):
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist
        if self.is_blacklisted(client_ip):
            return self.block_request(client_ip, "IP in blacklist")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if self.detect_suspicious_patterns(request):
            logger.warning(f"SUSPICIOUS PATTERNS DETECTED from {client_ip}: {request.path}")
            return self.block_request(client_ip, "Suspicious patterns detected", severity="high")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        if self.check_request_size(request):
            logger.warning(f"üö® Oversized request from {client_ip}: {len(request.body)} bytes")
            return self.block_request(client_ip, "Request too large")
        
        # Rate limiting
        if self.check_rate_limits(request, client_ip):
            logger.warning(f"‚ö†Ô∏è Rate limit exceeded for {client_ip}")
            return self.rate_limit_response(client_ip)
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ API
        if self.check_api_limits(request, client_ip):
            logger.warning(f"‚ö†Ô∏è API rate limit exceeded for {client_ip} on {request.path}")
            return self.rate_limit_response(client_ip, "API rate limit exceeded")
        
        return None
    
    def get_client_ip(self, request):
        """üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            'HTTP_CF_CONNECTING_IP',      # Cloudflare
            'HTTP_X_FORWARDED_FOR',       # Standard
            'HTTP_X_REAL_IP',             # Nginx
            'HTTP_X_FORWARDED',
            'HTTP_X_CLUSTER_CLIENT_IP',
            'HTTP_FORWARDED_FOR',
            'HTTP_FORWARDED',
            'REMOTE_ADDR'                 # Fallback
        ]
        
        for header in headers:
            ip = request.META.get(header)
            if ip:
                # X-Forwarded-For –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ IP
                ip = ip.split(',')[0].strip()
                if self.is_valid_ip(ip):
                    return ip
        
        return request.META.get('REMOTE_ADDR', 'unknown')
    
    def is_valid_ip(self, ip):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IP –∞–¥—Ä–µ—Å–∞"""
        try:
            ipaddress.ip_address(ip)
            return True
        except ValueError:
            return False
    
    def is_whitelisted_bot(self, user_agent):
        """ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        return any(bot in user_agent for bot in self.bot_whitelist)
    
    def is_blacklisted(self, client_ip):
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        blacklist_key = f"blacklist:{client_ip}"
        return cache.get(blacklist_key) is not None
    
    def detect_suspicious_patterns(self, request):
        """üîç –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        url = request.get_full_path()
        
        # POST –¥–∞–Ω–Ω—ã–µ
        post_data = ""
        if request.method == 'POST':
            try:
                post_data = request.body.decode('utf-8', errors='ignore')
            except:
                pass
        
        # GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        get_params = request.GET.urlencode()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        suspicious_headers = ['HTTP_USER_AGENT', 'HTTP_REFERER', 'HTTP_COOKIE']
        headers_data = ' '.join([
            request.META.get(header, '') for header in suspicious_headers
        ])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        combined_data = f"{url} {post_data} {get_params} {headers_data}".lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern in self.suspicious_patterns:
            if re.search(pattern, combined_data, re.IGNORECASE):
                logger.error(f"SUSPICIOUS PATTERN: {pattern} in data from {self.get_client_ip(request)}")
                return True
        
        return False
    
    def check_request_size(self, request):
        """üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        max_size = 10 * 1024 * 1024  # 10MB
        
        content_length = request.META.get('CONTENT_LENGTH')
        if content_length:
            try:
                if int(content_length) > max_size:
                    return True
            except ValueError:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä body
        if hasattr(request, 'body') and len(request.body) > max_size:
            return True
        
        return False
    
    def check_rate_limits(self, request, client_ip):
        """‚è±Ô∏è –û–±—â–∏–µ –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        current_time = int(time.time())
        
        # –ú–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        minute_key = f"rate:{client_ip}:{current_time // 60}"
        minute_count = cache.get(minute_key, 0)
        
        if minute_count >= self.rate_limits['requests_per_minute']:
            return True
        
        # –ß–∞—Å–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
        hour_key = f"rate_hour:{client_ip}:{current_time // 3600}"
        hour_count = cache.get(hour_key, 0)
        
        if hour_count >= self.rate_limits['requests_per_hour']:
            return True
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        cache.set(minute_key, minute_count + 1, 60)
        cache.set(hour_key, hour_count + 1, 3600)
        
        return False
    
    def check_api_limits(self, request, client_ip):
        """üîå –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ API –ª–∏–º–∏—Ç—ã"""
        current_time = int(time.time())
        
        # –ú–æ–±–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        if '/api/mobile-feedback/' in request.path:
            key = f"api_feedback:{client_ip}:{current_time // 3600}"
            count = cache.get(key, 0)
            
            if count >= self.rate_limits.get('mobile_feedback_per_hour', 10):
                return True
            
            cache.set(key, count + 1, 3600)
        
        # –§–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        if any(path in request.path for path in ['/accounts/login/', '/admin/login/']):
            key = f"login_attempts:{client_ip}:{current_time // 3600}"
            count = cache.get(key, 0)
            
            limit = self.rate_limits.get('admin_attempts_per_hour' if '/admin/' in request.path else 'login_attempts_per_hour', 10)
            
            if count >= limit:
                return True
            
            cache.set(key, count + 1, 3600)
        
        # API –∑–∞–ø—Ä–æ—Å—ã
        if request.path.startswith('/api/'):
            key = f"api_requests:{client_ip}:{current_time // 60}"
            count = cache.get(key, 0)
            
            if count >= self.rate_limits.get('api_requests_per_minute', 30):
                return True
            
            cache.set(key, count + 1, 60)
        
        return False
    
    def block_request(self, client_ip, reason, severity="medium"):
        """üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        block_times = {
            "low": 300,      # 5 –º–∏–Ω—É—Ç
            "medium": 3600,  # 1 —á–∞—Å
            "high": 86400,   # 24 —á–∞—Å–∞
            "critical": 604800  # 7 –¥–Ω–µ–π
        }
        
        block_time = block_times.get(severity, 3600)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ blacklist
        blacklist_key = f"blacklist:{client_ip}"
        cache.set(blacklist_key, {
            'reason': reason,
            'severity': severity,
            'blocked_at': time.time(),
            'blocked_until': time.time() + block_time
        }, block_time)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        logger.error(f"BLOCKED IP {client_ip}: {reason} (severity: {severity}, duration: {block_time}s)")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        return JsonResponse({
            'error': 'Access Denied',
            'message': '–í–∞—à IP –∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            'code': 'SECURITY_BLOCK',
            'blocked_until': time.time() + block_time,
            'contact': '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
        }, status=403)
    
    def rate_limit_response(self, client_ip, message="Rate limit exceeded"):
        """üö¶ –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤"""
        logger.warning(f"RATE LIMITED IP {client_ip}: {message}")
        
        return JsonResponse({
            'error': 'Too Many Requests',
            'message': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            'code': 'RATE_LIMIT',
            'retry_after': 60
        }, status=429)
    
    def process_response(self, request, response):
        """üîí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ security –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        
        # –ë–∞–∑–æ–≤—ã–µ security –∑–∞–≥–æ–ª–æ–≤–∫–∏
        security_headers = {
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': 'DENY',
            'X-XSS-Protection': '1; mode=block',
            'Referrer-Policy': 'strict-origin-when-cross-origin',
            'Permissions-Policy': 'geolocation=(), microphone=(), camera=()',
        }
        
        for header, value in security_headers.items():
            if not response.get(header):
                response[header] = value
        
        # Content Security Policy
        if not response.get('Content-Security-Policy'):
            csp_directives = [
                "default-src 'self'",
                "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com",
                "style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com",
                "img-src 'self' data: https:",
                "font-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com",
                "connect-src 'self'",
                "frame-ancestors 'none'",
                "base-uri 'self'",
                "form-action 'self'",
                "upgrade-insecure-requests"
            ]
            response['Content-Security-Policy'] = '; '.join(csp_directives)
        
        return response


class MonitoringMiddleware(MiddlewareMixin):
    """üìä Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def process_request(self, request):
        request.start_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ POST –∑–∞–ø—Ä–æ—Å—ã
        if request.method == 'POST':
            client_ip = self.get_client_ip(request)
            logger.info(f"POST –∑–∞–ø—Ä–æ—Å –æ—Ç {client_ip} –∫ {request.path}")
    
    def process_response(self, request, response):
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if hasattr(request, 'start_time'):
            duration = time.time() - request.start_time
            if duration > 2.0:  # –ó–∞–ø—Ä–æ—Å—ã –¥–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥
                client_ip = self.get_client_ip(request)
                logger.warning(f"SLOW REQUEST ({duration:.2f}s) –æ—Ç {client_ip} –∫ {request.path}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        if response.status_code >= 400:
            client_ip = self.get_client_ip(request)
            logger.error(f"ERROR {response.status_code} –æ—Ç {client_ip} –∫ {request.path}")
        
        return response
    
    def get_client_ip(self, request):
        """üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0].strip()
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip


class BlacklistMiddleware(MiddlewareMixin):
    """üö´ Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ IP"""
    
    def process_request(self, request):
        client_ip = self.get_client_ip(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ IP –≤ blacklist
        blacklist_key = f"blacklist:{client_ip}"
        blocked_reason = cache.get(blacklist_key)
        
        if blocked_reason:
            logger.warning(f"BLOCKED IP {client_ip} trying to access")
            
            return JsonResponse({
                'error': 'Access denied',
                'message': f'–í–∞—à IP –∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {blocked_reason.get("reason", "Unknown")}',
                'contact': '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
            }, status=403)
        
        return None
    
    def get_client_ip(self, request):
        """üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0].strip()
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
