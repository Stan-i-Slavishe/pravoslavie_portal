# üìä Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫: core/middleware/monitoring.py

import time
import logging
import traceback
import psutil
import json
from datetime import datetime
from django.conf import settings
from django.utils.deprecation import MiddlewareMixin
from django.core.cache import cache
from django.db import connection
from django.http import HttpResponse

logger = logging.getLogger('monitoring')

class PerformanceMonitoringMiddleware(MiddlewareMixin):
    """
    Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    def process_request(self, request):
        """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        request.start_time = time.time()
        request.start_queries = len(connection.queries)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        try:
            request.memory_start = psutil.virtual_memory().percent
        except:
            request.memory_start = 0
        
        return None
    
    def process_response(self, request, response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        if not hasattr(request, 'start_time'):
            return response
            
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_time = time.time() - request.start_time
        total_queries = len(connection.queries) - request.start_queries
        
        try:
            memory_end = psutil.virtual_memory().percent
            memory_used = memory_end - request.memory_start
        except:
            memory_used = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = {
            'user_id': request.user.id if request.user.is_authenticated else None,
            'user_email': request.user.email if request.user.is_authenticated else None,
            'is_authenticated': request.user.is_authenticated,
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        metrics = {
            'timestamp': datetime.now().isoformat(),
            'method': request.method,
            'path': request.path,
            'status_code': response.status_code,
            'response_time': round(total_time, 3),
            'db_queries': total_queries,
            'memory_usage': round(memory_used, 2),
            'user_agent': request.META.get('HTTP_USER_AGENT', ''),
            'remote_addr': self.get_client_ip(request),
            'user': user_info,
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä–æ–≥–æ–≤
        if total_time > getattr(settings, 'PERFORMANCE_MONITORING', {}).get('SLOW_QUERY_THRESHOLD', 1.0):
            logger.warning(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {json.dumps(metrics, ensure_ascii=False)}")
        else:
            logger.info(f"–ó–∞–ø—Ä–æ—Å: {json.dumps(metrics, ensure_ascii=False)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–µ—à –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        self.save_metrics_to_cache(metrics)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.check_performance_alerts(metrics)
        
        return response
    
    def process_exception(self, request, exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        if not hasattr(request, 'start_time'):
            return None
            
        total_time = time.time() - request.start_time
        
        error_data = {
            'timestamp': datetime.now().isoformat(),
            'method': request.method,
            'path': request.path,
            'response_time': round(total_time, 3),
            'exception_type': type(exception).__name__,
            'exception_message': str(exception),
            'traceback': traceback.format_exc(),
            'user_id': request.user.id if request.user.is_authenticated else None,
            'remote_addr': self.get_client_ip(request),
        }
        
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ: {json.dumps(error_data, ensure_ascii=False)}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        cache_key = f"error_count_{datetime.now().strftime('%Y%m%d_%H')}"
        cache.set(cache_key, cache.get(cache_key, 0) + 1, 3600)
        
        return None
    
    def get_client_ip(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
    
    def save_metrics_to_cache(self, metrics):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∫–µ—à –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
            cache_key = 'recent_requests'
            recent_requests = cache.get(cache_key, [])
            recent_requests.append(metrics)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100
            if len(recent_requests) > 100:
                recent_requests = recent_requests[-100:]
            
            cache.set(cache_key, recent_requests, 3600)  # 1 —á–∞—Å
            
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —á–∞—Å
            hour_key = f"metrics_{datetime.now().strftime('%Y%m%d_%H')}"
            hour_metrics = cache.get(hour_key, {
                'total_requests': 0,
                'avg_response_time': 0,
                'total_response_time': 0,
                'max_response_time': 0,
                'error_count': 0,
                'status_codes': {},
            })
            
            hour_metrics['total_requests'] += 1
            hour_metrics['total_response_time'] += metrics['response_time']
            hour_metrics['avg_response_time'] = hour_metrics['total_response_time'] / hour_metrics['total_requests']
            hour_metrics['max_response_time'] = max(hour_metrics['max_response_time'], metrics['response_time'])
            
            status_code = str(metrics['status_code'])
            hour_metrics['status_codes'][status_code] = hour_metrics['status_codes'].get(status_code, 0) + 1
            
            if metrics['status_code'] >= 400:
                hour_metrics['error_count'] += 1
            
            cache.set(hour_key, hour_metrics, 3600)  # 1 —á–∞—Å
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –∫–µ—à: {e}")
    
    def check_performance_alerts(self, metrics):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            alerts_config = getattr(settings, 'ALERTS_CONFIG', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            if metrics['response_time'] > alerts_config.get('RESPONSE_TIME_THRESHOLD', 2.0):
                self.send_alert(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {metrics['response_time']}s –Ω–∞ {metrics['path']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∑–∞ —á–∞—Å
            hour_key = f"error_count_{datetime.now().strftime('%Y%m%d_%H')}"
            error_count = cache.get(hour_key, 0)
            
            if error_count > alerts_config.get('ERROR_THRESHOLD', 10):
                alert_sent_key = f"alert_sent_{hour_key}"
                if not cache.get(alert_sent_key):
                    self.send_alert(f"üö® –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: {error_count} –∑–∞ —á–∞—Å")
                    cache.set(alert_sent_key, True, 3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def send_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            # Email –∞–ª–µ—Ä—Ç
            if getattr(settings, 'ALERTS_CONFIG', {}).get('SEND_EMAIL_ALERTS'):
                from django.core.mail import mail_admins
                mail_admins(
                    subject=f"[–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª] –ê–ª–µ—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    message=f"{message}\n\n–í—Ä–µ–º—è: {datetime.now()}",
                    fail_silently=True
                )
            
            # Telegram –∞–ª–µ—Ä—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if hasattr(settings, 'TELEGRAM_CONFIG'):
                self.send_telegram_alert(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def send_telegram_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        try:
            import requests
            telegram_config = settings.TELEGRAM_CONFIG
            
            url = f"https://api.telegram.org/bot{telegram_config['BOT_TOKEN']}/sendMessage"
            data = {
                'chat_id': telegram_config['CHAT_ID'],
                'text': f"üîî {message}",
                'parse_mode': 'HTML'
            }
            
            requests.post(url, data=data, timeout=5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∞–ª–µ—Ä—Ç–∞: {e}")


class SecurityMonitoringMiddleware(MiddlewareMixin):
    """
    Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    
    def process_request(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        client_ip = self.get_client_ip(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_patterns = [
            'wp-admin', 'wp-login', '.php', 'admin.php',
            'shell', 'cmd', 'eval', 'exec',
            '../', '..\\', 'etc/passwd'
        ]
        
        path_lower = request.path.lower()
        for pattern in suspicious_patterns:
            if pattern in path_lower:
                self.log_security_event(request, f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: {pattern}")
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
        self.check_request_frequency(request, client_ip)
        
        return None
    
    def get_client_ip(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
    
    def check_request_frequency(self, request, client_ip):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç DDoS)"""
        cache_key = f"requests_{client_ip}_{datetime.now().strftime('%Y%m%d_%H%M')}"
        request_count = cache.get(cache_key, 0)
        
        if request_count > 100:  # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            self.log_security_event(request, f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count}/–º–∏–Ω")
        
        cache.set(cache_key, request_count + 1, 60)  # TTL 1 –º–∏–Ω—É—Ç–∞
    
    def log_security_event(self, request, event_type):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_logger = logging.getLogger('django.security')
        
        event_data = {
            'timestamp': datetime.now().isoformat(),
            'event_type': event_type,
            'method': request.method,
            'path': request.path,
            'remote_addr': self.get_client_ip(request),
            'user_agent': request.META.get('HTTP_USER_AGENT', ''),
            'user_id': request.user.id if request.user.is_authenticated else None,
        }
        
        security_logger.warning(f"–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {json.dumps(event_data, ensure_ascii=False)}")


class HealthCheckMiddleware(MiddlewareMixin):
    """
    Middleware –¥–ª—è health check'–æ–≤
    """
    
    def process_request(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ health check –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if request.path == '/health/':
            return self.health_check()
        elif request.path == '/health/detailed/':
            return self.detailed_health_check()
        return None
    
    def health_check(self):
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            
            return HttpResponse("OK", content_type="text/plain", status=200)
        except:
            return HttpResponse("ERROR", content_type="text/plain", status=500)
    
    def detailed_health_check(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        health_data = {
            'status': 'OK',
            'timestamp': datetime.now().isoformat(),
            'checks': {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            health_data['checks']['database'] = 'OK'
        except Exception as e:
            health_data['checks']['database'] = f'ERROR: {str(e)}'
            health_data['status'] = 'ERROR'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
        try:
            cache.set('health_check', 'test', 60)
            if cache.get('health_check') == 'test':
                health_data['checks']['cache'] = 'OK'
            else:
                health_data['checks']['cache'] = 'ERROR: Cache read/write failed'
                health_data['status'] = 'WARNING'
        except Exception as e:
            health_data['checks']['cache'] = f'ERROR: {str(e)}'
            health_data['status'] = 'ERROR'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        try:
            disk_usage = psutil.disk_usage('/')
            disk_percent = (disk_usage.used / disk_usage.total) * 100
            if disk_percent < 80:
                health_data['checks']['disk_space'] = f'OK ({disk_percent:.1f}% used)'
            else:
                health_data['checks']['disk_space'] = f'WARNING ({disk_percent:.1f}% used)'
                health_data['status'] = 'WARNING'
        except Exception as e:
            health_data['checks']['disk_space'] = f'ERROR: {str(e)}'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        try:
            memory = psutil.virtual_memory()
            if memory.percent < 85:
                health_data['checks']['memory'] = f'OK ({memory.percent:.1f}% used)'
            else:
                health_data['checks']['memory'] = f'WARNING ({memory.percent:.1f}% used)'
                health_data['status'] = 'WARNING'
        except Exception as e:
            health_data['checks']['memory'] = f'ERROR: {str(e)}'
        
        status_code = 200 if health_data['status'] == 'OK' else 503
        
        return HttpResponse(
            json.dumps(health_data, ensure_ascii=False, indent=2),
            content_type="application/json",
            status=status_code
        )
