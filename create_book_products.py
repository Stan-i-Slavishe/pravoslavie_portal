#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–Ω—ã—Ö –∫–Ω–∏–≥
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
BASE_DIR = Path(__file__).parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

try:
    django.setup()
    
    from books.models import Book
    from shop.models import Product
    
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–Ω—ã—Ö –∫–Ω–∏–≥...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–Ω—ã–µ –∫–Ω–∏–≥–∏
    paid_books = Book.objects.filter(price__gt=0)
    
    created_count = 0
    updated_count = 0
    
    for book in paid_books:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä
        product, created = Product.objects.get_or_create(
            product_type='book',
            book_id=book.id,
            defaults={
                'title': book.title,
                'description': book.description,
                'price': book.price,
                'is_active': True,
                'is_digital': True,
                'image': book.cover_image if hasattr(book, 'cover_image') else None,
            }
        )
        
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product.title} - {product.price}‚ÇΩ")
            created_count += 1
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
            updated = False
            if product.title != book.title:
                product.title = book.title
                updated = True
            if product.description != book.description:
                product.description = book.description  
                updated = True
            if product.price != book.price:
                product.price = book.price
                updated = True
            if not product.is_active:
                product.is_active = True
                updated = True
                
            if updated:
                product.save()
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product.title} - {product.price}‚ÇΩ")
                updated_count += 1
            else:
                print(f"‚úì –¢–æ–≤–∞—Ä –∞–∫—Ç—É–∞–ª–µ–Ω: {product.title} - {product.price}‚ÇΩ")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {created_count}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_count}")
    print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∫–Ω–∏–≥: {Product.objects.filter(product_type='book').count()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    print(f"\nüõí –ê–ö–¢–ò–í–ù–´–ï –¢–û–í–ê–†–´ –í –ú–ê–ì–ê–ó–ò–ù–ï:")
    active_products = Product.objects.filter(is_active=True)
    
    for product in active_products:
        print(f"   üì¶ {product.title} ({product.get_product_type_display()}) - {product.price}‚ÇΩ")
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –í –º–∞–≥–∞–∑–∏–Ω–µ {active_products.count()} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
