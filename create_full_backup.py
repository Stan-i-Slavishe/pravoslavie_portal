#!/usr/bin/env python3
"""
üö® –ê–í–ê–†–ò–ô–ù–´–ô BACKUP –í–°–ï–• –†–ê–ë–û–ß–ò–• –ù–ê–°–¢–†–û–ï–ö –ü–†–û–î–ê–ö–®–ï–ù–ê
–í–µ—Ä—Å–∏—è –¥–ª—è Windows –∏ –ª—é–±—ã—Ö —Å–∏—Å—Ç–µ–º
"""

import os
import shutil
import datetime
import subprocess
import sys

def create_backup():
    print("üö® –°–æ–∑–¥–∞–µ–º –ü–û–õ–ù–´–ô backup —Ä–∞–±–æ—á–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backups/WORKING_PRODUCTION_BACKUP_{timestamp}"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è backup
    os.makedirs(backup_dir, exist_ok=True)
    print(f"üìÅ Backup –ø–∞–ø–∫–∞: {backup_dir}")
    
    # === –ö–û–ü–ò–†–£–ï–ú –í–°–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ï –§–ê–ô–õ–´ ===
    print("üîß –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    # –°–ø–∏—Å–æ–∫ .env —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    env_files = [
        ('.env', 'dot_env_current'),
        ('.env.production', '.env.production'),
        ('.env.local', '.env.local'),
        ('.env.lightweight', '.env.lightweight'),
        ('.env.postgres_local', '.env.postgres_local'),
        ('.env.push_test', '.env.push_test'),
        ('.env.temp', '.env.temp')
    ]
    
    for source, dest in env_files:
        try:
            if os.path.exists(source):
                shutil.copy2(source, os.path.join(backup_dir, dest))
                print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {source}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {source}: {e}")
    
    # Django settings
    try:
        if os.path.exists('config'):
            shutil.copytree('config', os.path.join(backup_dir, 'config_backup'))
            print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞ config/")
        else:
            print("‚ö†Ô∏è –ü–∞–ø–∫–∞ config/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è config/: {e}")
    
    # Requirements
    try:
        if os.path.exists('requirements.txt'):
            shutil.copy2('requirements.txt', backup_dir)
            print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω requirements.txt")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è requirements.txt: {e}")
    
    # === –ó–ê–ü–ò–°–´–í–ê–ï–ú –°–ò–°–¢–ï–ú–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ ===
    print("üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    system_info_path = os.path.join(backup_dir, 'system_info.txt')
    with open(system_info_path, 'w', encoding='utf-8') as f:
        f.write("=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n")
        f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {datetime.datetime.now()}\n")
        f.write(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {os.name}\n")
        f.write(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}\n")
        f.write(f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}\n\n")
        
        f.write("=== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===\n")
        for key in ['DJANGO_ENV', 'DEBUG', 'PATH']:
            value = os.environ.get(key, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
            f.write(f"{key}: {value}\n")
        f.write("\n")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python –ø–∞–∫–µ—Ç–∞—Ö
        try:
            result = subprocess.run([sys.executable, '-m', 'pip', 'list'], 
                                  capture_output=True, text=True, timeout=30)
            f.write("=== –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï PYTHON –ü–ê–ö–ï–¢–´ ===\n")
            f.write(result.stdout)
        except Exception as e:
            f.write(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {e}\n")
        
        # Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        try:
            result = subprocess.run(['git', 'branch'], capture_output=True, text=True, timeout=10)
            f.write(f"\n=== GIT –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n")
            f.write(f"–í–µ—Ç–∫–∏:\n{result.stdout}")
            
            result = subprocess.run(['git', 'log', '--oneline', '-5'], 
                                  capture_output=True, text=True, timeout=10)
            f.write(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:\n{result.stdout}")
        except Exception as e:
            f.write(f"Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}\n")
    
    # === –°–û–ó–î–ê–ï–ú –ò–ù–°–¢–†–£–ö–¶–ò–Æ –ü–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Æ ===
    restore_instructions = os.path.join(backup_dir, 'RESTORE_INSTRUCTIONS.md')
    with open(restore_instructions, 'w', encoding='utf-8') as f:
        f.write("""# üö® –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Æ –†–ê–ë–û–ß–ï–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò

## –ß–¢–û –ó–î–ï–°–¨ –ù–ê–•–û–î–ò–¢–°–Ø
–≠—Ç–æ—Ç backup —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï —Ä–∞–±–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è.

## –§–ê–ô–õ–´ –í BACKUP:
- `.env.production` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–ì–õ–ê–í–ù–´–ô –§–ê–ô–õ)
- `dot_env_current` - —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
- `config_backup/` - –≤—Å–µ —Ñ–∞–π–ª—ã Django –Ω–∞—Å—Ç—Ä–æ–µ–∫
- `requirements.txt` - —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ Python
- `system_info.txt` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ

## –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï:

### Windows (PowerShell):
```powershell
# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
Copy-Item "backups\\WORKING_PRODUCTION_BACKUP_*\\.env.production" ".env.production"
Copy-Item "backups\\WORKING_PRODUCTION_BACKUP_*\\config_backup\\*" "config\\" -Recurse -Force

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
$env:DJANGO_ENV = "production"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)
# Restart-Service YourServiceName
```

### Linux/Mac:
```bash
# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
cp backups/WORKING_PRODUCTION_BACKUP_*/.env.production .env.production
cp -r backups/WORKING_PRODUCTION_BACKUP_*/config_backup/* config/

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
export DJANGO_ENV=production

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
sudo systemctl restart gunicorn
sudo systemctl restart nginx
```

## ‚ö†Ô∏è –í–ê–ñ–ù–û:
- –ù–ï –£–î–ê–õ–Ø–ô–¢–ï —ç—Ç–æ—Ç backup!
- –ü–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–π backup
- –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ staging –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º

## –ö–û–ù–¢–†–û–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:
1. ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
2. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DJANGO_ENV=production
3. ‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
4. ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
5. ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
""")
    
    # === –°–û–ó–î–ê–ï–ú –ö–†–ê–¢–ö–£–Æ –°–ü–†–ê–í–ö–£ ===
    quick_ref_path = os.path.join(backup_dir, 'QUICK_REFERENCE.txt')
    with open(quick_ref_path, 'w', encoding='utf-8') as f:
        f.write("""üö® –ë–´–°–¢–†–ê–Ø –°–ü–†–ê–í–ö–ê - –ê–í–ê–†–ò–ô–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï

–ï–°–õ–ò –°–ê–ô–¢ –ù–ï –†–ê–ë–û–¢–ê–ï–¢:

Windows:
1. Copy-Item "—ç—Ç–æ—Ç_backup\\.env.production" ".env.production"
2. $env:DJANGO_ENV = "production"
3. python manage.py runserver (–¥–ª—è —Ç–µ—Å—Ç–∞)

Linux:
1. cp —ç—Ç–æ—Ç_backup/.env.production .env.production
2. export DJANGO_ENV=production
3. sudo systemctl restart gunicorn && sudo systemctl restart nginx

–ü–†–û–í–ï–†–ö–ê:
- python manage.py check
- python manage.py migrate --check
- –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞

–ü–û–ú–û–©–¨: –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π working backup –≤ –ø–∞–ø–∫–µ backups/
""")
    
    print("‚úÖ Backup —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {backup_dir}")
    print("")
    print("üîí –í–ê–ñ–ù–û: –≠—Ç–æ—Ç backup —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–±–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")
    print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é: {restore_instructions}")
    print("")
    print("üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö .env —Ñ–∞–π–ª–æ–≤")
    
    return backup_dir

if __name__ == "__main__":
    backup_path = create_backup()
    print(f"\nüéâ Backup –∑–∞–≤–µ—Ä—à–µ–Ω: {backup_path}")
