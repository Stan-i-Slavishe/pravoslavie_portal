#!/usr/bin/env python
"""
–°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è Django HTTPS
"""
import subprocess
import os
from pathlib import Path

def create_ssl_cert():
    """–°–æ–∑–¥–∞–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É ssl –µ—Å–ª–∏ –Ω–µ—Ç
        Path('ssl').mkdir(exist_ok=True)
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ OpenSSL
        result = subprocess.run([
            'openssl', 'req', '-x509', '-newkey', 'rsa:2048',
            '-keyout', 'ssl/key.pem', '-out', 'ssl/cert.pem',
            '-days', '365', '-nodes', '-batch',
            '-subj', '/C=RU/ST=Local/L=Local/O=Django Dev/CN=localhost'
        ], capture_output=True, check=True)
        
        print('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ OpenSSL')
        print('   –§–∞–π–ª—ã: ssl/cert.pem –∏ ssl/key.pem')
        return True
        
    except (FileNotFoundError, subprocess.CalledProcessError):
        print('‚ö†Ô∏è OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º Python —Å–ø–æ—Å–æ–±...')
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography –µ—Å–ª–∏ –Ω–µ—Ç
            try:
                from cryptography import x509
                from cryptography.x509.oid import NameOID
                from cryptography.hazmat.primitives import hashes, serialization
                from cryptography.hazmat.primitives.asymmetric import rsa
                import datetime
            except ImportError:
                print('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography...')
                subprocess.run(['pip', 'install', 'cryptography'], check=True)
                from cryptography import x509
                from cryptography.x509.oid import NameOID
                from cryptography.hazmat.primitives import hashes, serialization
                from cryptography.hazmat.primitives.asymmetric import rsa
                import datetime
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
            private_key = rsa.generate_private_key(
                public_exponent=65537,
                key_size=2048,
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            subject = issuer = x509.Name([
                x509.NameAttribute(NameOID.COUNTRY_NAME, u'RU'),
                x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u'Local'),
                x509.NameAttribute(NameOID.LOCALITY_NAME, u'Local'),
                x509.NameAttribute(NameOID.ORGANIZATION_NAME, u'Django Dev'),
                x509.NameAttribute(NameOID.COMMON_NAME, u'localhost'),
            ])
            
            cert = x509.CertificateBuilder().subject_name(
                subject
            ).issuer_name(
                issuer
            ).public_key(
                private_key.public_key()
            ).serial_number(
                x509.random_serial_number()
            ).not_valid_before(
                datetime.datetime.utcnow()
            ).not_valid_after(
                datetime.datetime.utcnow() + datetime.timedelta(days=365)
            ).add_extension(
                x509.SubjectAlternativeName([
                    x509.DNSName(u'localhost'),
                    x509.DNSName(u'127.0.0.1'),
                ]),
                critical=False,
            ).sign(private_key, hashes.SHA256())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            with open('ssl/cert.pem', 'wb') as f:
                f.write(cert.public_bytes(serialization.Encoding.PEM))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
            with open('ssl/key.pem', 'wb') as f:
                f.write(private_key.private_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PrivateFormat.PKCS8,
                    encryption_algorithm=serialization.NoEncryption()
                ))
            
            print('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Python cryptography')
            print('   –§–∞–π–ª—ã: ssl/cert.pem –∏ ssl/key.pem')
            return True
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}')
            return False

if __name__ == '__main__':
    print('üîí –°–û–ó–î–ê–ù–ò–ï SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–ê')
    print('=' * 30)
    
    if os.path.exists('ssl/cert.pem') and os.path.exists('ssl/key.pem'):
        response = input('SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ')
        if response.lower() != 'y':
            print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')
            exit(0)
    
    if create_ssl_cert():
        print('\nüéâ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≥–æ—Ç–æ–≤!')
        print('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTPS —Å–µ—Ä–≤–µ—Ä:')
        print('   python manage.py runserver_plus --cert-file ssl/cert.pem --key-file ssl/key.pem')
        print('\nüåê –ê–¥—Ä–µ—Å: https://127.0.0.1:8000/')
        print('‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    else:
        print('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')
