#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞: python create_test_playlists_content.py
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from stories.models import Story, Playlist, PlaylistItem, UserPlaylistPreference

def create_test_playlists():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    
    print("üéµ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = User.objects.get_or_create(
        username='testuser',
        defaults={
            'email': 'test@example.com',
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
    )
    
    if created:
        user.set_password('testpass123')
        user.save()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    else:
        print(f"üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—Å–∫–∞–∑—ã
    stories = list(Story.objects.all()[:10])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–∞—Å—Å–∫–∞–∑–æ–≤
    
    if not stories:
        print("‚ùå –ù–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å–∫–∞–∑—ã.")
        return
    
    print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(stories)} —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç—ã")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
    prefs, created = UserPlaylistPreference.objects.get_or_create(user=user)
    
    # –ü–ª–µ–π–ª–∏—Å—Ç "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ"
    watch_later = prefs.get_or_create_watch_later()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å–∫–∞–∑—ã –≤ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ"
    for i, story in enumerate(stories[:5]):
        item, created = PlaylistItem.objects.get_or_create(
            playlist=watch_later,
            story=story,
            defaults={'position': i + 1}
        )
        if created:
            print(f"üìº –î–æ–±–∞–≤–ª–µ–Ω –≤ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ': {story.title}")
    
    # –ü–ª–µ–π–ª–∏—Å—Ç "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"
    favorites = prefs.get_or_create_favorites()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å–∫–∞–∑—ã –≤ "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"
    for i, story in enumerate(stories[2:5]):  # –ß–∞—Å—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è
        item, created = PlaylistItem.objects.get_or_create(
            playlist=favorites,
            story=story,
            defaults={'position': i + 1}
        )
        if created:
            print(f"‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –≤ '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è': {story.title}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
    test_playlists = [
        {
            'title': '–û—Ç–ª–∏—á–Ω–æ',
            'description': '–°–∞–º—ã–µ –ª—É—á—à–∏–µ —Ä–∞—Å—Å–∫–∞–∑—ã',
            'is_public': False,
            'stories': stories[:2]
        },
        {
            'title': '–õ–µ–≤—ã–π',
            'description': '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç',
            'is_public': False,
            'stories': stories[5:6]
        },
        {
            'title': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–µ–π –ª–∏—Å—Ç',
            'description': '–ü—É–±–ª–∏—á–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –≤—Å–µ—Ö',
            'is_public': True,
            'stories': stories[3:6]
        }
    ]
    
    for playlist_data in test_playlists:
        playlist, created = Playlist.objects.get_or_create(
            user=user,
            title=playlist_data['title'],
            defaults={
                'description': playlist_data['description'],
                'is_public': playlist_data['is_public']
            }
        )
        
        if created:
            print(f"üéº –°–æ–∑–¥–∞–Ω –ø–ª–µ–π–ª–∏—Å—Ç: {playlist.title}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å–∫–∞–∑—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç
        for i, story in enumerate(playlist_data['stories']):
            item, created = PlaylistItem.objects.get_or_create(
                playlist=playlist,
                story=story,
                defaults={'position': i + 1}
            )
            if created:
                print(f"   üìπ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Å–∫–∞–∑: {story.title}")
    
    print("\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    print(f"   üéµ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: 2")
    print(f"   üéº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {len(test_playlists)}")
    print(f"   üìπ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {PlaylistItem.objects.filter(playlist__user=user).count()}")

def clean_playlists():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
    
    try:
        user = User.objects.get(username='testuser')
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
        playlists_count = Playlist.objects.filter(user=user).count()
        Playlist.objects.filter(user=user).delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
        try:
            prefs = UserPlaylistPreference.objects.get(user=user)
            prefs.delete()
        except UserPlaylistPreference.DoesNotExist:
            pass
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {playlists_count} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
        
    except User.DoesNotExist:
        print("üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏')
    parser.add_argument('--clean', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã')
    
    args = parser.parse_args()
    
    if args.clean:
        clean_playlists()
    else:
        create_test_playlists()
