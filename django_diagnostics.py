#!/usr/bin/env python
"""
Django Project Diagnostic and Recovery Script
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ Git –æ—Ç–∫–∞—Ç–∞
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path

def print_header(text):
    print(f"\n{'='*60}")
    print(f"üîß {text}")
    print(f"{'='*60}")

def print_step(step_num, text):
    print(f"\n{step_num}. {text}")

def run_command(command, description=""):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        if description:
            print(f"   {description}")
        
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            timeout=60
        )
        
        if result.returncode == 0:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            return True, result.stdout
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False, result.stderr
    except subprocess.TimeoutExpired:
        print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã")
        return False, "Timeout"
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False, str(e)

def check_django_project():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Django –ø—Ä–æ–µ–∫—Ç–∞"""
    print_header("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DJANGO –ü–†–û–ï–ö–¢–ê")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    print_step(1, "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
    
    required_files = [
        'manage.py',
        'config/settings.py',
        'config/urls.py',
        'requirements.txt'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
        else:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {file_path}")
    
    if missing_files:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    return True

def check_virtual_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print_step(2, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    
    venv_path = Path('.venv')
    if not venv_path.exists():
        print("   ‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    activate_script = venv_path / 'Scripts' / 'activate.bat'
    if not activate_script.exists():
        print("   ‚ùå –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("   ‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
    return True

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print_step(3, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Django
    success, output = run_command(
        ".venv\\Scripts\\activate && python manage.py check --database default",
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"
    )
    
    return success

def check_migrations():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print_step(4, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    success, output = run_command(
        ".venv\\Scripts\\activate && python manage.py showmigrations",
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"
    )
    
    if success:
        print(f"   –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:\n{output}")
    
    return success

def fix_static_files():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    print_step(5, "–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã")
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É staticfiles
    staticfiles_path = Path('staticfiles')
    if staticfiles_path.exists():
        try:
            shutil.rmtree(staticfiles_path)
            print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ staticfiles")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è staticfiles: {e}")
    
    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    success, output = run_command(
        ".venv\\Scripts\\activate && python manage.py collectstatic --noinput",
        "–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"
    )
    
    return success

def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à Django"""
    print_step(6, "–û—á–∏—â–∞–µ–º –∫–µ—à")
    
    cache_clear_command = """
.venv\\Scripts\\activate && python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()
try:
    from django.core.cache import cache
    cache.clear()
    print('–ö–µ—à –æ—á–∏—â–µ–Ω')
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}')
"
    """
    
    success, output = run_command(cache_clear_command, "–û—á–∏—â–∞–µ–º Django –∫–µ—à")
    
    return success

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print_step(7, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    success, output = run_command(
        ".venv\\Scripts\\activate && pip check",
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤"
    )
    
    return success

def test_django_startup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ Django"""
    print_step(8, "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ Django")
    
    # –¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    success, output = run_command(
        ".venv\\Scripts\\activate && python manage.py check",
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django"
    )
    
    if not success:
        print(f"   –û—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:\n{output}")
    
    return success

def emergency_fixes():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print_header("–≠–ö–°–¢–†–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    
    print_step(1, "–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –ö–æ–ø–∏—Ä—É–µ–º settings.py
    try:
        shutil.copy('config/settings.py', 'config/settings_backup.py')
        print("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è settings.py —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    
    print_step(2, "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        with open('config/settings.py', 'r', encoding='utf-8') as f:
            settings_content = f.read()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fixes_applied = []
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ DEBUG = True –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if 'DEBUG = False' in settings_content:
            settings_content = settings_content.replace('DEBUG = False', 'DEBUG = True')
            fixes_applied.append("–í–∫–ª—é—á–µ–Ω DEBUG —Ä–µ–∂–∏–º")
        
        # –î–æ–±–∞–≤–ª—è–µ–º localhost –≤ ALLOWED_HOSTS –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "'localhost'" not in settings_content and '"localhost"' not in settings_content:
            settings_content = settings_content.replace(
                "ALLOWED_HOSTS = []",
                "ALLOWED_HOSTS = ['localhost', '127.0.0.1']"
            )
            fixes_applied.append("–î–æ–±–∞–≤–ª–µ–Ω localhost –≤ ALLOWED_HOSTS")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with open('config/settings.py', 'w', encoding='utf-8') as f:
            f.write(settings_content)
        
        for fix in fixes_applied:
            print(f"   ‚úÖ {fix}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_header("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï DJANGO –ü–†–û–ï–ö–¢–ê")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ Git –æ—Ç–∫–∞—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path('manage.py').exists():
        print("‚ùå –û–®–ò–ë–ö–ê: manage.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è Django –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    checks = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_django_project),
        ("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", check_virtual_environment),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("–ú–∏–≥—Ä–∞—Ü–∏–∏", check_migrations),
        ("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã", fix_static_files),
        ("–ö–µ—à", clear_cache),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        ("–ó–∞–ø—É—Å–∫ Django", test_django_startup),
    ]
    
    failed_checks = []
    
    for check_name, check_func in checks:
        try:
            if not check_func():
                failed_checks.append(check_name)
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
            failed_checks.append(check_name)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if failed_checks:
        print(f"\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤: {', '.join(failed_checks)}")
        
        response = input("\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (y/n): ")
        if response.lower() in ['y', 'yes', '–¥', '–¥–∞']:
            emergency_fixes()
            
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞
            print_header("–ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
            if test_django_startup():
                print("\nüéâ Django —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è!")
                print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                print("   .venv\\Scripts\\activate")
                print("   python manage.py runserver")
            else:
                print("\n‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
    else:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   .venv\\Scripts\\activate")
        print("   python manage.py runserver")

if __name__ == "__main__":
    main()
