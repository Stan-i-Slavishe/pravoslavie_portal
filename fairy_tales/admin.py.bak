from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import (
    FairyTaleCategory, 
    FairyTaleTemplate, 
    PersonalizationOrder, 
    FairyTaleReview,
    FairyTaleFavorite
)


@admin.register(FairyTaleCategory)
class FairyTaleCategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'age_group', 'colored_name', 'templates_count', 'is_active', 'order']
    list_filter = ['age_group', 'is_active', 'created_at']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    ordering = ['age_group', 'order', 'name']
    
    def colored_name(self, obj):
        return format_html(
            '<span style="color: {}; font-weight: bold;">● {}</span>',
            obj.color,
            obj.name
        )
    colored_name.short_description = 'Название (цвет)'
    
    def templates_count(self, obj):
        count = obj.templates.filter(is_published=True).count()
        if count > 0:
            url = reverse('admin:fairy_tales_fairytaletemplate_changelist')
            return format_html('<a href="{}?category__id={}">{} шаблонов</a>', url, obj.id, count)
        return '0 шаблонов'
    templates_count.short_description = 'Количество сказок'


@admin.register(FairyTaleTemplate)
class FairyTaleTemplateAdmin(admin.ModelAdmin):
    list_display = [
        'title', 'category', 'age_range_display', 'price_display', 
        'orders_count', 'views_count', 'is_published', 'featured'
    ]
    list_filter = [
        'category', 'is_published', 'featured', 'is_free', 
        'has_audio_option', 'has_illustration_option', 'created_at'
    ]
    search_fields = ['title', 'short_description', 'author']
    prepopulated_fields = {'slug': ('title',)}
    readonly_fields = ['views_count', 'orders_count', 'created_at', 'updated_at']
    
    fieldsets = (
        ('Основная информация', {
            'fields': ('title', 'slug', 'category', 'short_description', 'author', 'cover_image')
        }),
        ('Содержание', {
            'fields': ('content_template', 'therapeutic_goals')
        }),
        ('Персонализация', {
            'fields': ('personalization_fields', 'target_age_min', 'target_age_max'),
            'classes': ('collapse',)
        }),
        ('Ценообразование', {
            'fields': (
                'is_free', 'base_price', 
                'has_audio_option', 'audio_price',
                'has_illustration_option', 'illustration_price'
            )
        }),
        ('Публикация', {
            'fields': ('is_published', 'featured')
        }),
        ('Статистика', {
            'fields': ('views_count', 'orders_count', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    def price_display(self, obj):
        if obj.is_free:
            return mark_safe('<span style="color: green; font-weight: bold;">Бесплатно</span>')
        else:
            return f"{obj.base_price} ₽"
    price_display.short_description = 'Цена'
    
    def age_range_display(self, obj):
        return obj.age_range_display
    age_range_display.short_description = 'Возраст'


@admin.register(PersonalizationOrder)
class PersonalizationOrderAdmin(admin.ModelAdmin):
    list_display = [
        'short_order_id', 'template', 'customer_name', 'status_display', 
        'total_price', 'created_at', 'estimated_completion'
    ]
    list_filter = ['status', 'include_audio', 'include_illustrations', 'created_at']
    search_fields = ['order_id', 'customer_name', 'customer_email', 'template__title']
    readonly_fields = ['order_id', 'created_at', 'updated_at', 'personalization_summary']
    date_hierarchy = 'created_at'
    
    fieldsets = (
        ('Информация о заказе', {
            'fields': ('order_id', 'template', 'status', 'total_price')
        }),
        ('Заказчик', {
            'fields': ('customer_name', 'customer_email', 'customer_phone', 'user')
        }),
        ('Персонализация', {
            'fields': ('personalization_summary', 'personalization_data', 'special_requests'),
            'classes': ('collapse',)
        }),
        ('Опции и цены', {
            'fields': (
                'base_price', 'include_audio', 'audio_price',
                'include_illustrations', 'illustration_price'
            )
        }),
        ('Выполнение', {
            'fields': (
                'estimated_completion', 'completed_at', 
                'generated_content', 'audio_file', 'illustration_file'
            )
        }),
        ('Администрирование', {
            'fields': ('admin_notes', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    def status_display(self, obj):
        colors = {
            'pending': '#f39c12',
            'paid': '#3498db',
            'in_progress': '#9b59b6',
            'ready': '#27ae60',
            'delivered': '#2ecc71',
            'cancelled': '#e74c3c'
        }
        color = colors.get(obj.status, '#95a5a6')
        return format_html(
            '<span style="color: {}; font-weight: bold;">●</span> {}',
            color,
            obj.get_status_display()
        )
    status_display.short_description = 'Статус'
    
    def personalization_summary(self, obj):
        return obj.get_personalization_summary()
    personalization_summary.short_description = 'Краткое содержание персонализации'
    
    actions = ['mark_as_paid', 'mark_as_in_progress', 'mark_as_ready']
    
    def mark_as_paid(self, request, queryset):
        updated = queryset.update(status='paid')
        self.message_user(request, f'{updated} заказов отмечено как оплаченные.')
    mark_as_paid.short_description = 'Отметить как оплаченные'
    
    def mark_as_in_progress(self, request, queryset):
        updated = queryset.update(status='in_progress')
        self.message_user(request, f'{updated} заказов взято в работу.')
    mark_as_in_progress.short_description = 'Взять в работу'
    
    def mark_as_ready(self, request, queryset):
        updated = queryset.update(status='ready')
        self.message_user(request, f'{updated} заказов готово.')
    mark_as_ready.short_description = 'Отметить как готовые'


@admin.register(FairyTaleReview)
class FairyTaleReviewAdmin(admin.ModelAdmin):
    list_display = ['template', 'author', 'rating_display', 'helped_with_problem', 'is_published', 'created_at']
    list_filter = ['rating', 'helped_with_problem', 'child_liked', 'is_published', 'is_featured']
    search_fields = ['template__title', 'author__username', 'title', 'content']
    readonly_fields = ['created_at', 'updated_at']
    
    def rating_display(self, obj):
        stars = '★' * obj.rating + '☆' * (5 - obj.rating)
        return format_html('<span style="color: #f39c12;">{}</span>', stars)
    rating_display.short_description = 'Рейтинг'


@admin.register(FairyTaleFavorite)
class FairyTaleFavoriteAdmin(admin.ModelAdmin):
    list_display = ['user', 'template', 'created_at']
    list_filter = ['created_at', 'template__category']
    search_fields = ['user__username', 'template__title']
    readonly_fields = ['created_at']