#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Django –ø—Ä–æ–µ–∫—Ç–µ
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: python fix_comments.py
"""

import os
import re
import shutil
from datetime import datetime

def print_header():
    print("=" * 50)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í")
    print("=" * 50)
    print()

def check_django_project():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ Django –ø—Ä–æ–µ–∫—Ç–∞"""
    if not os.path.exists('manage.py'):
        print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª manage.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ Django –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    print("‚úÖ Django –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω")
    return True

def create_backup(file_path):
    """–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        backup_path = f"{file_path}.backup"
        shutil.copy2(file_path, backup_path)
        print(f"   ‚úì {file_path} ‚Üí {backup_path}")
        return True
    return False

def fix_views_py():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º stories/views.py"""
    views_path = 'stories/views.py'
    
    if not os.path.exists(views_path):
        print(f"‚ùå –§–∞–π–ª {views_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üî® –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {views_path}...")
    
    with open(views_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if 'from django.db.models import Count, Q' not in content:
        content = re.sub(
            r'(from django.shortcuts import.*)', 
            r'\1\nfrom django.db.models import Count, Q', 
            content
        )
        print("   ‚úì –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã Count, Q")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é story_detail
    new_story_detail = '''def story_detail(request, slug):
    story = get_object_or_404(Story, slug=slug)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤)
    main_comments = Comment.objects.filter(
        story=story, 
        parent=None  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–µ –æ—Ç–≤–µ—Ç—ã
    ).select_related('user').prefetch_related('replies')
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
    comments_count = main_comments.count()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    from django.core.paginator import Paginator
    paginator = Paginator(main_comments, 10)  # 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_number = request.GET.get('page')
    comments = paginator.get_page(page_number)
    
    context = {
        'story': story,
        'comments': comments,
        'comments_count': comments_count,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
        'total_comments': comments_count,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    }'''
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é story_detail
    pattern = r'def story_detail\(request, slug\):.*?context = \{[^}]*\}'
    if re.search(pattern, content, re.DOTALL):
        content = re.sub(pattern, new_story_detail, content, flags=re.DOTALL)
        print("   ‚úì –§—É–Ω–∫—Ü–∏—è story_detail –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("   ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è story_detail –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é stories_list
    new_stories_list = '''def stories_list(request):
    stories = Story.objects.annotate(
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        comments_count=Count('comments', filter=Q(comments__parent=None))
    ).order_by('-created_at')
    
    context = {
        'stories': stories,
    }'''
    
    pattern = r'def stories_list\(request\):.*?context = \{[^}]*\}'
    if re.search(pattern, content, re.DOTALL):
        content = re.sub(pattern, new_stories_list, content, flags=re.DOTALL)
        print("   ‚úì –§—É–Ω–∫—Ü–∏—è stories_list –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("   ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è stories_list –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(views_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"   ‚úÖ {views_path} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    return True

def fix_template():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω story_detail.html"""
    template_path = 'templates/stories/story_detail.html'
    
    if not os.path.exists(template_path):
        print(f"‚ùå –§–∞–π–ª {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üî® –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {template_path}...")
    
    with open(template_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º hardcoded –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    replacements = [
        ('data-count="24"', 'data-count="{{ comments_count }}"'),
        ('>24</span>', '>{{ comments_count }}</span>'),
    ]
    
    for old, new in replacements:
        if old in content:
            content = content.replace(old, new)
            print(f"   ‚úì –ó–∞–º–µ–Ω–µ–Ω–æ: {old} ‚Üí {new}")
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–º–µ–Ω
    regex_replacements = [
        (r'id="comments-count-sidebar">24', 'id="comments-count-sidebar">{{ comments_count }}'),
        (r'id="comments-count-meta">24', 'id="comments-count-meta">{{ comments_count }}'),
    ]
    
    for pattern, replacement in regex_replacements:
        if re.search(pattern, content):
            content = re.sub(pattern, replacement, content)
            print(f"   ‚úì –ó–∞–º–µ–Ω–µ–Ω–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(template_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"   ‚úÖ {template_path} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    return True

def main():
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Django –ø—Ä–æ–µ–∫—Ç
    if not check_django_project():
        return
    
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    print("üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤...")
    create_backup('stories/views.py')
    create_backup('templates/stories/story_detail.html')
    
    print()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    views_ok = fix_views_py()
    template_ok = fix_template()
    
    print()
    print("=" * 50)
    
    if views_ok and template_ok:
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print()
        print("üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (.backup)")
        print("   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω stories/views.py")
        print("   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω story_detail.html")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
        print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        print()
        print("üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   python manage.py runserver")
    else:
        print("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º")
    
    print()
    print("üí° –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ .backup —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)

if __name__ == '__main__':
    main()