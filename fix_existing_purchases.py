# fix_existing_purchases.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤

import os
import django
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
from shop.models import Product, Order, OrderItem, Purchase
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)

def fix_purchases_without_orders():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ö–£–ü–û–ö –ë–ï–ó –ó–ê–ö–ê–ó–û–í")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
    purchases_without_orders = Purchase.objects.filter(order__isnull=True)
    
    if not purchases_without_orders.exists():
        print("‚úÖ –í—Å–µ –ø–æ–∫—É–ø–∫–∏ –∏–º–µ—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
        return
    
    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤: {purchases_without_orders.count()}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    purchases_by_user = defaultdict(list)
    
    for purchase in purchases_without_orders:
        purchases_by_user[purchase.user].append(purchase)
    
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏: {len(purchases_by_user)}")
    
    fixed_count = 0
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user, user_purchases in purchases_by_user.items():
        try:
            print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
            print(f"   –ü–æ–∫—É–ø–æ–∫: {len(user_purchases)}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            total_amount = sum(p.product.price for p in user_purchases)
            
            order = Order.objects.create(
                user=user,
                email=user.email,
                first_name=user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                last_name=user.last_name or '–°–∞–π—Ç–∞',
                phone='',
                total_amount=total_amount,
                status='completed',
                paid_at=user_purchases[0].purchased_at,
                completed_at=user_purchases[0].purchased_at,
                payment_method='legacy_fix',
                payment_id=f'legacy_{user.id}_{timezone.now().timestamp()}',
            )
            
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order.short_id}")
            
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏
            for purchase in user_purchases:
                OrderItem.objects.create(
                    order=order,
                    product=purchase.product,
                    product_title=purchase.product.title,
                    product_price=purchase.product.price,
                    quantity=1,
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É
                purchase.order = order
                purchase.save()
                
                fixed_count += 1
                print(f"   üì¶ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞: {purchase.product.title}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
            continue
    
    print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: {fixed_count}")
    print("=" * 50)

def verify_fix():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
    purchases_without_orders = Purchase.objects.filter(order__isnull=True)
    print(f"–ü–æ–∫—É–ø–æ–∫ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤: {purchases_without_orders.count()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_purchases = Purchase.objects.count()
    total_orders = Order.objects.count()
    
    print(f"–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}")
    print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
    for status, name in Order.STATUS_CHOICES:
        count = Order.objects.filter(status=status).count()
        if count > 0:
            print(f"–ó–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{name}': {count}")

if __name__ == '__main__':
    fix_purchases_without_orders()
    verify_fix()
