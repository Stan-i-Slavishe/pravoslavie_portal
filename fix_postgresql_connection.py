#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PostgreSQL —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
"""

import psycopg2
import sys
import os

def test_different_passwords():
    """–ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–æ–ª–µ–π"""
    
    connection_params = {
        'host': 'localhost',
        'port': '5432', 
        'database': 'postgres',  # –ù–∞—á–Ω–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
        'user': 'postgres'
    }
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è postgres –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    possible_passwords = [
        '',  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
        'postgres',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        'admin',  # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
        'password',  # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
        '123456',  # –ü—Ä–æ—Å—Ç–æ–π
        'local_strong_password_2024',  # –ù–∞—à –ø–∞—Ä–æ–ª—å
    ]
    
    print("–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è postgres...")
    print("="*50)
    
    for password in possible_passwords:
        try:
            print(f"–ü—Ä–æ–±—É–µ–º –ø–∞—Ä–æ–ª—å: {'(–ø—É—Å—Ç–æ–π)' if password == '' else password}")
            
            params = connection_params.copy()
            params['password'] = password
            
            conn = psycopg2.connect(**params)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            print(f"‚úÖ –£–°–ü–ï–•! PostgreSQL: {version[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT datname FROM pg_database WHERE datistemplate = false;")
            databases = cursor.fetchall()
            print("\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            for db in databases:
                print(f"  - {db[0]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT usename FROM pg_user;")
            users = cursor.fetchall()
            print("\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for user in users:
                print(f"  - {user[0]}")
            
            cursor.close()
            conn.close()
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—à—É —Ü–µ–ª–µ–≤—É—é –ë–î
            print(f"\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pravoslavie_local_db...")
            return test_target_database(password)
            
        except Exception as e:
            print(f"‚ùå –ù–µ –ø–æ–¥–æ—à–µ–ª: {e}")
            continue
    
    print("\n‚ùå –ù–∏ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª")
    return False

def test_target_database(postgres_password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—à–∞ –ë–î
    try:
        conn = psycopg2.connect(
            host='localhost',
            port='5432',
            database='postgres',
            user='postgres',
            password=postgres_password
        )
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π –ë–î
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'pravoslavie_local_db';")
        db_exists = cursor.fetchone() is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT 1 FROM pg_user WHERE usename = 'pravoslavie_user';")
        user_exists = cursor.fetchone() is not None
        
        print(f"–ë–∞–∑–∞ pravoslavie_local_db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if db_exists else '‚ùå'}")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å pravoslavie_user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if user_exists else '‚ùå'}")
        
        cursor.close()
        conn.close()
        
        if not db_exists or not user_exists:
            print("\n‚ö†Ô∏è –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return recreate_database_and_user(postgres_password)
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –ë–î
        print("\n–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ pravoslavie_local_db...")
        try:
            conn = psycopg2.connect(
                host='localhost',
                port='5432',
                database='pravoslavie_local_db',
                user='pravoslavie_user',
                password='local_strong_password_2024'
            )
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")
            table_count = cursor.fetchone()[0]
            print(f"‚úÖ –£–°–ü–ï–•! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ pravoslavie_local_db —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü –≤ –ë–î: {table_count}")
            cursor.close()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ pravoslavie_local_db: {e}")
            print("–ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
            return recreate_database_and_user(postgres_password)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–µ–≤–æ–π –ë–î: {e}")
        return False

def recreate_database_and_user(postgres_password):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    print("\n–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    print("-" * 40)
    
    try:
        conn = psycopg2.connect(
            host='localhost',
            port='5432',
            database='postgres',
            user='postgres',
            password=postgres_password
        )
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
        try:
            cursor.execute("DROP DATABASE IF EXISTS pravoslavie_local_db;")
            print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞")
        except:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            cursor.execute("DROP USER IF EXISTS pravoslavie_user;")
            print("üóëÔ∏è –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            CREATE USER pravoslavie_user WITH 
            PASSWORD 'local_strong_password_2024'
            CREATEDB
            LOGIN;
        """)
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å pravoslavie_user —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ë–î
        cursor.execute("""
            CREATE DATABASE pravoslavie_local_db 
            WITH 
            OWNER = pravoslavie_user
            ENCODING = 'UTF8'
            LC_COLLATE = 'C'
            LC_CTYPE = 'C'
            TEMPLATE = template0;
        """)
        print("üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö pravoslavie_local_db —Å–æ–∑–¥–∞–Ω–∞")
        
        # –î–∞–µ–º –ø—Ä–∞–≤–∞
        cursor.execute("GRANT ALL PRIVILEGES ON DATABASE pravoslavie_local_db TO pravoslavie_user;")
        print("üîê –ü—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
        
        cursor.close()
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –ë–î
        print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –ë–î...")
        test_conn = psycopg2.connect(
            host='localhost',
            port='5432',
            database='pravoslavie_local_db',
            user='pravoslavie_user',
            password='local_strong_password_2024'
        )
        test_conn.close()
        
        print("‚úÖ –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ Django –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        return False

if __name__ == "__main__":
    success = test_different_passwords()
    
    if success:
        print("\nüéâ PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å Django")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å PostgreSQL –Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
        print("–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
