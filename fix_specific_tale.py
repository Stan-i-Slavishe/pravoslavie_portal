#!/usr/bin/env python
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∫–∞–∑–∫–∏ "–°–µ–º–µ–π–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏"
"""

import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_path = 'E:/pravoslavie_portal'
if project_path not in sys.path:
    sys.path.append(project_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from shop.models import Product

def fix_specific_fairy_tale():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∫–∞–∑–∫—É"""
    
    print("üîß –ò—â–µ–º —Å–∫–∞–∑–∫—É '–°–µ–º–µ–π–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏'...")
    
    # –ò—â–µ–º —Å–∫–∞–∑–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    try:
        tale = Product.objects.get(
            title__icontains="–°–µ–º–µ–π–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏"
        )
        
        print(f"üìñ –ù–∞–π–¥–µ–Ω–∞ —Å–∫–∞–∑–∫–∞: {tale.title}")
        print(f"   ID: {tale.id}")
        print(f"   –¢–∏–ø: {tale.product_type}")
        print(f"   –¶–µ–Ω–∞: {tale.price}‚ÇΩ")
        print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {tale.is_active}")
        print(f"   –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {tale.requires_personalization}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
        if not tale.requires_personalization:
            print("   üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º requires_personalization=True")
            tale.requires_personalization = True
            tale.save()
            print("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!")
        else:
            print("   ‚úÖ –£–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
        tale.refresh_from_db()
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê: requires_personalization = {tale.requires_personalization}")
        
    except Product.DoesNotExist:
        print("‚ùå –°–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–∫–∞–∂–µ–º –≤—Å–µ —Å–∫–∞–∑–∫–∏
        all_tales = Product.objects.filter(product_type='fairy_tale')
        print(f"\nüìö –í—Å–µ —Å–∫–∞–∑–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ ({all_tales.count()}):")
        for t in all_tales:
            print(f"   - {t.title} (ID: {t.id}) - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {t.requires_personalization}")
    
    except Product.MultipleObjectsReturned:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–∞–∑–æ–∫ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º")
        
        tales = Product.objects.filter(title__icontains="–°–µ–º–µ–π–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
        for tale in tales:
            print(f"üìñ {tale.title} (ID: {tale.id})")
            if not tale.requires_personalization:
                tale.requires_personalization = True
                tale.save()
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!")

if __name__ == "__main__":
    fix_specific_fairy_tale()
