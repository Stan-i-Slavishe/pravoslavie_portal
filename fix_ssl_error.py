#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
"""
import os
import subprocess
import sys
from pathlib import Path

def check_ssl_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SSL —Ñ–∞–π–ª—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Ñ–∞–π–ª—ã...")
    
    cert_file = Path('ssl/cert.pem')
    key_file = Path('ssl/key.pem')
    
    if not cert_file.exists():
        print("‚ùå ssl/cert.pem –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not key_file.exists():
        print("‚ùå ssl/key.pem –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ SSL —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
    cert_size = cert_file.stat().st_size
    key_size = key_file.stat().st_size
    
    print(f"üìÑ cert.pem: {cert_size} –±–∞–π—Ç")
    print(f"üîë key.pem: {key_size} –±–∞–π—Ç")
    
    if cert_size < 100 or key_size < 100:
        print("‚ö†Ô∏è SSL —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
        return False
    
    return True

def recreate_ssl_cert():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    for file in ['ssl/cert.pem', 'ssl/key.pem']:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω {file}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    try:
        from cryptography import x509
        from cryptography.x509.oid import NameOID
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        import datetime
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, u'RU'),
            x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u'Moscow'),
            x509.NameAttribute(NameOID.LOCALITY_NAME, u'Moscow'),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, u'Django Dev Server'),
            x509.NameAttribute(NameOID.COMMON_NAME, u'localhost'),
        ])
        
        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.datetime.utcnow()
        ).not_valid_after(
            datetime.datetime.utcnow() + datetime.timedelta(days=365)
        ).add_extension(
            x509.SubjectAlternativeName([
                x509.DNSName(u'localhost'),
                x509.DNSName(u'127.0.0.1'),
            ]),
            critical=False,
        ).sign(private_key, hashes.SHA256())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        with open('ssl/cert.pem', 'wb') as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
        with open('ssl/key.pem', 'wb') as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))
        
        print("‚úÖ –ù–æ–≤—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False

def test_https_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTTPS —Å–µ—Ä–≤–µ—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä...")
    
    try:
        import requests
        import urllib3
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        response = requests.get('https://127.0.0.1:8000/', verify=False, timeout=5)
        print(f"‚úÖ HTTPS —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True
    except Exception as e:
        print(f"‚ùå HTTPS —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        return False

def main():
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SSL –ü–†–û–ë–õ–ï–ú")
    print("=" * 50)
    
    if not os.path.exists('manage.py'):
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –∫–æ—Ä–Ω—è Django –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Ñ–∞–π–ª—ã
    if not check_ssl_files():
        print("\nüîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...")
        if not recreate_ssl_cert():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
            return
    
    print("\n‚úÖ SSL –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ HTTPS —Å–µ—Ä–≤–µ—Ä:")
    print("   start_https.bat")
    print("   –ò–õ–ò")
    print("   python manage.py runserver_plus --cert-file ssl/cert.pem --key-file ssl/key.pem")
    print()
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞:")
    print("   https://127.0.0.1:8000/")
    print()
    print("3. –ü—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' -> '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'")
    
    choice = input("\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å HTTPS —Å–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å? (y/n): ")
    if choice.lower() == 'y':
        print("\nüîí –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä...")
        os.system("python manage.py runserver_plus --cert-file ssl/cert.pem --key-file ssl/key.pem")

if __name__ == '__main__':
    main()
