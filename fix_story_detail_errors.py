#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–∞—Å—Å–∫–∞–∑–æ–≤
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç:
1. TemplateSyntaxError —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º endblock
2. AttributeError —Å youtube_embed –ø–æ–ª—è –≤ –º–æ–¥–µ–ª–∏ Story
3. –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∏–¥–µ–æ
"""

import os
import sys
import django
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.append(str(project_root))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from stories.models import Story
from django.core.management import call_command

def extract_youtube_id(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ YouTube URL"""
    if not url:
        return None
    
    patterns = [
        r'(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)',
        r'youtube\.com\/v\/([^&\n?#]+)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    
    return None

def fix_story_youtube_ids():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç YouTube ID –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—Å–∫–∞–∑–æ–≤"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º YouTube ID –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–æ–≤...")
    
    stories = Story.objects.all()
    fixed_count = 0
    
    for story in stories:
        if story.youtube_url and not story.youtube_embed_id:
            youtube_id = extract_youtube_id(story.youtube_url)
            if youtube_id:
                story.youtube_embed_id = youtube_id
                story.save(update_fields=['youtube_embed_id'])
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID –¥–ª—è '{story.title}': {youtube_id}")
                fixed_count += 1
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL: {story.youtube_url}")
    
    print(f"üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} —Ä–∞—Å—Å–∫–∞–∑–æ–≤")

def backup_original_template():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    original_path = project_root / 'templates' / 'stories' / 'story_detail.html'
    backup_path = project_root / 'templates' / 'stories' / 'story_detail_backup.html'
    
    if original_path.exists() and not backup_path.exists():
        with open(original_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    else:
        print("‚ö†Ô∏è  –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def replace_template():
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    original_path = project_root / 'templates' / 'stories' / 'story_detail.html'
    fixed_path = project_root / 'templates' / 'stories' / 'story_detail_fixed.html'
    
    if fixed_path.exists():
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_original_template()
        
        # –ß–∏—Ç–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        with open(fixed_path, 'r', encoding='utf-8') as f:
            fixed_content = f.read()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        with open(original_path, 'w', encoding='utf-8') as f:
            f.write(fixed_content)
        
        print(f"‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–º–µ–Ω–µ–Ω: {original_path}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print(f"‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {fixed_path}")

def check_story_model():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –º–æ–¥–µ–ª–∏ Story"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å Story...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑
    story = Story.objects.first()
    if story:
        fields_to_check = [
            'youtube_url', 'youtube_embed_id', 'title', 'slug', 
            'description', 'created_at', 'views_count'
        ]
        
        missing_fields = []
        for field in fields_to_check:
            if not hasattr(story, field):
                missing_fields.append(field)
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
            print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
    else:
        print("‚ö†Ô∏è  –†–∞—Å—Å–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return True

def create_test_story():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑...")
    
    test_story, created = Story.objects.get_or_create(
        slug='test-story-fix',
        defaults={
            'title': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)',
            'description': '–≠—Ç–æ—Ç —Ä–∞—Å—Å–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.',
            'youtube_url': 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',  # Rick Roll –¥–ª—è —Ç–µ—Å—Ç–∞
            'youtube_embed_id': 'dQw4w9WgXcQ',
            'views_count': 0,
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑: {test_story.title}")
        print(f"üîó URL: /stories/{test_story.slug}/")
    else:
        print("üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return test_story

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ä–∞—Å—Å–∫–∞–∑–æ–≤")
    print("=" * 50)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
        if not check_story_model():
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
            return
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º YouTube ID
        fix_story_youtube_ids()
        
        # 3. –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        replace_template()
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑
        test_story = create_test_story()
        
        print("\n" + "=" * 50)
        print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã YouTube ID –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–æ–≤")
        print("   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —à–∞–±–ª–æ–Ω story_detail.html")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        print(f"\nüß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ:")
        print(f"   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä Django")
        print(f"   2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://127.0.0.1:8000/stories/{test_story.slug}/")
        print(f"   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫")
        
        print("\n‚ö†Ô∏è  –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ URL –≤ stories/urls.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
        print("üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py migrate")

if __name__ == '__main__':
    main()
