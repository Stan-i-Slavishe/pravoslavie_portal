#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_local_postgresql')
django.setup()

def check_user_references():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    from django.contrib.auth.models import User
    from django.db import connection
    
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–í–Ø–ó–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = User.objects.all()
    print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users.count()}")
    
    for user in users:
        print(f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        try:
            # Stories —Å–≤—è–∑–∏
            from stories.models import Story, StoryComment, StoryLike, Playlist
            
            stories_count = Story.objects.filter(category__isnull=True).count()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            comments_count = StoryComment.objects.filter(user=user).count()
            likes_count = StoryLike.objects.filter(user=user).count()
            playlists_count = Playlist.objects.filter(creator=user).count()
            
            print(f"  - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments_count}")
            print(f"  - –õ–∞–π–∫–∏: {likes_count}") 
            print(f"  - –ü–ª–µ–π–ª–∏—Å—Ç—ã: {playlists_count}")
            
        except Exception as e:
            print(f"  - –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ stories: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∏
        try:
            from books.models import BookReview
            reviews_count = BookReview.objects.filter(user=user).count()
            print(f"  - –û—Ç–∑—ã–≤—ã –æ –∫–Ω–∏–≥–∞—Ö: {reviews_count}")
        except:
            pass

def check_orphaned_records():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    from django.db import connection
    
    print("\n–ü–û–ò–°–ö –ü–û–¢–ï–†–Ø–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô")
    print("=" * 40)
    
    with connection.cursor() as cursor:
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        queries = [
            ("stories_storycomment", "user_id"),
            ("stories_storylike", "user_id"),  
            ("stories_playlist", "creator_id"),
            ("books_bookreview", "user_id"),
        ]
        
        for table, user_field in queries:
            try:
                cursor.execute(f"""
                    SELECT COUNT(*) FROM {table} 
                    WHERE {user_field} NOT IN (SELECT id FROM auth_user)
                """)
                orphaned_count = cursor.fetchone()[0]
                
                if orphaned_count > 0:
                    print(f"‚ö† {table}: {orphaned_count} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"‚úì {table}: –≤—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                    
            except Exception as e:
                print(f"‚úó {table}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")

def fix_orphaned_records():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
    
    from django.db import connection
    
    print("\n–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–¢–ï–†–Ø–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô")
    print("=" * 40)
    
    with connection.cursor() as cursor:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        fix_queries = [
            ("stories_storycomment", "user_id", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"),
            ("stories_storylike", "user_id", "–ª–∞–π–∫–∏"),
            ("stories_playlist", "creator_id", "–ø–ª–µ–π–ª–∏—Å—Ç—ã"),
            ("books_bookreview", "user_id", "–æ—Ç–∑—ã–≤—ã"),
        ]
        
        for table, user_field, description in fix_queries:
            try:
                cursor.execute(f"""
                    DELETE FROM {table} 
                    WHERE {user_field} NOT IN (SELECT id FROM auth_user)
                """)
                deleted_count = cursor.rowcount
                
                if deleted_count > 0:
                    print(f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {description}")
                else:
                    print(f"‚úì {description}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
                    
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {description}: {e}")

if __name__ == "__main__":
    check_user_references()
    check_orphaned_records()
    
    print("\n–•–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏? (y/n)")
    response = input().lower().strip()
    
    if response == 'y':
        fix_orphaned_records()
        print("\n–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É.")
    else:
        print("\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
