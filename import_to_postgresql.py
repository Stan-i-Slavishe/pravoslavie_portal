#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL (–≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
"""

import os
import sys
import django
from datetime import datetime

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL –æ–∫—Ä—É–∂–µ–Ω–∏–µ
os.environ['PYTHONIOENCODING'] = 'utf-8'
os.environ['PYTHONUTF8'] = '1'
os.environ['DJANGO_ENV'] = 'local'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –¥–ª—è PostgreSQL
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_local')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from django.core.management import call_command
from django.db import connection
from django.conf import settings

def print_step(step_num, title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —à–∞–≥–∞"""
    print(f"\n{'='*60}")
    print(f"STEP {step_num}: {title.upper()}")
    print('='*60)

def check_postgresql_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print_step(1, "Check PostgreSQL Connection")
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {version[:50]}...")
            
            cursor.execute("SELECT current_database();")
            db_name = cursor.fetchone()[0]
            print(f"üìÇ –¢–µ–∫—É—â–∞—è –ë–î: {db_name}")
            
            cursor.execute("SELECT current_user;")
            user = cursor.fetchone()[0]
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ë–∞–∑–∞ pravoslavie_local_db —Å–æ–∑–¥–∞–Ω–∞") 
        print("   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å pravoslavie_user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("   4. –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: local_strong_password_2024")
        return False

def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Django"""
    print_step(2, "Apply Django Migrations")
    
    try:
        call_command('migrate', verbosity=1)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def find_latest_exports():
    """–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_step(3, "Find Exported Data Files")
    
    import os
    import glob
    
    backup_dir = "backups"
    if not os.path.exists(backup_dir):
        print("‚ùå –ü–∞–ø–∫–∞ backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
    pattern = os.path.join(backup_dir, "*_20250901_2113.json")
    found_files = glob.glob(pattern)
    
    if found_files:
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(found_files)} —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        for file in sorted(found_files):
            print(f"   üìÑ {os.path.basename(file)}")
        return sorted(found_files)
    else:
        # –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
        all_files = glob.glob(os.path.join(backup_dir, "*.json"))
        if all_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            all_files.sort(key=os.path.getmtime, reverse=True)
            recent_files = all_files[:20]  # –ë–µ—Ä–µ–º 20 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(recent_files)} –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤:")
            for file in recent_files:
                print(f"   üìÑ {os.path.basename(file)}")
            return recent_files
        else:
            print("‚ùå –§–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return []

def import_data(exported_files):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL"""
    print_step(4, "Import Data to PostgreSQL")
    
    if not exported_files:
        print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        return
    
    # –ü–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤–∞–∂–µ–Ω –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    import_order = [
        'auth_User',
        'auth_Group',
        'core',
        'stories',
        'books', 
        'fairy_tales',
        'shop',
        'accounts',
        'subscriptions'
    ]
    
    imported_count = 0
    
    for app_name in import_order:
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        matching_files = [f for f in exported_files if app_name in os.path.basename(f)]
        
        if not matching_files:
            print(f"‚ö†Ô∏è –§–∞–π–ª –¥–ª—è {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        filename = matching_files[0]
        
        try:
            print(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {os.path.basename(filename)}...")
            call_command('loaddata', filename, verbosity=1)
            print(f"‚úÖ {app_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            imported_count += 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {app_name}: {e}")
            print(f"   –§–∞–π–ª: {filename}")
    
    print(f"\nüìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∏–∑ {len(import_order)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")

def create_superuser():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_step(5, "Create Superuser")
    
    try:
        from django.contrib.auth.models import User
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        superusers = User.objects.filter(is_superuser=True)
        if superusers.exists():
            print(f"üë§ –ù–∞–π–¥–µ–Ω–æ {superusers.count()} —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in superusers:
                print(f"   üîë {user.username} ({user.email})")
            
            create_new = input("\n–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (y/n): ").lower()
            if create_new != 'y':
                print("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                return
        
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        print("(–ù–∞–∂–º–∏—Ç–µ Ctrl+C —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
        call_command('createsuperuser')
        print("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def check_data_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print_step(6, "Check Data Integrity")
    
    try:
        from django.contrib.auth.models import User
        from core.models import Category
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
        users_count = User.objects.count()
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        
        try:
            from stories.models import Story
            stories_count = Story.objects.count()
            print(f"üé¨ –†–∞—Å—Å–∫–∞–∑—ã: {stories_count}")
        except:
            print("üé¨ –†–∞—Å—Å–∫–∞–∑—ã: –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        try:
            from books.models import Book
            books_count = Book.objects.count()
            print(f"üìö –ö–Ω–∏–≥–∏: {books_count}")
        except:
            print("üìö –ö–Ω–∏–≥–∏: –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        try:
            from shop.models import Product, Order
            products_count = Product.objects.count()
            orders_count = Order.objects.count()
            print(f"üõí –¢–æ–≤–∞—Ä—ã: {products_count}")
            print(f"üìã –ó–∞–∫–∞–∑—ã: {orders_count}")
        except:
            print("üõí –ú–∞–≥–∞–∑–∏–Ω: –º–æ–¥–µ–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        try:
            from fairy_tales.models import FairyTale
            fairy_tales_count = FairyTale.objects.count()
            print(f"üßö –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏: {fairy_tales_count}")
        except:
            print("üßö –°–∫–∞–∑–∫–∏: –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        categories_count = Category.objects.count()
        print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("\n" + "="*60)
    print("  –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –í POSTGRESQL")
    print("="*60)
    
    print(f"üêç Python –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {sys.stdout.encoding}")
    print(f"üóÑÔ∏è –¢–µ–∫—É—â–∞—è –ë–î: {settings.DATABASES['default']['ENGINE']}")
    print(f"üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASES['default']['NAME']}")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not check_postgresql_connection():
        return False
    
    # –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    if not apply_migrations():
        return False
    
    # –®–∞–≥ 3: –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    exported_files = find_latest_exports()
    
    # –®–∞–≥ 4: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    import_data(exported_files)
    
    # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_superuser()
    
    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    check_data_integrity()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("        ‚úÖ –ò–ú–ü–û–†–¢ –í POSTGRESQL –ó–ê–í–ï–†–®–ï–ù!")
    print("="*60)
    print("\nüéØ –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —Å–æ–∑–¥–∞–Ω–∞")
    print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    print("   ‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω")
    print("   ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://127.0.0.1:8000/")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω–∫—É: http://127.0.0.1:8000/admin/")
    print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: python check_migration.py")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()