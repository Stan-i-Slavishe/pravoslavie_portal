#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Windows
"""

import os
import sys
import django
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
os.environ['PYTHONIOENCODING'] = 'utf-8'
os.environ['PYTHONUTF8'] = '1'
os.environ['DJANGO_ENV'] = 'local'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings_local')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from django.core.management import call_command
from django.core.management.base import BaseCommand
from django.db import connection
from django.conf import settings
from io import StringIO

def print_step(step_num, title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —à–∞–≥–∞"""
    print(f"\n{'='*60}")
    print(f"STEP {step_num}: {title.upper()}")
    print('='*60)

def export_sqlite_data():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º"""
    print_step(1, "Export SQLite Data")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –±—ç–∫–∞–ø–æ–≤
    backup_dir = "backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    apps_to_export = [
        'auth.User',
        'auth.Group', 
        'core',
        'stories', 
        'books',
        'shop',
        'fairy_tales',
        'accounts',
        'subscriptions'
    ]
    
    exported_files = []
    
    for app in apps_to_export:
        print(f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º {app}...")
        filename = f"{backup_dir}/{app.replace('.', '_')}_{timestamp}.json"
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringIO –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
            output = StringIO()
            
            call_command(
                'dumpdata', 
                app,
                natural_foreign=True,
                natural_primary=True,
                format='json',
                indent=2,
                stdout=output
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Å —è–≤–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(output.getvalue())
            
            exported_files.append(filename)
            print(f"‚úÖ {app} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {app}: {e}")
    
    return exported_files

def update_env_file():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env.local –¥–ª—è PostgreSQL"""
    print_step(2, "Update Environment Configuration")
    
    env_content = """# Environment
DJANGO_ENV=local

# Security
SECRET_KEY=django-insecure-local-development-key-change-me  
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,testserver

# === SWITCH TO POSTGRESQL ===
USE_SQLITE=False

# PostgreSQL settings
DB_NAME=pravoslavie_local_db
DB_USER=pravoslavie_user
DB_PASSWORD=local_strong_password_2024
DB_HOST=localhost
DB_PORT=5432

# Email (console for development)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# API keys (test versions)
YOUTUBE_API_KEY=your-youtube-api-key-for-testing
YOOKASSA_SHOP_ID=test-shop-id  
YOOKASSA_SECRET_KEY=test-secret-key
YOOKASSA_TEST_MODE=True

# Redis
REDIS_URL=redis://127.0.0.1:6379/1
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# Push notifications
VAPID_PRIVATE_KEY=test-private-key-for-development-only
VAPID_PUBLIC_KEY=BKkKS_8l4BqHZ8jO4yXLsJYK6Q7L_Hd-UQOUUj9SqPxKMaI6F5VJ_HqJN4R7s3uK6GnX2bOqT9hL7F2jZaWvNdc
VAPID_EMAIL=admin@pravoslavie-portal.ru

# Admin
ADMIN_EMAIL=admin@localhost

# Additional development settings
SECURE_SSL_REDIRECT=False
CACHE_BACKEND=dummy
"""
    
    # –ë—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ .env.local
    if os.path.exists('.env.local'):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        backup_name = f'.env.local.backup_{timestamp}'
        os.rename('.env.local', backup_name)
        print(f"üìã –¢–µ–∫—É—â–∏–π .env.local —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {backup_name}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ .env.local
    with open('.env.local', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ .env.local –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è PostgreSQL")

def check_postgresql_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print_step(3, "Check PostgreSQL Connection")
    
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
        from django.core.management import execute_from_command_line
        from django.conf import settings
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        call_command('check', database='default')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ë–∞–∑–∞ pravoslavie_local_db —Å–æ–∑–¥–∞–Ω–∞") 
        print("   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å pravoslavie_user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("   4. –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: local_strong_password_2024")
        return False

def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Django"""
    print_step(4, "Apply Django Migrations")
    
    try:
        call_command('migrate')
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def import_data(exported_files):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL"""
    print_step(5, "Import Data to PostgreSQL")
    
    # –ü–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤–∞–∂–µ–Ω –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    import_order = [
        'auth_User',
        'auth_Group',
        'core',
        'stories',
        'books', 
        'fairy_tales',
        'shop',
        'accounts',
        'subscriptions'
    ]
    
    for app_name in import_order:
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        matching_files = [f for f in exported_files if app_name in f]
        
        if not matching_files:
            print(f"‚ö†Ô∏è –§–∞–π–ª –¥–ª—è {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        filename = matching_files[0]
        
        try:
            print(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {filename}...")
            call_command('loaddata', filename)
            print(f"‚úÖ {app_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {app_name}: {e}")
            print(f"   –§–∞–π–ª: {filename}")

def create_superuser():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_step(6, "Create Superuser")
    
    try:
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        print("(–ù–∞–∂–º–∏—Ç–µ Ctrl+C —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
        call_command('createsuperuser')
        print("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("  –ú–ò–ì–†–ê–¶–ò–Ø SQLITE ‚Üí POSTGRESQL (Python –≤–µ—Ä—Å–∏—è)")
    print("="*60)
    
    print(f"üêç Python –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {sys.stdout.encoding}")
    print(f"üóÑÔ∏è –¢–µ–∫—É—â–∞—è –ë–î: {settings.DATABASES['default']['ENGINE']}")
    
    # –®–∞–≥ 1: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite (–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ)
    print("\nüì§ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    original_db = settings.DATABASES['default'].copy()
    settings.DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
    }
    
    # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django —Å SQLite
    connection.close()
    django.setup()
    
    exported_files = export_sqlite_data()
    
    # –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    update_env_file()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings.DATABASES['default'] = original_db
    connection.close()
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if not check_postgresql_connection():
        return False
    
    # –®–∞–≥ 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    if not apply_migrations():
        return False
    
    # –®–∞–≥ 5: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    import_data(exported_files)
    
    # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_superuser()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("        ‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print("\nüéØ –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ SQLite")
    print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –Ω–∞ PostgreSQL")
    print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —Å–æ–∑–¥–∞–Ω–∞")
    print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    print("   ‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py runserver")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://127.0.0.1:8000/")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω–∫—É: http://127.0.0.1:8000/admin/")
    print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: python check_migration.py")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()