#!/usr/bin/env python
"""
üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Django –ø—Ä–æ–µ–∫—Ç–∞
"""
import os
import sys
import django
from pathlib import Path
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

def clean_logs():
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...")
    logs_dir = BASE_DIR / 'logs'
    if logs_dir.exists():
        for log_file in logs_dir.glob('*.log'):
            if log_file.stat().st_size > 1024 * 1024:  # –ë–æ–ª—å—à–µ 1MB
                print(f"  –û—á–∏—â–∞–µ–º {log_file.name} ({log_file.stat().st_size // 1024}KB)")
                log_file.write_text('')

def clean_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...")
    try:
        from django.core.cache import cache
        cache.clear()
        print("  ‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω")
    except:
        print("  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à")

def clean_sessions():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π"""
    print("üîÑ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π...")
    try:
        from django.contrib.sessions.models import Session
        from django.utils import timezone
        from datetime import timedelta
        
        expired_sessions = Session.objects.filter(
            expire_date__lt=timezone.now() - timedelta(days=7)
        )
        count = expired_sessions.count()
        expired_sessions.delete()
        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π")
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π: {e}")

def clean_migrations():
    """–û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
    migrations_to_check = []
    
    for app_dir in BASE_DIR.iterdir():
        if app_dir.is_dir() and (app_dir / 'migrations').exists():
            migrations_dir = app_dir / 'migrations'
            migration_files = list(migrations_dir.glob('*.py'))
            if len(migration_files) > 10:  # –ú–Ω–æ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π
                migrations_to_check.append((app_dir.name, len(migration_files)))
    
    if migrations_to_check:
        print("  ‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∏–≥—Ä–∞—Ü–∏–π:")
        for app_name, count in migrations_to_check:
            print(f"    {app_name}: {count} –º–∏–≥—Ä–∞—Ü–∏–π")
        print("  üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å squashmigrations")

def clean_staticfiles():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üé® –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    staticfiles_dir = BASE_DIR / 'staticfiles'
    if staticfiles_dir.exists():
        size_before = sum(f.stat().st_size for f in staticfiles_dir.rglob('*') if f.is_file())
        shutil.rmtree(staticfiles_dir)
        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ {size_before // 1024}KB —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")

def optimize_database():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÉÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from django.db import connection
        
        # –î–ª—è SQLite
        if 'sqlite' in connection.settings_dict['ENGINE']:
            with connection.cursor() as cursor:
                cursor.execute("VACUUM;")
                cursor.execute("ANALYZE;")
            print("  ‚úÖ SQLite –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        from django.contrib.auth.models import User
        from django.contrib.sessions.models import Session
        
        users_count = User.objects.count()
        sessions_count = Session.objects.count()
        
        print(f"  üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"  üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {sessions_count}")
        
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def check_performance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
    db_file = BASE_DIR / 'db.sqlite3'
    if db_file.exists():
        size_mb = db_file.stat().st_size / (1024 * 1024)
        print(f"  üìÅ –†–∞–∑–º–µ—Ä –ë–î: {size_mb:.2f}MB")
        
        if size_mb > 10:
            print("  ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–∞—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    media_dir = BASE_DIR / 'media'
    if media_dir.exists():
        media_size = sum(f.stat().st_size for f in media_dir.rglob('*') if f.is_file())
        print(f"  üìÅ –†–∞–∑–º–µ—Ä –º–µ–¥–∏–∞: {media_size / (1024 * 1024):.2f}MB")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é Django –ø—Ä–æ–µ–∫—Ç–∞...")
    print("=" * 50)
    
    clean_logs()
    clean_cache()
    clean_sessions()
    clean_migrations()
    clean_staticfiles()
    optimize_database()
    check_performance()
    
    print("=" * 50)
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env.lightweight –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("3. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("4. –û—Ç–∫–ª—é—á–∏—Ç–µ DEBUG –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")

if __name__ == "__main__":
    main()
