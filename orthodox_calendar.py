#!/usr/bin/env python
"""
–ú–æ–¥–µ–ª—å –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
import sys
import django
from datetime import datetime, date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.db import models
from django.utils import timezone

class OrthodoxEvent(models.Model):
    """–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è"""
    
    EVENT_TYPES = [
        ('great_feast', '–í–µ–ª–∏–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫'),
        ('major_feast', '–ë–æ–ª—å—à–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫'), 
        ('minor_feast', '–ú–∞–ª—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫'),
        ('fast', '–ü–æ—Å—Ç'),
        ('fast_day', '–ü–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å'),
        ('memorial', '–ü–æ–º–∏–Ω–æ–≤–µ–Ω–∏–µ'),
        ('saint', '–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ'),
        ('icon', '–ò–∫–æ–Ω–∞'),
    ]
    
    title = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    event_type = models.CharField(max_length=20, choices=EVENT_TYPES, verbose_name="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è")
    
    # –î–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
    month = models.IntegerField(verbose_name="–ú–µ—Å—è—Ü")
    day = models.IntegerField(verbose_name="–î–µ–Ω—å")
    year = models.IntegerField(null=True, blank=True, verbose_name="–ì–æ–¥ (–µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)")
    
    # –°—Ç–∞—Ä—ã–π/–Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
    is_old_style = models.BooleanField(default=False, verbose_name="–ü–æ —Å—Ç–∞—Ä–æ–º—É —Å—Ç–∏–ª—é")
    
    # –ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–ü–∞—Å—Ö–∞ –∏ —Ç.–¥.)
    is_movable = models.BooleanField(default=False, verbose_name="–ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫")
    easter_offset = models.IntegerField(null=True, blank=True, verbose_name="–°–¥–≤–∏–≥ –æ—Ç –ü–∞—Å—Ö–∏ (–¥–Ω–∏)")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    icon_url = models.URLField(blank=True, verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∫–æ–Ω—É")
    reading_url = models.URLField(blank=True, verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏—è")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
        verbose_name_plural = "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
        ordering = ['month', 'day']
    
    def __str__(self):
        return f"{self.day}.{self.month} - {self.title}"

# –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
ORTHODOX_EVENTS = [
    # –í–µ–ª–∏–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    {'title': '–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ', 'month': 1, 'day': 7, 'event_type': 'great_feast'},
    {'title': '–ö—Ä–µ—â–µ–Ω–∏–µ –ì–æ—Å–ø–æ–¥–Ω–µ', 'month': 1, 'day': 19, 'event_type': 'great_feast'},
    {'title': '–°—Ä–µ—Ç–µ–Ω–∏–µ –ì–æ—Å–ø–æ–¥–Ω–µ', 'month': 2, 'day': 15, 'event_type': 'great_feast'},
    {'title': '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω–∏–µ', 'month': 4, 'day': 7, 'event_type': 'great_feast'},
    {'title': '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ì–æ—Å–ø–æ–¥–Ω–µ', 'month': 8, 'day': 19, 'event_type': 'great_feast'},
    {'title': '–£—Å–ø–µ–Ω–∏–µ –ü—Ä–µ—Å–≤—è—Ç–æ–π –ë–æ–≥–æ—Ä–æ–¥–∏—Ü—ã', 'month': 8, 'day': 28, 'event_type': 'great_feast'},
    {'title': '–†–æ–∂–¥–µ—Å—Ç–≤–æ –ü—Ä–µ—Å–≤—è—Ç–æ–π –ë–æ–≥–æ—Ä–æ–¥–∏—Ü—ã', 'month': 9, 'day': 21, 'event_type': 'great_feast'},
    {'title': '–í–æ–∑–¥–≤–∏–∂–µ–Ω–∏–µ –ö—Ä–µ—Å—Ç–∞ –ì–æ—Å–ø–æ–¥–Ω—è', 'month': 9, 'day': 27, 'event_type': 'great_feast'},
    {'title': '–í–≤–µ–¥–µ–Ω–∏–µ –≤–æ —Ö—Ä–∞–º –ü—Ä–µ—Å–≤—è—Ç–æ–π –ë–æ–≥–æ—Ä–æ–¥–∏—Ü—ã', 'month': 12, 'day': 4, 'event_type': 'great_feast'},
    
    # –ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –ü–∞—Å—Ö–∏)
    {'title': '–ü–∞—Å—Ö–∞', 'is_movable': True, 'easter_offset': 0, 'event_type': 'great_feast'},
    {'title': '–í—Ö–æ–¥ –ì–æ—Å–ø–æ–¥–µ–Ω—å –≤ –ò–µ—Ä—É—Å–∞–ª–∏–º', 'is_movable': True, 'easter_offset': -7, 'event_type': 'great_feast'},
    {'title': '–í–æ–∑–Ω–µ—Å–µ–Ω–∏–µ –ì–æ—Å–ø–æ–¥–Ω–µ', 'is_movable': True, 'easter_offset': 39, 'event_type': 'great_feast'},
    {'title': '–î–µ–Ω—å –°–≤—è—Ç–æ–π –¢—Ä–æ–∏—Ü—ã', 'is_movable': True, 'easter_offset': 49, 'event_type': 'great_feast'},
    
    # –ü–æ—Å—Ç—ã
    {'title': '–ù–∞—á–∞–ª–æ –í–µ–ª–∏–∫–æ–≥–æ –ø–æ—Å—Ç–∞', 'is_movable': True, 'easter_offset': -48, 'event_type': 'fast'},
    {'title': '–ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç', 'is_movable': True, 'easter_offset': 57, 'event_type': 'fast'},
    {'title': '–£—Å–ø–µ–Ω—Å–∫–∏–π –ø–æ—Å—Ç', 'month': 8, 'day': 14, 'event_type': 'fast'},
    {'title': '–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –ø–æ—Å—Ç', 'month': 11, 'day': 28, 'event_type': 'fast'},
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–≤—è—Ç—ã–µ
    {'title': '–î–µ–Ω—å —Å–≤—è—Ç–∏—Ç–µ–ª—è –ù–∏–∫–æ–ª–∞—è –ß—É–¥–æ—Ç–≤–æ—Ä—Ü–∞', 'month': 12, 'day': 19, 'event_type': 'saint'},
    {'title': '–î–µ–Ω—å —Å–≤—è—Ç–æ–π –≤–µ–ª–∏–∫–æ–º—É—á–µ–Ω–∏—Ü—ã –í–∞—Ä–≤–∞—Ä—ã', 'month': 12, 'day': 17, 'event_type': 'saint'},
    {'title': '–î–µ–Ω—å –ø—Ä–µ–ø–æ–¥–æ–±–Ω–æ–≥–æ –°–µ—Ä–≥–∏—è –†–∞–¥–æ–Ω–µ–∂—Å–∫–æ–≥–æ', 'month': 10, 'day': 8, 'event_type': 'saint'},
    {'title': '–î–µ–Ω—å —Å–≤—è—Ç—ã—Ö –ü–µ—Ç—Ä–∞ –∏ –§–µ–≤—Ä–æ–Ω–∏–∏', 'month': 7, 'day': 8, 'event_type': 'saint'},
    
    # –ü–æ—Å—Ç–Ω—ã–µ –¥–Ω–∏
    {'title': '–°—Ä–µ–¥–∞ (–ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å)', 'event_type': 'fast_day'},
    {'title': '–ü—è—Ç–Ω–∏—Ü–∞ (–ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å)', 'event_type': 'fast_day'},
]

def calculate_easter(year):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ü–∞—Å—Ö–∏ –ø–æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    # –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–π –ü–∞—Å—Ö–∏
    a = year % 19
    b = year % 4
    c = year % 7
    d = (19 * a + 15) % 30
    e = (2 * b + 4 * c + 6 * d + 6) % 7
    
    if d + e < 10:
        day = d + e + 22
        month = 3
    else:
        day = d + e - 9
        month = 4
    
    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–∏–ª—è (+13 –¥–Ω–µ–π)
    easter_date = date(year, month, day)
    # –î–æ–±–∞–≤–ª—è–µ–º 13 –¥–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
    from datetime import timedelta
    easter_date += timedelta(days=13)
    
    return easter_date

def get_orthodox_events_for_date(target_date):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    events = []
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    for event_data in ORTHODOX_EVENTS:
        if not event_data.get('is_movable', False):
            if (event_data.get('month') == target_date.month and 
                event_data.get('day') == target_date.day):
                events.append(event_data)
    
    # –ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    easter_date = calculate_easter(target_date.year)
    for event_data in ORTHODOX_EVENTS:
        if event_data.get('is_movable', False):
            offset = event_data.get('easter_offset', 0)
            event_date = easter_date + timedelta(days=offset)
            if event_date == target_date:
                events.append(event_data)
    
    return events

def create_orthodox_calendar():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    print("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
    
    created_count = 0
    
    for event_data in ORTHODOX_EVENTS:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è—â–∏–π –ª–∏ —ç—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫
        if event_data.get('is_movable', False):
            event, created = OrthodoxEvent.objects.get_or_create(
                title=event_data['title'],
                defaults={
                    'event_type': event_data['event_type'],
                    'is_movable': True,
                    'easter_offset': event_data.get('easter_offset', 0),
                    'month': 1,  # –ó–∞–≥–ª—É—à–∫–∞
                    'day': 1,    # –ó–∞–≥–ª—É—à–∫–∞
                }
            )
        else:
            event, created = OrthodoxEvent.objects.get_or_create(
                title=event_data['title'],
                month=event_data.get('month', 1),
                day=event_data.get('day', 1),
                defaults={
                    'event_type': event_data['event_type'],
                    'is_movable': False,
                }
            )
        
        if created:
            created_count += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {event.title}")
        else:
            print(f"üìÖ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {event.title}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π")
    print(f"üìä –í—Å–µ–≥–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {OrthodoxEvent.objects.count()} —Å–æ–±—ã—Ç–∏–π")

if __name__ == '__main__':
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ü–∞—Å—Ö–∏
    print(f"ü•ö –ü–∞—Å—Ö–∞ 2024: {calculate_easter(2024)}")
    print(f"ü•ö –ü–∞—Å—Ö–∞ 2025: {calculate_easter(2025)}")
    
    # –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    today_events = get_orthodox_events_for_date(today)
    print(f"\nüìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ {today}: {len(today_events)}")
    for event in today_events:
        print(f"  - {event['title']} ({event['event_type']})")
    
    print("‚ú® –ì–æ—Ç–æ–≤–æ!")
