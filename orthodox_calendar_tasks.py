#!/usr/bin/env python
"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
"""

from celery import shared_task
from datetime import datetime, date, timedelta
from django.contrib.auth import get_user_model
from django.utils import timezone

User = get_user_model()

@shared_task
def send_orthodox_calendar_notifications():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""
    
    try:
        from orthodox_calendar_service import OrthodoxCalendarService
        from pwa.models import UserNotificationSettings, UserNotificationSubscription, NotificationCategory
        
        print("üìÖ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        today = date.today()
        tomorrow = today + timedelta(days=1)
        
        calendar_service = OrthodoxCalendarService()
        
        # –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_events = calendar_service.get_events_for_date(today)
        tomorrow_events = calendar_service.get_events_for_date(tomorrow)
        
        if not today_events and not tomorrow_events:
            print("üìñ –ù–µ—Ç –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        try:
            calendar_category = NotificationCategory.objects.get(name='orthodox_calendar')
        except NotificationCategory.DoesNotExist:
            print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è 'orthodox_calendar' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        subscriptions = UserNotificationSubscription.objects.filter(
            category=calendar_category,
            enabled=True
        ).select_related('user', 'user__notification_settings')
        
        notifications_sent = 0
        
        for subscription in subscriptions:
            user = subscription.user
            user_settings = getattr(user, 'notification_settings', None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not user_settings or not user_settings.notifications_enabled:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            if user_settings.is_quiet_time_now():
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            current_weekday = timezone.now().weekday()
            if not user_settings.get_weekday_setting(current_weekday):
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_parts = []
            
            if today_events:
                message_parts.append("üïäÔ∏è –°–µ–≥–æ–¥–Ω—è:")
                for event in today_events:
                    message_parts.append(f"‚Ä¢ {event.get('title', '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ')}")
            
            if tomorrow_events:
                if message_parts:
                    message_parts.append("")
                message_parts.append("üìÖ –ó–∞–≤—Ç—Ä–∞:")
                for event in tomorrow_events:
                    message_parts.append(f"‚Ä¢ {event.get('title', '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ')}")
            
            if message_parts:
                message = "\n".join(message_parts)
                title = "‚õ™ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                success = send_push_notification_to_user(
                    user=user,
                    title=title,
                    message=message,
                    category='orthodox_calendar'
                )
                
                if success:
                    notifications_sent += 1
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.username}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {user.username}")
        
        print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
        return notifications_sent
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return 0

@shared_task  
def send_bedtime_story_reminders():
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫–∞–∑–∫–∞—Ö –Ω–∞ –Ω–æ—á—å"""
    
    try:
        from pwa.models import UserNotificationSettings, UserNotificationSubscription, NotificationCategory
        
        print("üåô –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–∫–∞–∑–∫–∞—Ö –Ω–∞ –Ω–æ—á—å...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–∫–∞–∑–æ–∫ –Ω–∞ –Ω–æ—á—å
        try:
            bedtime_category = NotificationCategory.objects.get(name='bedtime_stories')
        except NotificationCategory.DoesNotExist:
            print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è 'bedtime_stories' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–µ—Ç—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º
        subscriptions = UserNotificationSubscription.objects.filter(
            category=bedtime_category,
            enabled=True,
            user__notification_settings__child_mode=True
        ).select_related('user', 'user__notification_settings')
        
        notifications_sent = 0
        current_time = timezone.now().time()
        
        for subscription in subscriptions:
            user = subscription.user
            user_settings = user.notification_settings
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–∫–∞–∑–∫–∏ (¬±30 –º–∏–Ω—É—Ç)
            bedtime = user_settings.child_bedtime
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            time_diff = abs(
                (current_time.hour * 60 + current_time.minute) - 
                (bedtime.hour * 60 + bedtime.minute)
            )
            
            if time_diff <= 30:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 30 –º–∏–Ω—É—Ç
                title = "üåô –í—Ä–µ–º—è —Å–∫–∞–∑–∫–∏!"
                message = "–ü–æ—Ä–∞ —á–∏—Ç–∞—Ç—å –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º. –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–∞–∑–æ–∫!"
                
                success = send_push_notification_to_user(
                    user=user,
                    title=title,
                    message=message,
                    category='bedtime_stories'
                )
                
                if success:
                    notifications_sent += 1
                    print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.username}")
        
        print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–∫–∞–∑–∫–∞—Ö")
        return notifications_sent
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ —Å–∫–∞–∑–∫–∞—Ö: {e}")
        return 0

def send_push_notification_to_user(user, title, message, category):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    try:
        from pwa.models import PushSubscription
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ push-–ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = PushSubscription.objects.filter(
            user=user,
            is_active=True
        )
        
        if not subscriptions.exists():
            return False
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        print(f"üì± PUSH: {title} ‚Üí {user.username}")
        print(f"üí¨ {message}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push: {e}")
        return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –¥–ª—è celery beat
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'orthodox-calendar-morning': {
        'task': 'orthodox_calendar_tasks.send_orthodox_calendar_notifications',
        'schedule': crontab(hour=8, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
    },
    'bedtime-stories-evening': {
        'task': 'orthodox_calendar_tasks.send_bedtime_story_reminders', 
        'schedule': crontab(hour=20, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
    },
}

if __name__ == '__main__':
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
    print("üìÖ –¢–µ—Å—Ç –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
    send_orthodox_calendar_notifications()
    print("\nüåô –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–∫–∞–∑–∫–∞—Ö:")
    send_bedtime_story_reminders()
