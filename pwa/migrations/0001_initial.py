# Generated by Django 4.2.7 on 2025-08-19 00:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PWAInstallEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_agent', models.TextField(help_text='User-Agent при установке')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP адрес пользователя', null=True)),
                ('installed_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время установки')),
                ('platform', models.CharField(blank=True, help_text='Платформа (Android, iOS, Desktop)', max_length=50)),
                ('browser', models.CharField(blank=True, help_text='Браузер пользователя', max_length=50)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pwa_installs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Установка PWA',
                'verbose_name_plural': 'Установки PWA',
            },
        ),
        migrations.CreateModel(
            name='PWAAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('event_type', models.CharField(choices=[('install_prompt_shown', 'Показ промпта установки'), ('install_prompt_accepted', 'Принятие установки'), ('install_prompt_dismissed', 'Отклонение установки'), ('offline_usage', 'Использование в офлайн'), ('push_permission_granted', 'Разрешение push-уведомлений'), ('push_permission_denied', 'Отказ от push-уведомлений'), ('background_sync', 'Фоновая синхронизация'), ('cache_hit', 'Попадание в кеш'), ('cache_miss', 'Промах кеша')], max_length=30)),
                ('event_data', models.JSONField(blank=True, default=dict, help_text='Дополнительные данные события')),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pwa_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'PWA аналитика',
                'verbose_name_plural': 'PWA аналитика',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OfflineAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, help_text='Ключ сессии для анонимных пользователей', max_length=40, null=True)),
                ('action_type', models.CharField(choices=[('playlist_create', 'Создание плейлиста'), ('playlist_add', 'Добавление в плейлист'), ('favorite_add', 'Добавление в избранное'), ('favorite_remove', 'Удаление из избранного'), ('cart_add', 'Добавление в корзину'), ('cart_remove', 'Удаление из корзины'), ('book_download', 'Скачивание книги'), ('story_view', 'Просмотр рассказа')], help_text='Тип действия', max_length=20)),
                ('content_type', models.CharField(help_text='Тип контента (story, book, fairy_tale)', max_length=20)),
                ('object_id', models.PositiveIntegerField(help_text='ID объекта')),
                ('action_data', models.JSONField(blank=True, default=dict, help_text='Дополнительные данные действия')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата создания действия')),
                ('is_synced', models.BooleanField(default=False, help_text='Синхронизировано ли действие')),
                ('synced_at', models.DateTimeField(blank=True, help_text='Дата синхронизации', null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='offline_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Офлайн действие',
                'verbose_name_plural': 'Офлайн действия',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PushSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.URLField(help_text='URL endpoint для push-уведомлений', max_length=500)),
                ('p256dh_key', models.TextField(help_text='Ключ p256dh для шифрования')),
                ('auth_key', models.TextField(help_text='Ключ auth для аутентификации')),
                ('user_agent', models.TextField(blank=True, help_text='User-Agent браузера')),
                ('is_active', models.BooleanField(default=True, help_text='Активна ли подписка')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата создания подписки')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата последнего обновления')),
                ('user', models.ForeignKey(blank=True, help_text='Пользователь (может быть null для анонимных подписок)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='push_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Push-подписка',
                'verbose_name_plural': 'Push-подписки',
                'unique_together': {('user', 'endpoint')},
            },
        ),
        migrations.CreateModel(
            name='CachedContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('story', 'Рассказ'), ('book', 'Книга'), ('fairy_tale', 'Сказка'), ('playlist', 'Плейлист'), ('page', 'Страница')], max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('cache_key', models.CharField(help_text='Ключ кеша', max_length=255)),
                ('cache_size', models.PositiveIntegerField(help_text='Размер кешированных данных в байтах')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_accessed', models.DateTimeField(default=django.utils.timezone.now)),
                ('access_count', models.PositiveIntegerField(default=1, help_text='Количество обращений к кешу')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cached_content', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Кешированный контент',
                'verbose_name_plural': 'Кешированный контент',
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
    ]
