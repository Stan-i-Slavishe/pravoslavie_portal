# PWA Models for –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª

from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.core.validators import MinValueValidator, MaxValueValidator

User = get_user_model()

class PushSubscription(models.Model):
    """–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='push_subscriptions')
    endpoint = models.URLField(verbose_name="Endpoint")
    p256dh_key = models.TextField(verbose_name="P256DH –∫–ª—é—á")
    auth_key = models.TextField(verbose_name="Auth –∫–ª—é—á")
    user_agent = models.TextField(blank=True, verbose_name="User Agent")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'endpoint']
        verbose_name = "Push-–ø–æ–¥–ø–∏—Å–∫–∞"
        verbose_name_plural = "Push-–ø–æ–¥–ø–∏—Å–∫–∏"
        
    def __str__(self):
        return f"{self.user.username} - {self.endpoint[:50]}..."

class PWAInstallEvent(models.Model):
    """–°–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    platform = models.CharField(max_length=50, verbose_name="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞")
    browser = models.CharField(max_length=50, verbose_name="–ë—Ä–∞—É–∑–µ—Ä")
    user_agent = models.TextField(verbose_name="User Agent")
    installed_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–°–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA"
        verbose_name_plural = "–°–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA"
        
    def __str__(self):
        return f"{self.user or 'Anonymous'} - {self.platform} - {self.installed_at}"

class OfflineAction(models.Model):
    """–î–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω"""
    ACTION_CHOICES = [
        ('create_playlist', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞'),
        ('add_to_playlist', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç'),
        ('toggle_favorite', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
        ('add_to_cart', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É'),
        ('remove_from_cart', '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    action_type = models.CharField(max_length=50, choices=ACTION_CHOICES)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    action_data = models.JSONField(default=dict)
    is_synced = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    synced_at = models.DateTimeField(null=True, blank=True)
    
    def mark_synced(self):
        self.is_synced = True
        self.synced_at = timezone.now()
        self.save()
    
    class Meta:
        verbose_name = "–û—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏–µ"
        verbose_name_plural = "–û—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏—è"
        
    def __str__(self):
        return f"{self.user.username} - {self.get_action_type_display()}"

class PWAAnalytics(models.Model):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ PWA"""
    EVENT_CHOICES = [
        ('install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'),
        ('uninstall', '–£–¥–∞–ª–µ–Ω–∏–µ'),
        ('offline_usage', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω'),
        ('sync_performed', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'),
        ('notification_sent', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'),
        ('notification_clicked', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–∫–Ω—É—Ç–æ'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    event_type = models.CharField(max_length=50, choices=EVENT_CHOICES)
    event_data = models.JSONField(default=dict)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "PWA –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        verbose_name_plural = "PWA –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        
    def __str__(self):
        return f"{self.user or 'Anonymous'} - {self.get_event_type_display()}"

class CachedContent(models.Model):
    """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞"""
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    cache_key = models.CharField(max_length=255)
    cache_size = models.PositiveIntegerField(default=0)  # –≤ –±–∞–π—Ç–∞—Ö
    access_count = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    last_accessed = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'cache_key']
        verbose_name = "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        verbose_name_plural = "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        
    def __str__(self):
        return f"{self.user.username} - {self.cache_key}"

# =============================================================================
# üîî –ù–û–í–´–ï –ú–û–î–ï–õ–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# =============================================================================

class NotificationCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    CATEGORY_CHOICES = [
        ('bedtime_stories', 'üåô –°–∫–∞–∑–∫–∏ –Ω–∞ –Ω–æ—á—å'),
        ('orthodox_calendar', '‚õ™ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
        ('new_content', 'üìö –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'),
        ('fairy_tales', 'üßö –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏'),
        ('audio_content', 'üéµ –ê—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–Ω—Ç'),
        ('book_releases', 'üìñ –ù–æ–≤—ã–µ –∫–Ω–∏–≥–∏'),
        ('special_events', 'üéâ –û—Å–æ–±—ã–µ —Å–æ–±—ã—Ç–∏—è'),
        ('daily_wisdom', 'üí≠ –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è'),
    ]
    
    name = models.CharField(max_length=50, choices=CATEGORY_CHOICES, unique=True, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    title = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    icon = models.CharField(max_length=10, default="üîî", verbose_name="–ò–∫–æ–Ω–∫–∞")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")
    default_enabled = models.BooleanField(default=False, verbose_name="–í–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        
    def __str__(self):
        return f"{self.icon} {self.title}"

class UserNotificationSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='notification_settings')
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    notifications_enabled = models.BooleanField(default=True, verbose_name="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    quiet_hours_enabled = models.BooleanField(default=True, verbose_name="–¢–∏—Ö–∏–µ —á–∞—Å—ã")
    quiet_start = models.TimeField(default='22:00', verbose_name="–ù–∞—á–∞–ª–æ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤")
    quiet_end = models.TimeField(default='08:00', verbose_name="–ö–æ–Ω–µ—Ü —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    notify_monday = models.BooleanField(default=True)
    notify_tuesday = models.BooleanField(default=True) 
    notify_wednesday = models.BooleanField(default=True)
    notify_thursday = models.BooleanField(default=True)
    notify_friday = models.BooleanField(default=True)
    notify_saturday = models.BooleanField(default=True)
    notify_sunday = models.BooleanField(default=True)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π
    child_mode = models.BooleanField(default=False, verbose_name="–î–µ—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º")
    child_bedtime = models.TimeField(default='20:00', verbose_name="–í—Ä–µ–º—è —Å–∫–∞–∑–∫–∏")
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    timezone = models.CharField(max_length=50, default='Europe/Moscow', verbose_name="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
    def __str__(self):
        return f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {self.user.username}"
    
    def get_weekday_setting(self, weekday):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"""
        weekday_fields = [
            'notify_monday', 'notify_tuesday', 'notify_wednesday',
            'notify_thursday', 'notify_friday', 'notify_saturday', 'notify_sunday'
        ]
        return getattr(self, weekday_fields[weekday])
    
    def is_quiet_time_now(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–µ–π—á–∞—Å –ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã"""
        if not self.quiet_hours_enabled:
            return False
            
        now = timezone.now().time()
        
        if self.quiet_start <= self.quiet_end:
            # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 22:00 - 08:00
            return self.quiet_start <= now <= self.quiet_end
        else:
            # –ß–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 22:00 - 08:00
            return now >= self.quiet_start or now <= self.quiet_end

class UserNotificationSubscription(models.Model):
    """–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notification_subscriptions')
    category = models.ForeignKey(NotificationCategory, on_delete=models.CASCADE)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    enabled = models.BooleanField(default=True, verbose_name="–í–∫–ª—é—á–µ–Ω–∞")
    frequency = models.CharField(max_length=20, choices=[
        ('immediately', '–°—Ä–∞–∑—É'),
        ('daily', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'),
        ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'),
        ('custom', '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è'),
    ], default='daily', verbose_name="–ß–∞—Å—Ç–æ—Ç–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    preferred_time = models.TimeField(null=True, blank=True, verbose_name="–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è")
    max_daily_count = models.PositiveIntegerField(
        default=3, 
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        verbose_name="–ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å"
    )
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    priority = models.IntegerField(
        default=5,
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        verbose_name="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10)"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'category']
        verbose_name = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        verbose_name_plural = "–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
    def __str__(self):
        return f"{self.user.username} ‚Üí {self.category.title}"
