# PWA Models for –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª

from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.core.validators import MinValueValidator, MaxValueValidator

User = get_user_model()

class PushSubscription(models.Model):
    """–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='push_subscriptions')
    endpoint = models.URLField(verbose_name="Endpoint")
    p256dh_key = models.TextField(verbose_name="P256DH –∫–ª—é—á")
    auth_key = models.TextField(verbose_name="Auth –∫–ª—é—á")
    user_agent = models.TextField(blank=True, verbose_name="User Agent")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'endpoint']
        verbose_name = "Push-–ø–æ–¥–ø–∏—Å–∫–∞"
        verbose_name_plural = "Push-–ø–æ–¥–ø–∏—Å–∫–∏"
        
    def __str__(self):
        return f"{self.user.username} - {self.endpoint[:50]}..."

class PWAInstallEvent(models.Model):
    """–°–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    platform = models.CharField(max_length=50, verbose_name="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞")
    browser = models.CharField(max_length=50, verbose_name="–ë—Ä–∞—É–∑–µ—Ä")
    user_agent = models.TextField(verbose_name="User Agent")
    installed_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "–°–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA"
        verbose_name_plural = "–°–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA"
        
    def __str__(self):
        return f"{self.user or 'Anonymous'} - {self.platform} - {self.installed_at}"

class OfflineAction(models.Model):
    """–î–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ñ–ª–∞–π–Ω"""
    ACTION_CHOICES = [
        ('create_playlist', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞'),
        ('add_to_playlist', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç'),
        ('toggle_favorite', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
        ('add_to_cart', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É'),
        ('remove_from_cart', '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    action_type = models.CharField(max_length=50, choices=ACTION_CHOICES)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    action_data = models.JSONField(default=dict)
    is_synced = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    synced_at = models.DateTimeField(null=True, blank=True)
    
    def mark_synced(self):
        self.is_synced = True
        self.synced_at = timezone.now()
        self.save()
    
    class Meta:
        verbose_name = "–û—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏–µ"
        verbose_name_plural = "–û—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏—è"
        
    def __str__(self):
        return f"{self.user.username} - {self.get_action_type_display()}"

class PWAAnalytics(models.Model):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ PWA"""
    EVENT_CHOICES = [
        ('install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞'),
        ('uninstall', '–£–¥–∞–ª–µ–Ω–∏–µ'),
        ('offline_usage', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω'),
        ('sync_performed', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'),
        ('notification_sent', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'),
        ('notification_clicked', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–∫–Ω—É—Ç–æ'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    event_type = models.CharField(max_length=50, choices=EVENT_CHOICES)
    event_data = models.JSONField(default=dict)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "PWA –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        verbose_name_plural = "PWA –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        
    def __str__(self):
        return f"{self.user or 'Anonymous'} - {self.get_event_type_display()}"

class CachedContent(models.Model):
    """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞"""
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    cache_key = models.CharField(max_length=255)
    cache_size = models.PositiveIntegerField(default=0)  # –≤ –±–∞–π—Ç–∞—Ö
    access_count = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    last_accessed = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'cache_key']
        verbose_name = "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        verbose_name_plural = "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        
    def __str__(self):
        return f"{self.user.username} - {self.cache_key}"

# =============================================================================
# üîî –ù–û–í–´–ï –ú–û–î–ï–õ–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# =============================================================================

class NotificationCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    CATEGORY_CHOICES = [
        ('bedtime_stories', 'üåô –°–∫–∞–∑–∫–∏ –Ω–∞ –Ω–æ—á—å'),
        ('orthodox_calendar', '‚õ™ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'),
        ('new_content', 'üìö –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'),
        ('fairy_tales', 'üßö –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏'),
        ('audio_content', 'üéµ –ê—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–Ω—Ç'),
        ('book_releases', 'üìñ –ù–æ–≤—ã–µ –∫–Ω–∏–≥–∏'),
        ('special_events', 'üéâ –û—Å–æ–±—ã–µ —Å–æ–±—ã—Ç–∏—è'),
        ('daily_wisdom', 'üí≠ –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è'),
    ]
    
    name = models.CharField(max_length=50, choices=CATEGORY_CHOICES, unique=True, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    title = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    icon = models.CharField(max_length=10, default="üîî", verbose_name="–ò–∫–æ–Ω–∫–∞")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")
    default_enabled = models.BooleanField(default=False, verbose_name="–í–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        
    def __str__(self):
        return f"{self.icon} {self.title}"

class UserNotificationSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='notification_settings')
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    notifications_enabled = models.BooleanField(default=True, verbose_name="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    quiet_hours_enabled = models.BooleanField(default=True, verbose_name="–¢–∏—Ö–∏–µ —á–∞—Å—ã")
    quiet_start = models.TimeField(default='22:00', verbose_name="–ù–∞—á–∞–ª–æ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤")
    quiet_end = models.TimeField(default='08:00', verbose_name="–ö–æ–Ω–µ—Ü —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    notify_monday = models.BooleanField(default=True)
    notify_tuesday = models.BooleanField(default=True) 
    notify_wednesday = models.BooleanField(default=True)
    notify_thursday = models.BooleanField(default=True)
    notify_friday = models.BooleanField(default=True)
    notify_saturday = models.BooleanField(default=True)
    notify_sunday = models.BooleanField(default=True)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π
    child_mode = models.BooleanField(default=False, verbose_name="–î–µ—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º")
    child_bedtime = models.TimeField(default='20:00', verbose_name="–í—Ä–µ–º—è —Å–∫–∞–∑–∫–∏")
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    timezone = models.CharField(max_length=50, default='Europe/Moscow', verbose_name="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
    def __str__(self):
        return f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {self.user.username}"
    
    def get_weekday_setting(self, weekday):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"""
        weekday_fields = [
            'notify_monday', 'notify_tuesday', 'notify_wednesday',
            'notify_thursday', 'notify_friday', 'notify_saturday', 'notify_sunday'
        ]
        return getattr(self, weekday_fields[weekday])
    
    def is_quiet_time_now(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–µ–π—á–∞—Å –ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã"""
        if not self.quiet_hours_enabled:
            return False
            
        now = timezone.now().time()
        
        if self.quiet_start <= self.quiet_end:
            # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 22:00 - 08:00
            return self.quiet_start <= now <= self.quiet_end
        else:
            # –ß–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 22:00 - 08:00
            return now >= self.quiet_start or now <= self.quiet_end

class UserNotificationSubscription(models.Model):
    """–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notification_subscriptions')
    category = models.ForeignKey(NotificationCategory, on_delete=models.CASCADE)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    enabled = models.BooleanField(default=True, verbose_name="–í–∫–ª—é—á–µ–Ω–∞")
    frequency = models.CharField(max_length=20, choices=[
        ('immediately', '–°—Ä–∞–∑—É'),
        ('daily', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'),
        ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'),
        ('custom', '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è'),
    ], default='daily', verbose_name="–ß–∞—Å—Ç–æ—Ç–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    preferred_time = models.TimeField(null=True, blank=True, verbose_name="–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è")
    max_daily_count = models.PositiveIntegerField(
        default=3, 
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        verbose_name="–ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å"
    )
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    priority = models.IntegerField(
        default=5,
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        verbose_name="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10)"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'category']
        verbose_name = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        verbose_name_plural = "–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
    def __str__(self):
        return f"{self.user.username} ‚Üí {self.category.title}"

class FastingPeriod(models.Model):
    """–ü–µ—Ä–∏–æ–¥—ã –ø–æ—Å—Ç–æ–≤ —Å –∏—Ö –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–ª—è –≤–µ—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    
    PERIOD_TYPES = [
        ('great_lent', '–í–µ–ª–∏–∫–∏–π –ø–æ—Å—Ç'),
        ('christmas_fast', '–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –ø–æ—Å—Ç'),
        ('assumption_fast', '–£—Å–ø–µ–Ω—Å–∫–∏–π –ø–æ—Å—Ç'),
        ('peter_paul_fast', '–ü–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç'),
        ('apostles_fast', '–ê–ø–æ—Å—Ç–æ–ª—å—Å–∫–∏–π –ø–æ—Å—Ç'),
        ('weekly_fast', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç (—Å—Ä/–ø—Ç)'),
        ('one_day_fast', '–û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç'),
    ]
    
    name = models.CharField(max_length=50, choices=PERIOD_TYPES, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    title = models.CharField(max_length=100, verbose_name="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    
    # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    start_month = models.IntegerField(null=True, blank=True, verbose_name="–ú–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞")
    start_day = models.IntegerField(null=True, blank=True, verbose_name="–î–µ–Ω—å –Ω–∞—á–∞–ª–∞")
    end_month = models.IntegerField(null=True, blank=True, verbose_name="–ú–µ—Å—è—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    end_day = models.IntegerField(null=True, blank=True, verbose_name="–î–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    
    # –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ü–∞—Å—Ö–∏)
    easter_start_offset = models.IntegerField(
        null=True, blank=True, 
        verbose_name="–ù–∞—á–∞–ª–æ –æ—Ç –ü–∞—Å—Ö–∏ (–¥–Ω–∏)",
        help_text="–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –¥–æ –ü–∞—Å—Ö–∏, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ - –ø–æ—Å–ª–µ"
    )
    easter_end_offset = models.IntegerField(
        null=True, blank=True,
        verbose_name="–ö–æ–Ω–µ—Ü –æ—Ç –ü–∞—Å—Ö–∏ (–¥–Ω–∏)"
    )
    
    # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (JSON)
    # –§–æ—Ä–º–∞—Ç: {"monday": "strict_fast", "tuesday": "light_fast", ...}
    fasting_rules = models.JSONField(
        default=dict, 
        verbose_name="–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞",
        help_text="–ü—Ä–∞–≤–∏–ª–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
    )
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    priority = models.IntegerField(
        default=1, 
        verbose_name="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
        help_text="–î–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏"
    )
    
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ü–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç–∞"
        verbose_name_plural = "–ü–µ—Ä–∏–æ–¥—ã –ø–æ—Å—Ç–æ–≤"
        ordering = ['-priority', 'name']
    
    def __str__(self):
        return self.title
    
    def is_active_for_date(self, target_date):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        if not self.is_active:
            return False
        
        year = target_date.year
        
        if self.easter_start_offset is not None:
            # –ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ü–∞—Å—Ö–∏)
            easter_date = OrthodoxEvent.calculate_easter(year)
            start_date = easter_date + timezone.timedelta(days=self.easter_start_offset)
            end_date = easter_date + timezone.timedelta(days=self.easter_end_offset)
        else:
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
            try:
                start_date = timezone.date(year, self.start_month, self.start_day)
                end_date = timezone.date(year, self.end_month, self.end_day)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π)
                if end_date < start_date:
                    if target_date >= start_date:
                        end_date = timezone.date(year + 1, self.end_month, self.end_day)
                    else:
                        start_date = timezone.date(year - 1, self.start_month, self.start_day)
            except ValueError:
                # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 29 —Ñ–µ–≤—Ä–∞–ª—è –≤ –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É)
                return False
        
        return start_date <= target_date <= end_date
    
    def get_fasting_type_for_weekday(self, weekday):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–æ—Å—Ç–∞ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"""
        weekday_names = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        weekday_name = weekday_names[weekday]
        return self.fasting_rules.get(weekday_name, 'no_fast')

class OrthodoxEvent(models.Model):
    """–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è"""
    
    EVENT_TYPES = [
        ('great_feast', '–í–µ–ª–∏–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫'),
        ('major_feast', '–ë–æ–ª—å—à–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫'), 
        ('minor_feast', '–ú–∞–ª—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫'),
        ('fast_start', '–ù–∞—á–∞–ª–æ –ø–æ—Å—Ç–∞'),
        ('fast_end', '–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ—Å—Ç–∞'),
        ('special_day', '–û—Å–æ–±—ã–π –¥–µ–Ω—å'),
        ('memorial', '–ü–æ–º–∏–Ω–æ–≤–µ–Ω–∏–µ'),
        ('saint', '–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ'),
        ('icon', '–ò–∫–æ–Ω–∞'),
    ]
    
    title = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    event_type = models.CharField(max_length=20, choices=EVENT_TYPES, verbose_name="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è")
    
    # –î–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
    month = models.IntegerField(verbose_name="–ú–µ—Å—è—Ü")
    day = models.IntegerField(verbose_name="–î–µ–Ω—å")
    year = models.IntegerField(null=True, blank=True, verbose_name="–ì–æ–¥ (–µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)")
    
    # –°—Ç–∞—Ä—ã–π/–Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
    is_old_style = models.BooleanField(default=False, verbose_name="–ü–æ —Å—Ç–∞—Ä–æ–º—É —Å—Ç–∏–ª—é")
    
    # –ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–ü–∞—Å—Ö–∞ –∏ —Ç.–¥.)
    is_movable = models.BooleanField(default=False, verbose_name="–ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫")
    easter_offset = models.IntegerField(null=True, blank=True, verbose_name="–°–¥–≤–∏–≥ –æ—Ç –ü–∞—Å—Ö–∏ (–¥–Ω–∏)")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    icon_url = models.URLField(blank=True, verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∫–æ–Ω—É")
    reading_url = models.URLField(blank=True, verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏—è")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
        verbose_name_plural = "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
        ordering = ['month', 'day']
    
    def __str__(self):
        return f"{self.day}.{self.month} - {self.title}"
    
    def get_date_for_year(self, year):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞"""
        if self.is_movable:
            easter_date = self.calculate_easter(year)
            from datetime import timedelta
            return easter_date + timedelta(days=self.easter_offset or 0)
        else:
            from datetime import date
            return date(year, self.month, self.day)
    
    @staticmethod
    def calculate_easter(year):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ü–∞—Å—Ö–∏ –ø–æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        from datetime import date, timedelta
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–π –ü–∞—Å—Ö–∏
        a = year % 19
        b = year % 4
        c = year % 7
        d = (19 * a + 15) % 30
        e = (2 * b + 4 * c + 6 * d + 6) % 7
        
        if d + e < 10:
            day = d + e + 22
            month = 3
        else:
            day = d + e - 9
            month = 4
        
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–∏–ª—è (+13 –¥–Ω–µ–π)
        easter_date = date(year, month, day)
        easter_date += timedelta(days=13)
        
        return easter_date
    
    @classmethod
    def get_events_for_date(cls, target_date):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
        events = []
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        fixed_events = cls.objects.filter(
            is_movable=False,
            month=target_date.month,
            day=target_date.day
        )
        events.extend(fixed_events)
        
        # –ü–µ—Ä–µ—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        easter_date = cls.calculate_easter(target_date.year)
        movable_events = cls.objects.filter(is_movable=True)
        
        for event in movable_events:
            if event.easter_offset is not None:
                from datetime import timedelta
                event_date = easter_date + timedelta(days=event.easter_offset)
                if event_date == target_date:
                    events.append(event)
        
        return events

class DailyOrthodoxInfo(models.Model):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    
    FASTING_TYPES = [
        ('no_fast', '–ü–æ—Å—Ç–∞ –Ω–µ—Ç'),
        ('light_fast', '–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç'),
        ('strict_fast', '–°—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç'),
        ('dry_eating', '–°—É—Ö–æ—è–¥–µ–Ω–∏–µ'),
        ('with_oil', '–ü–æ—Å—Ç —Å –º–∞—Å–ª–æ–º'),
        ('with_fish', '–ú–æ–∂–Ω–æ —Ä—ã–±—É'),
        ('wine_oil', '–í–∏–Ω–æ –∏ –º–∞—Å–ª–æ'),
        ('complete_fast', '–ü–æ–ª–Ω–æ–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ'),
    ]
    
    # –î–∞—Ç–∞
    month = models.IntegerField(verbose_name="–ú–µ—Å—è—Ü")
    day = models.IntegerField(verbose_name="–î–µ–Ω—å")
    
    # –ü–æ—Å—Ç
    fasting_type = models.CharField(
        max_length=20, 
        choices=FASTING_TYPES,
        default='no_fast',
        verbose_name="–¢–∏–ø –ø–æ—Å—Ç–∞"
    )
    fasting_description = models.TextField(
        blank=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"
    )
    
    # –ß—Ç–æ –º–æ–∂–Ω–æ –µ—Å—Ç—å
    allowed_food = models.TextField(
        blank=True,
        verbose_name="–ß—Ç–æ –º–æ–∂–Ω–æ –µ—Å—Ç—å"
    )
    
    # –î—É—Ö–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    spiritual_note = models.TextField(
        blank=True,
        verbose_name="–î—É—Ö–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"
    )
    
    # –ß—Ç–µ–Ω–∏—è –¥–Ω—è
    gospel_reading = models.TextField(
        blank=True,
        verbose_name="–ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ"
    )
    epistle_reading = models.TextField(
        blank=True,
        verbose_name="–ê–ø–æ—Å—Ç–æ–ª—å—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        verbose_name_plural = "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        unique_together = ['month', 'day']
        ordering = ['month', 'day']
    
    def __str__(self):
        return f"{self.day:02d}.{self.month:02d} - {self.get_fasting_type_display()}"
    
    @classmethod
    def get_info_for_date(cls, target_date):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å –≤–µ—á–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        try:
            daily_info = cls.objects.get(
                month=target_date.month,
                day=target_date.day
            )
            # –î–µ–ª–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            from copy import deepcopy
            daily_info = deepcopy(daily_info)
        except cls.DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            daily_info = cls.get_default_info_for_date(target_date)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        daily_info = cls.apply_eternal_algorithm(daily_info, target_date)
        
        return daily_info
    
    @classmethod
    def apply_eternal_algorithm(cls, daily_info, target_date):
        """–í–µ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–Ω—è"""
        
        # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Å—Ç–Ω—ã–µ –¥–Ω–∏ (–æ–Ω–∏ –ù–ï –æ—Ç–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏)
        # 29 –∞–≤–≥—É—Å—Ç–∞ - –£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏ (—Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç)
        if target_date.month == 8 and target_date.day == 29:
            daily_info.fasting_type = 'strict_fast'
            daily_info.fasting_description = '–£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏ (—Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç)'
            daily_info.allowed_food = '–°—É—Ö–æ—è–¥–µ–Ω–∏–µ: —Ö–ª–µ–±, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏ (–±–µ–∑ –º–∞—Å–ª–∞)'
            daily_info.spiritual_note = '‚öîÔ∏è –£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏. –°—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –≤ –ø–∞–º—è—Ç—å –æ –º—É—á–µ–Ω–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—á–∏–Ω–µ —Å–≤—è—Ç–æ–≥–æ –ü—Ä–µ–¥—Ç–µ—á–∏. –û—Ä–µ—Ö–æ–≤—ã–π –°–ø–∞—Å –æ—Ç–º–µ—á–∞–µ—Ç—Å—è, –Ω–æ –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.'
            return daily_info
            
        # 11 —Å–µ–Ω—Ç—è–±—Ä—è - –£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏ (–ø–æ –Ω–æ–≤–æ–º—É —Å—Ç–∏–ª—é)
        if target_date.month == 9 and target_date.day == 11:
            daily_info.fasting_type = 'strict_fast'
            daily_info.fasting_description = '–£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏ (—Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç)'
            daily_info.allowed_food = '–°—É—Ö–æ—è–¥–µ–Ω–∏–µ: —Ö–ª–µ–±, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏ (–±–µ–∑ –º–∞—Å–ª–∞)'
            daily_info.spiritual_note = '‚öîÔ∏è –£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏. –°—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –≤ –ø–∞–º—è—Ç—å –æ –º—É—á–µ–Ω–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—á–∏–Ω–µ —Å–≤—è—Ç–æ–≥–æ –ü—Ä–µ–¥—Ç–µ—á–∏.'
            return daily_info
            
        # –ö—Ä–µ—Å—Ç–æ–≤–æ–∑–¥–≤–∏–∂–µ–Ω–∏–µ (27 —Å–µ–Ω—Ç—è–±—Ä—è) - —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç
        if target_date.month == 9 and target_date.day == 27:
            daily_info.fasting_type = 'strict_fast'
            daily_info.fasting_description = '–í–æ–∑–¥–≤–∏–∂–µ–Ω–∏–µ –ö—Ä–µ—Å—Ç–∞ –ì–æ—Å–ø–æ–¥–Ω—è (—Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç)'
            daily_info.allowed_food = '–°—É—Ö–æ—è–¥–µ–Ω–∏–µ: —Ö–ª–µ–±, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏ (–±–µ–∑ –º–∞—Å–ª–∞)'
            daily_info.spiritual_note = '‚úùÔ∏è –í–æ–∑–¥–≤–∏–∂–µ–Ω–∏–µ –ö—Ä–µ—Å—Ç–∞ –ì–æ—Å–ø–æ–¥–Ω—è. –°—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –≤ —á–µ—Å—Ç—å –æ–±—Ä–µ—Ç–µ–Ω–∏—è –∏ –≤–æ–∑–¥–≤–∏–∂–µ–Ω–∏—è –ñ–∏–≤–æ—Ç–≤–æ—Ä—è—â–µ–≥–æ –ö—Ä–µ—Å—Ç–∞.'
            return daily_info
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–ª–∏–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–æ—Ç–º–µ–Ω—è—é—Ç –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç, –Ω–æ –ù–ï —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Å—Ç–Ω—ã–µ –¥–Ω–∏)
        events = OrthodoxEvent.get_events_for_date(target_date)
        
        for event in events:
            if event.event_type in ['great_feast', 'major_feast']:
                # –í –≤–µ–ª–∏–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ—Å—Ç –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è (–∫—Ä–æ–º–µ —Å—Ç—Ä–æ–≥–∏—Ö –ø–æ—Å—Ç–Ω—ã—Ö –¥–Ω–µ–π –≤—ã—à–µ)
                daily_info.fasting_type = 'no_fast'
                daily_info.fasting_description = f'–í–µ–ª–∏–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫: {event.title}'
                daily_info.allowed_food = '–õ—é–±–∞—è –ø–∏—â–∞ (–ø—Ä–∞–∑–¥–Ω–∏–∫)'
                daily_info.spiritual_note = f'üéâ {event.title}! ' + (event.description or '–í–µ–ª–∏–∫–∏–π –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫.')
                return daily_info
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ—Å—Ç–æ–≤
        active_fasting_periods = cls.get_active_fasting_periods(target_date)
        
        if active_fasting_periods:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            main_fasting_period = max(active_fasting_periods, key=lambda p: p.priority)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
            weekday = target_date.weekday()
            fasting_type = main_fasting_period.get_fasting_type_for_weekday(weekday)
            
            if fasting_type != 'no_fast':
                daily_info.fasting_type = fasting_type
                daily_info.fasting_description = main_fasting_period.title
                daily_info.allowed_food = cls.get_allowed_food_for_fasting_type(fasting_type)
                daily_info.spiritual_note = main_fasting_period.description or f'–ü–µ—Ä–∏–æ–¥ {main_fasting_period.title.lower()}. –í—Ä–µ–º—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–∏—è.'
                return daily_info
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç–Ω—ã–µ –¥–Ω–∏
        weekday = target_date.weekday()
        if weekday in [2, 4]:  # –°—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –º–∞–ª—ã–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º
            minor_feast = any(event.event_type == 'minor_feast' for event in events)
            if not minor_feast:
                daily_info.fasting_type = 'light_fast'
                daily_info.fasting_description = '–ü–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å (—Å—Ä–µ–¥–∞/–ø—è—Ç–Ω–∏—Ü–∞)'
                daily_info.allowed_food = '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞, –º–æ–∂–Ω–æ –º–∞—Å–ª–æ'
                daily_info.spiritual_note = '–ü–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å. –í—Ä–µ–º—è –¥–ª—è –º–æ–ª–∏—Ç–≤—ã –∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è.'
                return daily_info
        
        # 4. –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if daily_info.fasting_type is None:
            daily_info.fasting_type = 'no_fast'
            daily_info.fasting_description = '–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å'
            daily_info.allowed_food = '–õ—é–±–∞—è –ø–∏—â–∞'
            daily_info.spiritual_note = '–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –ë–æ–≥–∞ –∑–∞ –≤—Å–µ –¥–∞—Ä—ã.'
        
        return daily_info
    
    @classmethod
    def get_active_fasting_periods(cls, target_date):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã"""
        active_periods = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ—Å—Ç–æ–≤
        try:
            for period in FastingPeriod.objects.filter(is_active=True):
                if period.is_active_for_date(target_date):
                    active_periods.append(period)
        except Exception as e:
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
        
        return active_periods
    
    @classmethod
    def get_allowed_food_for_fasting_type(cls, fasting_type):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –ø–∏—â–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞"""
        food_descriptions = {
            'no_fast': '–õ—é–±–∞—è –ø–∏—â–∞',
            'light_fast': '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞, –º–æ–∂–Ω–æ –º–∞—Å–ª–æ',
            'strict_fast': '–°—É—Ö–æ—è–¥–µ–Ω–∏–µ: —Ö–ª–µ–±, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏ (–±–µ–∑ –º–∞—Å–ª–∞)',
            'dry_eating': '–°—É—Ö–æ—è–¥–µ–Ω–∏–µ: —Ö–ª–µ–±, —Å—ã—Ä—ã–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏, –≤–æ–¥–∞',
            'with_oil': '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞ —Å –º–∞—Å–ª–æ–º',
            'with_fish': '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞, –º–æ–∂–Ω–æ —Ä—ã–±—É –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã',
            'wine_oil': '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞, –º–æ–∂–Ω–æ –≤–∏–Ω–æ –∏ –º–∞—Å–ª–æ',
            'complete_fast': '–ü–æ–ª–Ω–æ–µ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç –ø–∏—â–∏ –∏ –ø–∏—Ç—å—è',
        }
        return food_descriptions.get(fasting_type, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    
    @classmethod
    def get_default_info_for_date(cls, target_date):
        """–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–Ω—è"""
        
        weekday = target_date.weekday()
        
        # –°—Ä–µ–¥–∞ –∏ –ø—è—Ç–Ω–∏—Ü–∞ - –ø–æ—Å—Ç–Ω—ã–µ –¥–Ω–∏
        if weekday in [2, 4]:  # –°—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞
            return cls(
                month=target_date.month,
                day=target_date.day,
                fasting_type='light_fast',
                fasting_description='–ü–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å (—Å—Ä–µ–¥–∞/–ø—è—Ç–Ω–∏—Ü–∞)',
                allowed_food='–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞, –º–æ–∂–Ω–æ –º–∞—Å–ª–æ',
                spiritual_note='–ü–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å. –í—Ä–µ–º—è –¥–ª—è –º–æ–ª–∏—Ç–≤—ã –∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è.'
            )
        else:
            return cls(
                month=target_date.month,
                day=target_date.day,
                fasting_type='no_fast',
                fasting_description='–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å',
                allowed_food='–õ—é–±–∞—è –ø–∏—â–∞',
                spiritual_note='–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –ë–æ–≥–∞ –∑–∞ –≤—Å–µ –¥–∞—Ä—ã.'
            )
    
    @classmethod
    def apply_special_periods(cls, daily_info, target_date):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Å–æ–±—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–ø–æ—Å—Ç—ã, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–ª–∏–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        events = OrthodoxEvent.get_events_for_date(target_date)
        
        for event in events:
            if event.event_type == 'great_feast':
                # –í –≤–µ–ª–∏–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ—Å—Ç –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
                daily_info.fasting_type = 'no_fast'
                daily_info.fasting_description = f'–í–µ–ª–∏–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫: {event.title}'
                daily_info.allowed_food = '–õ—é–±–∞—è –ø–∏—â–∞ (–ø—Ä–∞–∑–¥–Ω–∏–∫)'
                daily_info.spiritual_note = f'üéâ {event.title}! ' + (event.description or '–í–µ–ª–∏–∫–∏–π –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫.')
                break
        
        return daily_info
