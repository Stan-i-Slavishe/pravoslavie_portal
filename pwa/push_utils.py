# Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è utils

from django.conf import settings
import json
import logging

logger = logging.getLogger(__name__)

def send_push_notification(subscription_data, title, body, url="/", icon=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        from pywebpush import webpush, WebPushException
        
        if not settings.VAPID_PRIVATE_KEY or not settings.VAPID_PUBLIC_KEY:
            logger.warning("VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_data = {
            "title": title,
            "body": body,
            "icon": icon or "/static/icons/icon-192x192.png",
            "badge": "/static/icons/icon-72x72.png",
            "url": url,
            "tag": f"notification_{hash(title)}",
            "requireInteraction": False,
            "silent": False,
            "vibrate": [200, 100, 200],
            "data": {
                "url": url,
                "timestamp": str(timezone.now().timestamp())
            }
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        response = webpush(
            subscription_info=subscription_data,
            data=json.dumps(notification_data),
            vapid_private_key=settings.VAPID_PRIVATE_KEY,
            vapid_claims={
                "sub": f"mailto:{settings.VAPID_EMAIL}",
                "aud": subscription_data.get('endpoint', '').split('/')[2] if subscription_data.get('endpoint') else ''
            }
        )
        
        logger.info(f"Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title}")
        return True
        
    except WebPushException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False
    except ImportError:
        logger.error("pywebpush –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pywebpush")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def send_bedtime_story_notification():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–∞–∑–∫–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º (19:00)
    """
    from .models import PushSubscription
    from django.utils import timezone
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptions = PushSubscription.objects.filter(is_active=True)
    
    sent_count = 0
    
    for subscription in subscriptions:
        subscription_data = {
            'endpoint': subscription.endpoint,
            'keys': {
                'p256dh': subscription.p256dh_key,
                'auth': subscription.auth_key
            }
        }
        
        if send_push_notification(
            subscription_data=subscription_data,
            title="–í—Ä–µ–º—è —Å–∫–∞–∑–∫–∏! üåô",
            body="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            url="/fairy-tales/",
            icon="/static/icons/icon-192x192.png"
        ):
            sent_count += 1
    
    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫–∞–∑–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
    return sent_count

def send_orthodox_calendar_notification(event_name, event_description, category_url):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–µ
    """
    from .models import PushSubscription
    
    subscriptions = PushSubscription.objects.filter(is_active=True)
    
    sent_count = 0
    
    for subscription in subscriptions:
        subscription_data = {
            'endpoint': subscription.endpoint,
            'keys': {
                'p256dh': subscription.p256dh_key,
                'auth': subscription.auth_key
            }
        }
        
        if send_push_notification(
            subscription_data=subscription_data,
            title=f"‚õ™ {event_name}",
            body=event_description,
            url=category_url,
            icon="/static/icons/icon-192x192.png"
        ):
            sent_count += 1
    
    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ '{event_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
    return sent_count

def send_new_content_notification(content_type, content_title, content_url):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    """
    from .models import PushSubscription
    
    subscriptions = PushSubscription.objects.filter(is_active=True)
    
    content_icons = {
        'story': 'üé¨',
        'book': 'üìö', 
        'fairy_tale': 'üßö',
        'audio': 'üéß'
    }
    
    icon = content_icons.get(content_type, 'üìö')
    
    sent_count = 0
    
    for subscription in subscriptions:
        subscription_data = {
            'endpoint': subscription.endpoint,
            'keys': {
                'p256dh': subscription.p256dh_key,
                'auth': subscription.auth_key
            }
        }
        
        if send_push_notification(
            subscription_data=subscription_data,
            title=f"–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! {icon}",
            body=f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {content_title}",
            url=content_url,
            icon="/static/icons/icon-192x192.png"
        ):
            sent_count += 1
    
    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
    return sent_count
