# PWA Views for –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª

from django.shortcuts import render
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.conf import settings
from django.utils import timezone
from django.views.generic import TemplateView
from .models import (
    PushSubscription, NotificationCategory, UserNotificationSettings,
    UserNotificationSubscription, OrthodoxEvent, DailyOrthodoxInfo
)
import json
import logging
from datetime import date

logger = logging.getLogger(__name__)

class OfflineView(TemplateView):
    """–û—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è PWA"""
    template_name = 'offline/offline.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'title': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
            'offline_features': [
                '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏',
                '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 
                '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã',
                '–°–∫–∞—á–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏',
                '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
            ]
        })
        return context

def manifest_view(request):
    """–°–ª—É–∂–∏—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
    try:
        with open(settings.BASE_DIR / 'static' / 'manifest.json', 'r', encoding='utf-8') as f:
            manifest_content = f.read()
        
        response = HttpResponse(manifest_content, content_type='application/manifest+json')
        response['Cache-Control'] = 'public, max-age=86400'  # –ö–µ—à –Ω–∞ 24 —á–∞—Å–∞
        return response
    except FileNotFoundError:
        logger.error("Manifest file not found")
        return JsonResponse({'error': 'Manifest not found'}, status=404)

def service_worker_view(request):
    """–°–ª—É–∂–∏—Ç Service Worker —Ñ–∞–π–ª –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        with open(settings.BASE_DIR / 'sw.js', 'r', encoding='utf-8') as f:
            sw_content = f.read()
        
        response = HttpResponse(sw_content, content_type='application/javascript')
        response['Cache-Control'] = 'no-cache, no-store, must-revalidate'  # –ù–µ –∫–µ—à–∏—Ä—É–µ–º SW
        response['Service-Worker-Allowed'] = '/'
        return response
    except FileNotFoundError:
        logger.error("Service Worker file not found")
        return HttpResponse('// Service Worker not found', content_type='application/javascript', status=404)

@csrf_exempt
@require_http_methods(["POST"])
def push_subscribe(request):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        data = json.loads(request.body)
        subscription = data.get('subscription')
        user_agent = data.get('user_agent', '')
        
        if not subscription:
            return JsonResponse({'error': 'No subscription data'}, status=400)
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        logger.info(f"Push subscription received from user {request.user.id if request.user.is_authenticated else 'anonymous'}")
        
        return JsonResponse({
            'success': True,
            'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
        })
            
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        logger.error(f"Push subscription error: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

@require_http_methods(["GET"])
def orthodox_calendar_page(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    context = {
        'title': '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'
    }
    return render(request, 'pwa/orthodox_calendar.html', context)

@require_http_methods(["GET"])
def daily_orthodox_page(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    context = {
        'title': '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
    }
    return render(request, 'pwa/daily_orthodox_calendar.html', context)

@require_http_methods(["GET"])
def daily_orthodox_info(request, year, month, day):
    """–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    
    try:
        target_date = date(year, month, day)
    except ValueError:
        return JsonResponse({'error': 'Invalid date'}, status=400)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        daily_info = DailyOrthodoxInfo.get_info_for_date(target_date)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        events = OrthodoxEvent.get_events_for_date(target_date)
        
        response_data = {
            'date': target_date.strftime('%Y-%m-%d'),
            'date_display': target_date.strftime('%d.%m.%Y'),
            'daily_info': {
                'fasting_type': daily_info.fasting_type,
                'fasting_type_display': daily_info.get_fasting_type_display(),
                'fasting_description': daily_info.fasting_description,
                'allowed_food': daily_info.allowed_food,
                'spiritual_note': daily_info.spiritual_note,
                'gospel_reading': daily_info.gospel_reading,
                'epistle_reading': daily_info.epistle_reading,
            },
            'events': [
                {
                    'id': event.id,
                    'title': event.title,
                    'description': event.description,
                    'event_type': event.event_type,
                    'event_type_display': event.get_event_type_display(),
                    'is_movable': event.is_movable
                }
                for event in events
            ],
            'weekday': target_date.strftime('%A'),
            'weekday_ru': [
                '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥',
                '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            ][target_date.weekday()]
        }
        
        return JsonResponse(response_data)
        
    except Exception as e:
        logger.error(f"Daily orthodox info error: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

# =============================================================================
# üìÖ API –î–õ–Ø –ü–†–ê–í–û–°–õ–ê–í–ù–û–ì–û –ö–ê–õ–ï–ù–î–ê–†–Ø
# =============================================================================

@require_http_methods(["GET"])
def orthodox_calendar_today(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        from datetime import date
        from .models import OrthodoxEvent
        
        today = date.today()
        events = OrthodoxEvent.get_events_for_date(today)
        
        events_data = []
        for event in events:
            events_data.append({
                'id': event.id,
                'title': event.title,
                'description': event.description,
                'event_type': event.event_type,
                'event_type_display': event.get_event_type_display(),
                'is_movable': event.is_movable,
                'icon_url': event.icon_url,
                'reading_url': event.reading_url,
            })
        
        return JsonResponse({
            'date': today.strftime('%Y-%m-%d'),
            'date_display': today.strftime('%d.%m.%Y'),
            'events': events_data,
            'count': len(events_data)
        })
        
    except Exception as e:
        logger.error(f"Error getting today's orthodox events: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

@require_http_methods(["GET"])
def orthodox_calendar_date(request, year, month, day):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    try:
        from datetime import date
        from .models import OrthodoxEvent
        
        target_date = date(year, month, day)
        events = OrthodoxEvent.get_events_for_date(target_date)
        
        events_data = []
        for event in events:
            events_data.append({
                'id': event.id,
                'title': event.title,
                'description': event.description,
                'event_type': event.event_type,
                'event_type_display': event.get_event_type_display(),
                'is_movable': event.is_movable,
                'icon_url': event.icon_url,
                'reading_url': event.reading_url,
            })
        
        return JsonResponse({
            'date': target_date.strftime('%Y-%m-%d'),
            'date_display': target_date.strftime('%d.%m.%Y'),
            'events': events_data,
            'count': len(events_data)
        })
        
    except ValueError:
        return JsonResponse({'error': 'Invalid date'}, status=400)
    except Exception as e:
        logger.error(f"Error getting orthodox events for {year}-{month}-{day}: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

@require_http_methods(["GET"])
def get_csrf_token(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –¥–ª—è Service Worker"""
    from django.middleware.csrf import get_token
    
    return JsonResponse({
        'csrfToken': get_token(request)
    })

@require_http_methods(["HEAD", "GET"])
def ping(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è Service Worker"""
    return HttpResponse('pong', content_type='text/plain')

@login_required
@csrf_exempt
@require_http_methods(["POST"])
def sync_playlists(request):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞"""
    try:
        data = json.loads(request.body)
        playlist_data = data.get('playlist')
        
        if not playlist_data:
            return JsonResponse({'error': 'No playlist data'}, status=400)
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        logger.info(f"Playlist sync requested by user {request.user.id}")
        
        return JsonResponse({
            'success': True,
            'message': '–ü–ª–µ–π–ª–∏—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω'
        })
        
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        logger.error(f"Playlist sync error: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

@login_required
@csrf_exempt
@require_http_methods(["POST"])
def sync_favorites(request):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞"""
    try:
        data = json.loads(request.body)
        favorite_data = data.get('favorite')
        
        if not favorite_data:
            return JsonResponse({'error': 'No favorite data'}, status=400)
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        logger.info(f"Favorites sync requested by user {request.user.id}")
        
        return JsonResponse({
            'success': True,
            'message': '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ'
        })
        
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        logger.error(f"Favorites sync error: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def sync_cart(request):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞"""
    try:
        data = json.loads(request.body)
        cart_data = data.get('cart_item')
        
        if not cart_data:
            return JsonResponse({'error': 'No cart data'}, status=400)
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        logger.info(f"Cart sync requested")
        
        return JsonResponse({
            'success': True,
            'message': '–ö–æ—Ä–∑–∏–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
        })
        
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        logger.error(f"Cart sync error: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

@require_http_methods(["GET"])
def orthodox_calendar_month(request, year, month):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—è—Ü–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
    try:
        from datetime import date, timedelta
        import calendar
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if not (1 <= month <= 12):
            return JsonResponse({'error': 'Invalid month'}, status=400)
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        month_days = calendar.monthrange(year, month)[1]
        days_data = {}
        
        for day in range(1, month_days + 1):
            try:
                target_date = date(year, month, day)
                
                # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                daily_info = DailyOrthodoxInfo.get_info_for_date(target_date)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                events = OrthodoxEvent.get_events_for_date(target_date)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ (–≤–µ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
                day_type = get_day_type_for_calendar(target_date, daily_info, events)
                
                days_data[str(day)] = {
                    'day_type': day_type,
                    'fasting_type': daily_info.fasting_type,
                    'fasting_display': daily_info.get_fasting_type_display(),
                    'has_events': len(events) > 0,
                    'events_count': len(events),
                    'main_event': events[0].title if events else None
                }
                
            except Exception as e:
                logger.error(f"Error processing day {day}: {e}")
                days_data[str(day)] = {
                    'day_type': 'feast',
                    'fasting_type': 'no_fast',
                    'fasting_display': '–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å',
                    'has_events': False,
                    'events_count': 0,
                    'main_event': None
                }
        
        return JsonResponse({
            'year': year,
            'month': month,
            'month_name': [
                '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
            ][month - 1],
            'days': days_data,
            'total_days': month_days
        })
        
    except Exception as e:
        logger.error(f"Error getting month calendar: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

def get_day_type_for_calendar(target_date, daily_info, events):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–Ω—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
    
    # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Å—Ç–Ω—ã–µ –¥–Ω–∏ (–æ–Ω–∏ –ø—Ä–µ–≤–∞–ª–∏—Ä—É—é—Ç –Ω–∞–¥ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏)
    # 29 –∞–≤–≥—É—Å—Ç–∞ - –£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏ (—Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç)
    if target_date.month == 8 and target_date.day == 29:
        return 'fast-day'  # –°—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å
    
    # 11 —Å–µ–Ω—Ç—è–±—Ä—è - –£—Å–µ–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞ –ü—Ä–µ–¥—Ç–µ—á–∏ (–ø–æ –Ω–æ–≤–æ–º—É —Å—Ç–∏–ª—é)
    if target_date.month == 9 and target_date.day == 11:
        return 'fast-day'  # –°—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å
        
    # –ö—Ä–µ—Å—Ç–æ–≤–æ–∑–¥–≤–∏–∂–µ–Ω–∏–µ (14/27 —Å–µ–Ω—Ç—è–±—Ä—è) - —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç
    if target_date.month == 9 and target_date.day == 27:
        return 'fast-day'  # –°—Ç—Ä–æ–≥–∏–π –ø–æ—Å—Ç–Ω—ã–π –¥–µ–Ω—å
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    if daily_info.fasting_type in ['strict_fast', 'dry_eating', 'complete_fast']:
        return 'fast-day'
    elif daily_info.fasting_type in ['light_fast', 'with_oil', 'wine_oil']:
        return 'fast-day'  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–¥ –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–ª–∏–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å—Ç)
    for event in events:
        if event.event_type in ['great_feast', 'major_feast']:
            return 'holiday'
    
    # 4. –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å
    return 'feast'

@require_http_methods(["GET"])
def orthodoxy_calendar_today(request):
    """API –¥–ª—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    from datetime import date
    
    today = date.today()
    events = []
    
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –æ—Å–æ–±—ã–π –¥–µ–Ω—å
    if today.weekday() == 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        events.append({
            'id': 'sunday',
            'name': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –¥–µ–Ω—å –ì–æ—Å–ø–æ–¥–µ–Ω—å',
            'description': '–ü–æ—Å–µ—Ç–∏—Ç–µ –±–æ–≥–æ—Å–ª—É–∂–µ–Ω–∏–µ –∏ –ø–æ—Å–ª—É—à–∞–π—Ç–µ –¥—É—Ö–æ–≤–Ω—ã–µ —Ä–∞—Å—Å–∫–∞–∑—ã',
            'category': 'duhovnye',
            'type': 'weekly'
        })
    
    # –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥
    if today.month == 12 and today.day >= 25:
        events.append({
            'id': 'christmas',
            'name': '–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ',
            'description': '–í–µ–ª–∏–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –†–æ–∂–¥–µ—Å—Ç–≤–∞ –ì–æ—Å–ø–æ–¥–∞ –Ω–∞—à–µ–≥–æ –ò–∏—Å—É—Å–∞ –•—Ä–∏—Å—Ç–∞',
            'category': 'prazdniki',
            'type': 'major_feast'
        })
    
    # –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
    if today.month == 1 and today.day <= 7:
        events.append({
            'id': 'new_year',
            'name': '–°–≤—è—Ç–∫–∏',
            'description': '–°–≤—è—Ç–æ—á–Ω—ã–µ –¥–Ω–∏ - –≤—Ä–µ–º—è —Ä–∞–¥–æ—Å—Ç–∏ –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            'category': 'prazdniki',
            'type': 'holy_days'
        })
    
    # –ü–æ—Å—Ç
    if today.month in [3, 4]:  # –í–µ–ª–∏–∫–∏–π –ø–æ—Å—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ
        events.append({
            'id': 'great_lent',
            'name': '–í–µ–ª–∏–∫–∏–π –ø–æ—Å—Ç',
            'description': '–í—Ä–µ–º—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ü–∞—Å—Ö–µ',
            'category': 'posty',
            'type': 'fast'
        })
    
    return JsonResponse({
        'events': events,
        'date': today.isoformat()
    })

@require_http_methods(["GET"])
def push_test_page(request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    if not settings.DEBUG or not request.user.is_staff:
        return JsonResponse({'error': 'Access denied'}, status=403)
    
    context = {
        'total_subscriptions': 0,
        'active_subscriptions': 0, 
        'today_subscriptions': 0,
    }
    
    try:
        from .models import PushSubscription
        context['total_subscriptions'] = PushSubscription.objects.count()
        context['active_subscriptions'] = PushSubscription.objects.filter(is_active=True).count()
        context['today_subscriptions'] = PushSubscription.objects.filter(
            created_at__date=timezone.now().date()
        ).count()
    except Exception as e:
        logger.error(f"Error getting push statistics: {e}")
    
    return render(request, 'pwa/push_test.html', context)

# =============================================================================
# üîî –ù–û–í–´–ï API –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# =============================================================================

@login_required
@require_http_methods(["GET"])
def notification_settings_page(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings, created = UserNotificationSettings.objects.get_or_create(user=request.user)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = NotificationCategory.objects.filter(is_active=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = UserNotificationSubscription.objects.filter(user=request.user)
    subscriptions_dict = {sub.category.name: sub for sub in subscriptions}
    
    context = {
        'user_settings': user_settings,
        'categories': categories,
        'subscriptions': subscriptions_dict,
        'title': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    }
    
    return render(request, 'pwa/notification_settings.html', context)

@login_required
@csrf_exempt
@require_http_methods(["POST"])
def save_notification_settings(request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        data = json.loads(request.body)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings, created = UserNotificationSettings.objects.get_or_create(user=request.user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_settings.notifications_enabled = data.get('notifications_enabled', True)
        user_settings.quiet_hours_enabled = data.get('quiet_hours_enabled', True)
        user_settings.quiet_start = data.get('quiet_start', '22:00')
        user_settings.quiet_end = data.get('quiet_end', '08:00')
        user_settings.child_mode = data.get('child_mode', False)
        user_settings.child_bedtime = data.get('child_bedtime', '20:00')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = data.get('weekdays', {})
        user_settings.notify_monday = weekdays.get('notify_monday', True)
        user_settings.notify_tuesday = weekdays.get('notify_tuesday', True)
        user_settings.notify_wednesday = weekdays.get('notify_wednesday', True)
        user_settings.notify_thursday = weekdays.get('notify_thursday', True)
        user_settings.notify_friday = weekdays.get('notify_friday', True)
        user_settings.notify_saturday = weekdays.get('notify_saturday', True)
        user_settings.notify_sunday = weekdays.get('notify_sunday', True)
        
        user_settings.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = data.get('categories', {})
        for category_name, category_settings in categories_data.items():
            try:
                category = NotificationCategory.objects.get(name=category_name)
                subscription, created = UserNotificationSubscription.objects.get_or_create(
                    user=request.user,
                    category=category,
                    defaults={
                        'enabled': category_settings.get('enabled', True),
                        'frequency': category_settings.get('frequency', 'daily'),
                        'preferred_time': category_settings.get('time'),
                        'max_daily_count': category_settings.get('max_daily', 3),
                        'priority': category_settings.get('priority', 5)
                    }
                )
                
                if not created:
                    subscription.enabled = category_settings.get('enabled', True)
                    subscription.frequency = category_settings.get('frequency', 'daily')
                    subscription.preferred_time = category_settings.get('time')
                    subscription.max_daily_count = category_settings.get('max_daily', 3)
                    subscription.priority = category_settings.get('priority', 5)
                    subscription.save()
                    
            except NotificationCategory.DoesNotExist:
                logger.warning(f"Category {category_name} not found")
                continue
        
        logger.info(f"Notification settings saved for user {request.user.username}")
        
        return JsonResponse({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
        })
        
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        logger.error(f"Error saving notification settings: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)

@login_required
@require_http_methods(["GET"])
def get_notification_settings(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = UserNotificationSettings.objects.filter(user=request.user).first()
        subscriptions = UserNotificationSubscription.objects.filter(user=request.user)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        settings_data = {
            'notifications_enabled': user_settings.notifications_enabled if user_settings else True,
            'quiet_hours_enabled': user_settings.quiet_hours_enabled if user_settings else True,
            'quiet_start': str(user_settings.quiet_start) if user_settings else '22:00',
            'quiet_end': str(user_settings.quiet_end) if user_settings else '08:00',
            'child_mode': user_settings.child_mode if user_settings else False,
            'child_bedtime': str(user_settings.child_bedtime) if user_settings else '20:00',
            'categories': {}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for subscription in subscriptions:
            settings_data['categories'][subscription.category.name] = {
                'enabled': subscription.enabled,
                'frequency': subscription.frequency,
                'preferred_time': str(subscription.preferred_time) if subscription.preferred_time else None,
                'max_daily_count': subscription.max_daily_count,
                'priority': subscription.priority
            }
        
        return JsonResponse(settings_data)
        
    except Exception as e:
        logger.error(f"Error getting notification settings: {e}")
        return JsonResponse({'error': 'Server error'}, status=500)
