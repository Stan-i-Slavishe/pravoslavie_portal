#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS –¥–ª—è Django - –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
"""
import subprocess
import sys
import os
from pathlib import Path

def install_django_extensions():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç django-extensions"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º django-extensions...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'django-extensions', 'werkzeug'], 
                      check=True, capture_output=True)
        print("‚úÖ django-extensions —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def update_settings():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç settings.py –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HTTPS"""
    print("‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º settings.py...")
    
    try:
        # –ß–∏—Ç–∞–µ–º settings.py
        with open('config/settings.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º django-extensions –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'django_extensions' not in content:
            content = content.replace(
                'THIRD_PARTY_APPS = [',
                'THIRD_PARTY_APPS = [\n    "django_extensions",  # –î–ª—è HTTPS –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
            )
            print("‚úÖ django-extensions –¥–æ–±–∞–≤–ª–µ–Ω –≤ THIRD_PARTY_APPS")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ HTTPS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'HTTPS –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò' not in content:
            # –î–æ–±–∞–≤–ª—è–µ–º HTTPS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            https_settings = '''

# =====================================
# HTTPS –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò
# =====================================

# –†–∞–∑—Ä–µ—à–∞–µ–º –∫–∞–∫ HTTP —Ç–∞–∫ –∏ HTTPS –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
SECURE_SSL_REDIRECT = False  # –ù–µ –ø—Ä–∏–Ω—É–∂–¥–∞–µ–º –∫ HTTPS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTPS –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
if DEBUG:
    # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ HTTP –∏ HTTPS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # –î–ª—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º secure cookies
    SESSION_COOKIE_SECURE = False  # –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å HTTP –∏ —Å HTTPS
    CSRF_COOKIE_SECURE = False     # –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å HTTP –∏ —Å HTTPS
    
    # –û—Ç–∫–ª—é—á–∞–µ–º HSTS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    
    # –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è CSRF (–¥–ª—è HTTPS)
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
        'https://127.0.0.1:8000',
        'https://localhost:8000',
    ]
else:
    # –ü—Ä–æ–¥–∞–∫—à–µ–Ω - —Å—Ç—Ä–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
'''
            content += https_settings
            print("‚úÖ HTTPS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("‚úÖ HTTPS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('config/settings.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è settings.py: {e}")
        return False

def create_ssl_certificate():
    """–°–æ–∑–¥–∞–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    print("üîí –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É ssl
    ssl_dir = Path('ssl')
    ssl_dir.mkdir(exist_ok=True)
    
    cert_file = ssl_dir / 'cert.pem'
    key_file = ssl_dir / 'key.pem'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã
    if cert_file.exists() and key_file.exists():
        print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    # –°–ø–æ—Å–æ–± 1: OpenSSL
    try:
        subprocess.run([
            'openssl', 'req', '-x509', '-newkey', 'rsa:2048',
            '-keyout', str(key_file), '-out', str(cert_file),
            '-days', '365', '-nodes', '-batch',
            '-subj', '/C=RU/ST=Local/L=Local/O=Django/CN=localhost'
        ], check=True, capture_output=True)
        
        print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ OpenSSL")
        return True
        
    except (FileNotFoundError, subprocess.CalledProcessError):
        print("‚ö†Ô∏è OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º Python —Å–ø–æ—Å–æ–±...")
    
    # –°–ø–æ—Å–æ–± 2: Python cryptography
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            from cryptography import x509
            from cryptography.x509.oid import NameOID
            from cryptography.hazmat.primitives import hashes, serialization
            from cryptography.hazmat.primitives.asymmetric import rsa
            import datetime
        except ImportError:
            print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'cryptography'], check=True)
            from cryptography import x509
            from cryptography.x509.oid import NameOID
            from cryptography.hazmat.primitives import hashes, serialization
            from cryptography.hazmat.primitives.asymmetric import rsa
            import datetime
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, u'RU'),
            x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u'Local'),
            x509.NameAttribute(NameOID.LOCALITY_NAME, u'Local'),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, u'Django Dev'),
            x509.NameAttribute(NameOID.COMMON_NAME, u'localhost'),
        ])
        
        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.datetime.utcnow()
        ).not_valid_after(
            datetime.datetime.utcnow() + datetime.timedelta(days=365)
        ).add_extension(
            x509.SubjectAlternativeName([
                x509.DNSName(u'localhost'),
                x509.DNSName(u'127.0.0.1'),
            ]),
            critical=False,
        ).sign(private_key, hashes.SHA256())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        with open(cert_file, 'wb') as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
        with open(key_file, 'wb') as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))
        
        print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Python")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False

def create_startup_scripts():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    print("üìù –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞...")
    
    # HTTP —Å–∫—Ä–∏–ø—Ç
    with open('start_http.bat', 'w', encoding='utf-8') as f:
        f.write('@echo off\n')
        f.write('call .venv\\Scripts\\activate\n')
        f.write('echo Starting HTTP server at http://127.0.0.1:8000/\n')
        f.write('python manage.py runserver\n')
    
    # HTTPS —Å–∫—Ä–∏–ø—Ç
    with open('start_https.bat', 'w', encoding='utf-8') as f:
        f.write('@echo off\n')
        f.write('call .venv\\Scripts\\activate\n')
        f.write('echo Starting HTTPS server at https://127.0.0.1:8000/\n')
        f.write('echo Browser will show security warning - click Advanced then Proceed\n')
        f.write('python manage.py runserver_plus --cert-file ssl/cert.pem --key-file ssl/key.pem\n')
    
    print("‚úÖ –°–∫—Ä–∏–ø—Ç—ã start_http.bat –∏ start_https.bat —Å–æ–∑–¥–∞–Ω—ã")

def main():
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê DJANGO –î–õ–Ø HTTPS")
    print("=" * 40)
    
    if not os.path.exists('manage.py'):
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è Django –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    print("\n1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º django-extensions...")
    if not install_django_extensions():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å django-extensions")
        return
    
    print("\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º settings.py...")
    if not update_settings():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å settings.py")
        return
    
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...")
    if not create_ssl_certificate():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
        return
    
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞...")
    create_startup_scripts()
    
    print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 50)
    
    print("\nüìã –í–ê–†–ò–ê–ù–¢–´ –ó–ê–ü–£–°–ö–ê:")
    print("üåê HTTP —Å–µ—Ä–≤–µ—Ä:")
    print("   start_http.bat")
    print("   –ò–õ–ò: python manage.py runserver")
    print("   –ê–¥—Ä–µ—Å: http://127.0.0.1:8000/")
    print()
    print("üîí HTTPS —Å–µ—Ä–≤–µ—Ä:")
    print("   start_https.bat")
    print("   –ò–õ–ò: python manage.py runserver_plus --cert-file ssl/cert.pem --key-file ssl/key.pem")
    print("   –ê–¥—Ä–µ—Å: https://127.0.0.1:8000/")
    print("   ‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –Ω–∞–∂–º–∏—Ç–µ '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' -> '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'")
    
    choice = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å? (1=HTTP, 2=HTTPS, n=–ù–µ—Ç): ")
    
    if choice == "1":
        print("\nüåê –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä...")
        os.system("python manage.py runserver")
    elif choice == "2":
        print("\nüîí –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä...")
        if os.path.exists('ssl/cert.pem'):
            os.system("python manage.py runserver_plus --cert-file ssl/cert.pem --key-file ssl/key.pem")
        else:
            print("‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ start_http.bat –∏–ª–∏ start_https.bat")

if __name__ == '__main__':
    main()
