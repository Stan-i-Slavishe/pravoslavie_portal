from django.core.management.base import BaseCommand
from django.utils import timezone
from fairy_tales.models import FairyTaleTemplate, PersonalizationOrder
from shop.models import Product, Order, OrderItem
from decimal import Decimal


class Command(BaseCommand):
    help = '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω'

    def add_arguments(self, parser):
        parser.add_argument(
            '--create-products',
            action='store_true',
            help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å–∫–∞–∑–æ–∫',
        )
        parser.add_argument(
            '--migrate-orders',
            action='store_true',
            help='–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã —Å–∫–∞–∑–æ–∫',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üßö –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–∞–∑–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω')
        )
        
        if options['create_products']:
            self.create_products(dry_run=options['dry_run'])
        
        if options['migrate_orders']:
            self.migrate_orders(dry_run=options['dry_run'])
        
        if not options['create_products'] and not options['migrate_orders']:
            self.stdout.write(
                self.style.WARNING('–£–∫–∞–∂–∏—Ç–µ --create-products –∏–ª–∏ --migrate-orders')
            )

    def create_products(self, dry_run=False):
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å–∫–∞–∑–æ–∫"""
        self.stdout.write('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–∫–∞–∑–æ–∫...')
        
        templates = FairyTaleTemplate.objects.filter(is_published=True)
        created_count = 0
        
        for template in templates:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–¥—É–∫—Ç
            existing_product = Product.objects.filter(
                product_type='fairy_tale',
                fairy_tale_template_id=template.id
            ).first()
            
            if existing_product:
                self.stdout.write(f'  ‚è≠Ô∏è  –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {template.title}')
                continue
            
            product_data = {
                'title': f'–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞: {template.title}',
                'description': template.short_description,
                'price': template.base_price,
                'product_type': 'fairy_tale',
                'fairy_tale_template_id': template.id,
                'requires_personalization': True,
                'is_digital': True,
                'has_audio_option': template.has_audio_option,
                'audio_option_price': template.audio_price,
                'has_illustration_option': template.has_illustration_option,
                'illustration_option_price': template.illustration_price,
                'personalization_form_config': template.personalization_fields,
                'image': template.cover_image,
            }
            
            if dry_run:
                self.stdout.write(f'  üîç [DRY RUN] –°–æ–∑–¥–∞–ª –±—ã –ø—Ä–æ–¥—É–∫—Ç: {product_data["title"]}')
            else:
                product = Product.objects.create(**product_data)
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.title}')
                created_count += 1
        
        if not dry_run:
            self.stdout.write(
                self.style.SUCCESS(f'‚ú® –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
            )

    def migrate_orders(self, dry_run=False):
        """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.stdout.write('\nüìã –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏...')
        
        old_orders = PersonalizationOrder.objects.all()
        migrated_count = 0
        
        for old_order in old_orders:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
            existing_order = Order.objects.filter(
                user=old_order.user,
                notes__contains=f'Migrated from PersonalizationOrder {old_order.order_id}'
            ).first()
            
            if existing_order:
                self.stdout.write(f'  ‚è≠Ô∏è  –ó–∞–∫–∞–∑ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {old_order.order_id}')
                continue
            
            # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            product = Product.objects.filter(
                product_type='fairy_tale',
                fairy_tale_template_id=old_order.template.id
            ).first()
            
            if not product:
                if dry_run:
                    self.stdout.write(f'  üîç [DRY RUN] –°–æ–∑–¥–∞–ª –±—ã –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è: {old_order.template.title}')
                    continue
                else:
                    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
                    product = Product.objects.create(
                        title=f'–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞: {old_order.template.title}',
                        description=old_order.template.short_description,
                        price=old_order.base_price,
                        product_type='fairy_tale',
                        fairy_tale_template_id=old_order.template.id,
                        requires_personalization=True,
                        is_digital=True,
                        has_audio_option=old_order.template.has_audio_option,
                        audio_option_price=old_order.template.audio_price,
                        has_illustration_option=old_order.template.has_illustration_option,
                        illustration_option_price=old_order.template.illustration_price,
                        image=old_order.template.cover_image,
                    )
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            order_data = {
                'user': old_order.user,
                'status': self.map_old_status_to_new(old_order.status),
                'total_amount': old_order.total_price,
                'email': old_order.customer_email,
                'first_name': old_order.customer_name.split()[0] if old_order.customer_name else '',
                'last_name': ' '.join(old_order.customer_name.split()[1:]) if old_order.customer_name and len(old_order.customer_name.split()) > 1 else '',
                'phone': old_order.customer_phone or '',
                'notes': f'Migrated from PersonalizationOrder {old_order.order_id}',
                'created_at': old_order.created_at,
                'paid_at': old_order.completed_at if old_order.status in ['paid', 'ready', 'delivered'] else None,
            }
            
            if dry_run:
                self.stdout.write(f'  üîç [DRY RUN] –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –±—ã –∑–∞–∫–∞–∑: {old_order.order_id}')
                continue
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            new_order = Order.objects.create(**order_data)
            
            # –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            order_item_data = {
                'order': new_order,
                'product': product,
                'product_title': product.title,
                'product_price': old_order.base_price,
                'quantity': 1,
                'personalization_data': old_order.personalization_data,
                'include_audio': old_order.include_audio,
                'include_illustrations': old_order.include_illustrations,
                'special_requests': old_order.special_requests,
                'fairy_tale_status': self.map_old_status_to_fairy_tale_status(old_order.status),
                'generated_content': old_order.generated_content,
                'audio_file': old_order.audio_file,
                'illustration_file': old_order.illustration_file,
                'estimated_completion': old_order.estimated_completion,
                'admin_notes': old_order.admin_notes,
            }
            
            OrderItem.objects.create(**order_item_data)
            
            self.stdout.write(f'  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–∫–∞–∑: {old_order.order_id} -> {new_order.short_id}')
            migrated_count += 1
        
        if not dry_run:
            self.stdout.write(
                self.style.SUCCESS(f'‚ú® –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∑–∞–∫–∞–∑–æ–≤')
            )
    
    def map_old_status_to_new(self, old_status):
        """–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å —Å –Ω–æ–≤—ã–º"""
        status_mapping = {
            'pending': 'pending',
            'paid': 'paid',
            'in_progress': 'paid',
            'ready': 'completed',
            'delivered': 'completed',
            'cancelled': 'cancelled',
        }
        return status_mapping.get(old_status, 'pending')
    
    def map_old_status_to_fairy_tale_status(self, old_status):
        """–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∫–∞–∑–∫–∏"""
        status_mapping = {
            'pending': 'pending',
            'paid': 'pending',
            'in_progress': 'in_progress',
            'ready': 'ready',
            'delivered': 'delivered',
            'cancelled': '',
        }
        return status_mapping.get(old_status, 'pending')
