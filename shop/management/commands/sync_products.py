# shop/management/commands/sync_products.py

from django.core.management.base import BaseCommand
from django.db import transaction
from books.models import Book
from shop.models import Product

class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –º–∞–≥–∞–∑–∏–Ω–æ–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING('üîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)')
            )
        
        self.stdout.write("üè™ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º...")
        
        created_count = 0
        updated_count = 0
        
        with transaction.atomic():
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–Ω–∏–≥
            paid_books = Book.objects.filter(price__gt=0)
            self.stdout.write(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–Ω—ã—Ö –∫–Ω–∏–≥: {paid_books.count()}")
            
            for book in paid_books:
                if dry_run:
                    existing = Product.objects.filter(
                        product_type='book',
                        book_id=book.id
                    ).exists()
                    
                    if not existing:
                        self.stdout.write(f"  ‚ûï –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞: {book.title} - {book.price}‚ÇΩ")
                        created_count += 1
                    else:
                        self.stdout.write(f"  ‚úì –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {book.title}")
                else:
                    product, created = Product.objects.get_or_create(
                        product_type='book',
                        book_id=book.id,
                        defaults={
                            'title': book.title,
                            'description': book.description or f"–î—É—Ö–æ–≤–Ω–∞—è –∫–Ω–∏–≥–∞ '{book.title}'",
                            'price': book.price,
                            'is_active': True,
                            'is_digital': True,
                        }
                    )
                    
                    if created:
                        self.stdout.write(
                            self.style.SUCCESS(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {product.title} - {product.price}‚ÇΩ")
                        )
                        created_count += 1
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                        updated = False
                        if product.title != book.title:
                            product.title = book.title
                            updated = True
                        if product.price != book.price:
                            product.price = book.price
                            updated = True
                        if not product.is_active:
                            product.is_active = True
                            updated = True
                            
                        if updated:
                            product.save()
                            self.stdout.write(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {product.title}")
                            updated_count += 1
                        else:
                            self.stdout.write(f"  ‚úì –ê–∫—Ç—É–∞–ª—å–Ω–∞: {product.title}")
            
            if dry_run:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                transaction.set_rollback(True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_products = Product.objects.filter(is_active=True).count()
        
        self.stdout.write("\n" + "="*50)
        if dry_run:
            self.stdout.write(self.style.WARNING("üìã –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:"))
            self.stdout.write(f"  –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: {created_count}")
            self.stdout.write(f"  –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        else:
            self.stdout.write(self.style.SUCCESS("üéâ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:"))
            self.stdout.write(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {created_count}")
            self.stdout.write(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
            self.stdout.write(f"  üõí –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {total_products}")
            
        self.stdout.write("="*50)
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING("–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run")
            )
