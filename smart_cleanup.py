#!/usr/bin/env python3
"""
–£–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ö–û–†–ù–Ø –ø—Ä–æ–µ–∫—Ç–∞, –Ω–µ —Ç—Ä–æ–≥–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
"""

import os
from pathlib import Path
import re

def smart_cleanup():
    """–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    project_root = Path("E:/pravoslavie_portal")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –∫–æ—Ä–Ω–µ!)
    cleanup_patterns = {
        'batch_files': {
            'pattern': '*.bat',
            'description': 'Batch —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
        },
        'debug_scripts': {
            'pattern': 'diagnose_*.py',
            'description': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã'
        },
        'test_scripts': {
            'pattern': 'test_*.py',
            'description': '–¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã'
        },
        'fix_scripts': {
            'pattern': 'fix_*.py',
            'description': '–°–∫—Ä–∏–ø—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π'
        },
        'check_scripts': {
            'pattern': 'check_*.py',
            'description': '–°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫'
        },
        'temp_files': {
            'pattern': 'temp_*.py',
            'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'
        },
        'setup_scripts': {
            'pattern': 'setup_*.py',
            'description': '–°–∫—Ä–∏–ø—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫—Ä–æ–º–µ setup.py)'
        },
        'cleanup_scripts': {
            'pattern': 'clean*.py',
            'description': '–°–∫—Ä–∏–ø—Ç—ã –æ—á–∏—Å—Ç–∫–∏'
        },
        'sync_scripts': {
            'pattern': 'sync_*.py',
            'description': '–°–∫—Ä–∏–ø—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
        },
        'backup_files': {
            'pattern': '*_backup*.py',
            'description': '–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤'
        }
    }
    
    # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–£–ñ–ù–û –°–û–•–†–ê–ù–ò–¢–¨ (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)
    keep_files = {
        'manage.py',           # Django —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        'setup.py',            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        'requirements.txt',    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        'README.md',           # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        '.gitignore',          # Git –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        '.env',                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        '.env.production',     # –ü—Ä–æ–¥–∞–∫—à–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        '.env.postgres_local', # –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
        'wsgi.py',            # WSGI (–µ—Å–ª–∏ –≤ –∫–æ—Ä–Ω–µ)
        'asgi.py',            # ASGI (–µ—Å–ª–∏ –≤ –∫–æ—Ä–Ω–µ)
    }
    
    print("üßπ –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    print("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)")
    print("=" * 60)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_delete = {}
    total_files = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for category, info in cleanup_patterns.items():
        pattern = info['pattern']
        description = info['description']
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        matching_files = list(project_root.glob(pattern))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º - —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏) –∏ –Ω–µ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        category_files = []
        for file_path in matching_files:
            if (file_path.is_file() and 
                file_path.name not in keep_files and
                file_path.parent == project_root):  # –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å!
                category_files.append(file_path)
        
        if category_files:
            files_to_delete[category] = {
                'files': category_files,
                'description': description
            }
            total_files += len(category_files)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    additional_patterns = [
        'apply_*.bat', 'run_*.bat', 'restart_*.bat', 'master_*.bat',
        'quick_*.py', 'force_*.py', 'emergency_*.py', 'auto_*.py',
        'final_*.py', 'simple_*.py', 'missing_*.py', 'remove_*.py',
        'validate_*.py', 'analyze_*.py', 'collect_*.py', 'create_*.py',
        'update_*.py', 'set_*.py', 'use_*.py', 'find_*.py'
    ]
    
    additional_files = []
    for pattern in additional_patterns:
        for file_path in project_root.glob(pattern):
            if (file_path.is_file() and 
                file_path.name not in keep_files and
                file_path.parent == project_root and
                file_path not in [f for cat in files_to_delete.values() for f in cat['files']]):
                additional_files.append(file_path)
    
    if additional_files:
        files_to_delete['additional'] = {
            'files': additional_files,
            'description': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã'
        }
        total_files += len(additional_files)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    if not files_to_delete:
        print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –ü—Ä–æ–µ–∫—Ç —É–∂–µ —á–∏—Å—Ç—ã–π")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {total_files} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    print("=" * 60)
    
    total_size = 0
    for category, data in files_to_delete.items():
        files = data['files']
        description = data['description']
        
        print(f"\nüìÇ {description} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
        category_size = 0
        
        for file_path in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            size = file_path.stat().st_size
            category_size += size
            print(f"   ‚Ä¢ {file_path.name} ({size} bytes)")
        
        if len(files) > 10:
            remaining_size = sum(f.stat().st_size for f in files[10:])
            category_size += remaining_size
            print(f"   ‚Ä¢ ... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤")
        
        total_size += category_size
        print(f"   üìä –†–∞–∑–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_size:,} bytes")
    
    print("=" * 60)
    print(f"üìä –ò–¢–û–ì–û: {total_files} —Ñ–∞–π–ª–æ–≤, {total_size:,} bytes")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –°–û–•–†–ê–ù–Ø–ï–ú
    print("\n‚úÖ –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´ (–±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã):")
    important_files = []
    for file_name in keep_files:
        file_path = project_root / file_name
        if file_path.exists():
            important_files.append(file_name)
    
    if important_files:
        for file_name in important_files:
            print(f"   ‚úì {file_name}")
    else:
        print("   (–Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ)")
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    print("\n" + "=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û!")
    print("üí° –í—Å–µ .bat –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ .py —Ñ–∞–π–ª—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞")
    print("üéØ –£–¥–∞–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–∑ –ö–û–†–ù–Ø –ø—Ä–æ–µ–∫—Ç–∞")
    
    while True:
        choice = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {total_files} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤? (y/n): ").strip().lower()
        if choice in ['y', 'yes', '–¥–∞', '–¥']:
            break
        elif choice in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
            print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        else:
            print("‚ö†Ô∏è  –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    print(f"\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ {total_files} —Ñ–∞–π–ª–æ–≤...")
    deleted_count = 0
    deleted_size = 0
    errors = []
    
    for category, data in files_to_delete.items():
        files = data['files']
        description = data['description']
        
        print(f"\nüìÇ –£–¥–∞–ª—è–µ–º: {description}")
        for file_path in files:
            try:
                size = file_path.stat().st_size
                file_path.unlink()
                print(f"   ‚úÖ {file_path.name}")
                deleted_count += 1
                deleted_size += size
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path.name}: {e}"
                print(f"   {error_msg}")
                errors.append(error_msg)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –û–¢–ß–ï–¢ –û–ë –û–ß–ò–°–¢–ö–ï")
    print("=" * 60)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    print(f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {deleted_size:,} bytes")
    
    if errors:
        print(f"‚ö†Ô∏è  –û—à–∏–±–æ–∫: {len(errors)}")
        for error in errors:
            print(f"   {error}")
    
    if deleted_count > 0:
        print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üßπ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ —Å—Ç–∞–ª —á–∏—â–µ –Ω–∞ {deleted_count} —Ñ–∞–π–ª–æ–≤")
        print(f"üöÄ Django —Å–∞–π—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        print(f"üìÅ –í—Å–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    else:
        print(f"\nüòê –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    print("üßπ –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ—Ç –∏ —É–¥–∞–ª–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¢–û–õ–¨–ö–û –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 60)
    
    smart_cleanup()
