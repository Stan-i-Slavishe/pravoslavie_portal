// analytics.js - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π

class PurchaseAnalytics {
    constructor() {
        this.init();
    }

    init() {
        // –ü–æ–ª—É—á–∞–µ–º session key
        this.sessionKey = this.getSessionKey();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤
        this.initClickTracking();
        
        console.log('üìä Purchase Analytics initialized');
    }

    getSessionKey() {
        // –ü–æ–ª—É—á–∞–µ–º session key –∏–∑ cookies –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        const sessionId = this.getCookie('sessionid') || this.generateSessionKey();
        return sessionId;
    }

    getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    generateSessionKey() {
        return 'anon_' + Math.random().toString(36).substr(2, 9) + Date.now().toString(36);
    }

    getCSRFToken() {
        return this.getCookie('csrftoken') || 
               document.querySelector('[name=csrfmiddlewaretoken]')?.value ||
               document.querySelector('meta[name=csrf-token]')?.getAttribute('content');
    }

    initClickTracking() {
        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        this.isTracking = false;
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        document.addEventListener('click', (e) => {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
            if (this.isTracking) return;
            
            const target = e.target.closest('[data-analytics-track]');
            if (target) {
                this.isTracking = true;
                this.trackPurchaseIntent(target, e);
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => this.isTracking = false, 1000);
                return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤—Ç–æ—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            }
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ —Å—Å—ã–ª–∫–∏ "–ö—É–ø–∏—Ç—å" –∏ –ø–æ—Ö–æ–∂–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç data-analytics-track)
            const button = e.target.closest('a, button');
            if (button && !button.hasAttribute('data-analytics-track') && this.isPurchaseButton(button)) {
                this.isTracking = true;
                this.trackGenericPurchaseIntent(button, e);
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => this.isTracking = false, 1000);
            }
        });
    }

    isPurchaseButton(element) {
        const text = element.textContent.toLowerCase();
        const href = element.href?.toLowerCase() || '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏/—Å—Å—ã–ª–∫–∏
        const purchaseKeywords = [
            '–∫—É–ø–∏—Ç—å', '—Å–∫–∞—á–∞—Ç—å', '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', '–∑–∞–∫–∞–∑–∞—Ç—å', '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
            '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø', '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'premium'
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
        const classList = element.className.toLowerCase();
        const purchaseClasses = ['btn-buy', 'btn-download', 'btn-purchase', 'btn-subscribe'];
        
        return purchaseKeywords.some(keyword => text.includes(keyword)) ||
               purchaseClasses.some(cls => classList.includes(cls)) ||
               href.includes('buy') || href.includes('purchase') || href.includes('subscribe');
    }

    trackPurchaseIntent(element, event) {
        const data = {
            content_type: element.dataset.contentType || this.detectContentType(),
            object_id: element.dataset.objectId || this.detectObjectId(),
            button_type: element.dataset.buttonType || this.detectButtonType(element),
            session_key: this.sessionKey,
            page_url: window.location.href,
            referer: document.referrer,
            timestamp: new Date().toISOString()
        };

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç data-–∞—Ç—Ä–∏–±—É—Ç–∞–º –Ω–∞–¥ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        if (element.dataset.contentType) {
            data.content_type = element.dataset.contentType;
        }
        if (element.dataset.objectId) {
            data.object_id = parseInt(element.dataset.objectId);
        }

        this.sendAnalytics(data, element);
    }

    trackGenericPurchaseIntent(element, event) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        const data = {
            content_type: element.dataset.contentType || this.detectContentType(),
            object_id: element.dataset.objectId || this.detectObjectId(),
            button_type: element.dataset.buttonType || this.detectButtonType(element),
            session_key: this.sessionKey,
            page_url: window.location.href,
            referer: document.referrer,
            timestamp: new Date().toISOString()
        };

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç data-–∞—Ç—Ä–∏–±—É—Ç–∞–º
        if (element.dataset.contentType) {
            data.content_type = element.dataset.contentType;
        }
        if (element.dataset.objectId) {
            data.object_id = parseInt(element.dataset.objectId);
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if (!data.content_type || !data.object_id) {
            console.log('‚ö†Ô∏è Insufficient data for analytics:', data);
            return;
        }

        this.sendAnalytics(data, element);
    }

    detectContentType() {
        const url = window.location.pathname;
        
        if (url.includes('/books/')) return 'book';
        if (url.includes('/fairy-tales/')) return 'fairy_tale';
        if (url.includes('/audio/')) return 'audio';
        if (url.includes('/subscriptions/')) return 'subscription';
        if (url.includes('/shop/')) return 'product';
        
        return 'unknown';
    }

    detectObjectId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL
        const url = window.location.pathname;
        const idMatch = url.match(/\/(\d+)\//) || url.match(/\/(\d+)$/);
        
        if (idMatch) {
            return parseInt(idMatch[1]);
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –º–µ—Ç–∞-—Ç–µ–≥–∞—Ö
        const metaId = document.querySelector('meta[name="object-id"]');
        if (metaId) {
            return parseInt(metaId.getAttribute('content'));
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        const elementWithId = document.querySelector('[data-object-id]');
        if (elementWithId) {
            return parseInt(elementWithId.dataset.objectId);
        }

        return null;
    }

    detectButtonType(element) {
        const text = element.textContent.toLowerCase();
        
        if (text.includes('–∫—É–ø–∏—Ç—å') || text.includes('–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏')) return 'buy';
        if (text.includes('—Å–∫–∞—á–∞—Ç—å')) return 'download';
        if (text.includes('–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è') || text.includes('–ø–æ–¥–ø–∏—Å–∫–∞')) return 'subscribe';
        if (text.includes('—Å–ª—É—à–∞—Ç—å') || text.includes('–∏–≥—Ä–∞—Ç—å')) return 'listen';
        if (text.includes('—á–∏—Ç–∞—Ç—å')) return 'read_full';
        if (text.includes('–ø—Ä–µ–º–∏—É–º') || text.includes('premium')) return 'upgrade';
        
        return 'buy'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    async sendAnalytics(data, element) {
        try {
            console.log('üìä Tracking purchase intent:', {
                ...data,
                element_info: {
                    tagName: element.tagName,
                    className: element.className,
                    textContent: element.textContent?.trim().substring(0, 30),
                    datasets: element.dataset
                }
            });

            const response = await fetch('/analytics/track-purchase-intent/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken(),
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ Analytics tracked:', result);
                
                // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                this.showTrackingFeedback(element, result);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                this.maybeShowSubscriptionOffer(result);
                
            } else {
                console.error('‚ùå Analytics error:', response.status, await response.text());
            }
        } catch (error) {
            console.error('‚ùå Analytics failed:', error);
        }
    }

    showTrackingFeedback(element, result) {
        // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        const originalTransform = element.style.transform;
        element.style.transform = 'scale(1.05)';
        element.style.transition = 'transform 0.2s ease';
        
        setTimeout(() => {
            element.style.transform = originalTransform;
        }, 200);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤, –µ—Å–ª–∏ > 1
        if (result.total_clicks > 1) {
            this.showClickCounter(element, result.total_clicks);
        }
    }

    showClickCounter(element, clicks) {
        // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–∏–∫–æ–≤
        const tooltip = document.createElement('div');
        tooltip.className = 'analytics-tooltip';
        tooltip.innerHTML = `
            <small>
                <i class="fas fa-mouse-pointer"></i> 
                ${clicks} —Ä–∞–∑${clicks > 4 ? '' : clicks > 1 ? '–∞' : ''}
            </small>
        `;
        tooltip.style.cssText = `
            position: absolute;
            background: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            z-index: 1000;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
            transform: translateX(-50%);
        `;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏
        const rect = element.getBoundingClientRect();
        tooltip.style.left = (rect.left + rect.width / 2) + 'px';
        tooltip.style.top = (rect.top - 35) + 'px';

        document.body.appendChild(tooltip);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        setTimeout(() => tooltip.style.opacity = '1', 10);
        setTimeout(() => {
            tooltip.style.opacity = '0';
            setTimeout(() => document.body.removeChild(tooltip), 300);
        }, 2000);
    }

    maybeShowSubscriptionOffer(result) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ 3+ –∫–ª–∏–∫–æ–≤
        if (result.total_clicks >= 3 && !this.hasSubscriptionOffer() && result.user_probability > 50) {
            setTimeout(() => this.showSubscriptionModal(), 1000);
        }
    }

    hasSubscriptionOffer() {
        return localStorage.getItem('subscription_offer_shown') === 'true';
    }

    showSubscriptionModal() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        const modal = document.createElement('div');
        modal.className = 'analytics-subscription-modal';
        modal.innerHTML = `
            <div class="modal-overlay" style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.7);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            ">
                <div class="modal-content" style="
                    background: white;
                    border-radius: 15px;
                    padding: 30px;
                    max-width: 400px;
                    text-align: center;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                ">
                    <h3 style="color: #2B5AA0; margin-bottom: 15px;">
                        üîî –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∑–∞–ø—É—Å–∫!
                    </h3>
                    <p style="margin-bottom: 20px; color: #666;">
                        –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç. 
                        –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–∑–Ω–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º–∏ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—É–ø–æ–∫!
                    </p>
                    <input type="email" placeholder="–í–∞—à email" id="subscription-email" style="
                        width: 100%;
                        padding: 12px;
                        border: 2px solid #ddd;
                        border-radius: 8px;
                        margin-bottom: 15px;
                        font-size: 14px;
                    ">
                    <div style="display: flex; gap: 10px;">
                        <button id="subscribe-btn" style="
                            flex: 1;
                            background: #2B5AA0;
                            color: white;
                            border: none;
                            padding: 12px;
                            border-radius: 8px;
                            cursor: pointer;
                            font-weight: 600;
                        ">
                            –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                        </button>
                        <button id="close-modal-btn" style="
                            background: #ddd;
                            color: #666;
                            border: none;
                            padding: 12px 15px;
                            border-radius: 8px;
                            cursor: pointer;
                        ">
                            –ü–æ–∑–∂–µ
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        
        // üîß –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        const subscribeBtn = modal.querySelector('#subscribe-btn');
        const closeBtn = modal.querySelector('#close-modal-btn');
        
        subscribeBtn.addEventListener('click', () => this.subscribeToNotifications());
        closeBtn.addEventListener('click', () => this.closeSubscriptionModal());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const overlay = modal.querySelector('.modal-overlay');
        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
                this.closeSubscriptionModal();
            }
        });
        
        localStorage.setItem('subscription_offer_shown', 'true');
    }

    async subscribeToNotifications() {
        const email = document.getElementById('subscription-email').value;
        
        if (!email || !email.includes('@')) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            return;
        }

        try {
            const response = await fetch('/analytics/subscribe-notifications/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken(),
                },
                body: JSON.stringify({
                    email: email,
                    source_page: window.location.href,
                    interested_in: this.detectContentType()
                })
            });

            if (response.ok) {
                const result = await response.json();
                alert('–°–ø–∞—Å–∏–±–æ! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –∑–∞–ø—É—Å–∫–µ üìß');
                this.closeSubscriptionModal();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        } catch (error) {
            console.error('Subscription error:', error);
            alert('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    closeSubscriptionModal() {
        const modal = document.querySelector('.analytics-subscription-modal');
        if (modal) {
            modal.remove();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let analytics;
document.addEventListener('DOMContentLoaded', function() {
    analytics = new PurchaseAnalytics();
    
    // üîß –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.showCTAModal = () => {
        if (analytics) {
            analytics.showSubscriptionModal();
        } else {
            console.error('Analytics not initialized');
        }
    };
    
    // üêõ –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ CTA –±–ª–æ–∫ –≤ DOM
    const existingCTA = document.querySelector('.cta-section');
    if (existingCTA) {
        console.log('üéØ –ù–∞–π–¥–µ–Ω CTA –±–ª–æ–∫ –≤ DOM:', existingCTA);
        console.log('üîó –ö–Ω–æ–ø–∫–∏ –≤ CTA:', existingCTA.querySelectorAll('a, button'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–Ω–æ–ø–∫–∞–º
        const ctaButtons = existingCTA.querySelectorAll('a, button');
        ctaButtons.forEach((btn, index) => {
            console.log(`üîò –ö–Ω–æ–ø–∫–∞ ${index + 1}:`, btn.textContent.trim(), 'href:', btn.href);
            
            btn.addEventListener('click', function(e) {
                console.log('üñ±Ô∏è –ö–õ–ò–ö –ø–æ –∫–Ω–æ–ø–∫–µ CTA:', this.textContent.trim());
                console.log('üîó URL:', this.href);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å—Å—ã–ª–∫–∞
                if (!this.href || this.href.includes('#') || this.href === 'javascript:void(0)') {
                    e.preventDefault();
                    alert('üîß –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –¢–µ–∫—Å—Ç: ' + this.textContent.trim());
                    return false;
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ email —Å—Å—ã–ª–∫–∞
                if (this.href.startsWith('mailto:')) {
                    console.log('üìß –û—Ç–∫—Ä—ã–≤–∞–µ–º email –∫–ª–∏–µ–Ω—Ç');
                    return true; // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                }
            });
        });
    } else {
        console.log('‚ùå CTA –±–ª–æ–∫ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ DOM');
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω
    // analytics.showSubscriptionModal() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 3+ –∫–ª–∏–∫–æ–≤
    
    // üîß –û–¢–õ–ê–î–ö–ê: –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    console.log('üîç Analytics.js –∑–∞–≥—Ä—É–∂–µ–Ω, –∞–≤—Ç–æ–º–æ–¥–∞–ª–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    window.showSubscribePopup = function() {
        console.log('‚ö†Ô∏è showSubscribePopup –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        return false;
    };
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.analytics = analytics;