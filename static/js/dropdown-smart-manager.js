/**
 * –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dropdown –º–µ–Ω—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏–π
 * –ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ dropdown
 * –í–µ—Ä—Å–∏—è: 1.0
 */

class SmartDropdownManager {
    constructor() {
        this.dropdowns = {};
        this.strategies = {
            'xs': 'close-others',     // < 576px - –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ
            'sm': 'shift-down',       // < 768px - —Å–º–µ—â–∞–µ–º –≤–Ω–∏–∑  
            'md': 'shift-smart',      // < 992px - —É–º–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
            'lg': 'default'           // >= 992px - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        };
        
        this.init();
    }
    
    init() {
        // –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setup());
        } else {
            this.setup();
        }
    }
    
    setup() {
        this.findDropdowns();
        this.addEventListeners();
        console.log('‚úÖ SmartDropdownManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }
    
    findDropdowns() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ dropdown –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navDropdowns = document.querySelectorAll('.navbar .dropdown');
        
        navDropdowns.forEach((dropdown, index) => {
            const toggle = dropdown.querySelector('.dropdown-toggle');
            const menu = dropdown.querySelector('.dropdown-menu');
            
            if (toggle && menu) {
                const id = toggle.id || `dropdown-${index}`;
                this.dropdowns[id] = {
                    element: dropdown,
                    toggle: toggle,
                    menu: menu,
                    isOpen: false,
                    originalPosition: null
                };
            }
        });
        
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${Object.keys(this.dropdowns).length} dropdown –º–µ–Ω—é`);
    }
    
    addEventListeners() {
        Object.keys(this.dropdowns).forEach(id => {
            const dropdown = this.dropdowns[id];
            
            // –°–æ–±—ã—Ç–∏—è Bootstrap dropdown
            dropdown.element.addEventListener('show.bs.dropdown', (e) => {
                this.handleDropdownShow(id, e);
            });
            
            dropdown.element.addEventListener('shown.bs.dropdown', (e) => {
                this.handleDropdownShown(id, e);
            });
            
            dropdown.element.addEventListener('hide.bs.dropdown', (e) => {
                this.handleDropdownHide(id, e);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.handleResize();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.addEventListener('click', (e) => {
            this.handleOutsideClick(e);
        });
    }
    
    handleDropdownShow(currentId, event) {
        console.log(`üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è dropdown: ${currentId}`);
        
        const openDropdowns = this.getOpenDropdowns();
        const strategy = this.getCurrentStrategy();
        
        if (openDropdowns.length > 0 && this.isMobile()) {
            console.log(`‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å: ${openDropdowns.join(', ')}`);
            console.log(`üéØ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ${strategy}`);
            
            this.applyStrategy(strategy, currentId, openDropdowns);
        }
        
        this.dropdowns[currentId].isOpen = true;
    }
    
    handleDropdownShown(currentId, event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
        if (this.isMobile()) {
            this.checkCollisions(currentId);
        }
    }
    
    handleDropdownHide(currentId, event) {
        console.log(`üìÅ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è dropdown: ${currentId}`);
        
        this.dropdowns[currentId].isOpen = false;
        this.resetPosition(currentId);
        this.clearConflictMarkers();
    }
    
    applyStrategy(strategy, currentId, openDropdowns) {
        switch (strategy) {
            case 'close-others':
                this.closeOtherDropdowns(currentId);
                break;
                
            case 'shift-down':
                this.shiftDropdownsDown(openDropdowns);
                break;
                
            case 'shift-smart':
                this.applySmartShift(currentId, openDropdowns);
                break;
                
            default:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Bootstrap
                break;
        }
    }
    
    closeOtherDropdowns(exceptId) {
        console.log('üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ dropdown');
        
        Object.keys(this.dropdowns).forEach(id => {
            if (id !== exceptId && this.dropdowns[id].isOpen) {
                const bsDropdown = bootstrap.Dropdown.getInstance(this.dropdowns[id].toggle);
                if (bsDropdown) {
                    bsDropdown.hide();
                }
            }
        });
    }
    
    shiftDropdownsDown(dropdownIds) {
        console.log('‚¨áÔ∏è –°–º–µ—â–∞–µ–º dropdown –≤–Ω–∏–∑');
        
        dropdownIds.forEach((id, index) => {
            const dropdown = this.dropdowns[id];
            if (dropdown && dropdown.menu) {
                const shiftAmount = 15 + (index * 10); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
                this.applyTransform(dropdown.menu, `translateY(${shiftAmount}px)`);
                this.markAsShifted(dropdown.element);
            }
        });
    }
    
    applySmartShift(currentId, openDropdowns) {
        console.log('üß† –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ');
        
        const currentDropdown = this.dropdowns[currentId];
        if (!currentDropdown) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ dropdown
        const currentRect = currentDropdown.toggle.getBoundingClientRect();
        const isRightSide = currentRect.left > window.innerWidth / 2;
        
        openDropdowns.forEach(id => {
            const dropdown = this.dropdowns[id];
            if (!dropdown) return;
            
            const rect = dropdown.toggle.getBoundingClientRect();
            const distance = Math.abs(rect.left - currentRect.left);
            
            if (distance < 200) { // –ë–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã
                if (isRightSide) {
                    // –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–∞ - —Å–º–µ—â–∞–µ–º –≤–ª–µ–≤–æ –∏ –≤–Ω–∏–∑
                    this.applyTransform(dropdown.menu, 'translate(-25px, 15px)');
                } else {
                    // –ï—Å–ª–∏ —Å–ª–µ–≤–∞ - —Å–º–µ—â–∞–µ–º –≤–ø—Ä–∞–≤–æ –∏ –≤–Ω–∏–∑
                    this.applyTransform(dropdown.menu, 'translate(25px, 15px)');
                }
            } else {
                // –î–∞–ª–µ–∫–æ - –ø—Ä–æ—Å—Ç–æ —Å–º–µ—â–∞–µ–º –≤–Ω–∏–∑
                this.applyTransform(dropdown.menu, 'translateY(20px)');
            }
            
            this.markAsShifted(dropdown.element);
        });
    }
    
    checkCollisions(currentId) {
        const currentDropdown = this.dropdowns[currentId];
        if (!currentDropdown || !currentDropdown.menu) return;
        
        const currentRect = currentDropdown.menu.getBoundingClientRect();
        const openDropdowns = this.getOpenDropdowns().filter(id => id !== currentId);
        
        openDropdowns.forEach(id => {
            const dropdown = this.dropdowns[id];
            if (!dropdown || !dropdown.menu) return;
            
            const rect = dropdown.menu.getBoundingClientRect();
            
            if (this.isColliding(currentRect, rect)) {
                console.log(`üí• –ö–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É ${currentId} –∏ ${id}`);
                this.resolveCollision(currentId, id);
            }
        });
    }
    
    isColliding(rect1, rect2) {
        const buffer = 5; // –ë—É—Ñ–µ—Ä–Ω–∞—è –∑–æ–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        return !(rect1.right < rect2.left - buffer || 
                rect1.left > rect2.right + buffer || 
                rect1.bottom < rect2.top - buffer || 
                rect1.top > rect2.bottom + buffer);
    }
    
    resolveCollision(id1, id2) {
        const dropdown2 = this.dropdowns[id2];
        if (!dropdown2 || !dropdown2.menu) return;
        
        // –°–º–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–π dropdown –¥–∞–ª—å—à–µ
        const currentTransform = dropdown2.menu.style.transform || '';
        const additionalShift = currentTransform.includes('translateY') ? 
            'translate(0, 35px)' : 'translateY(25px)';
            
        this.applyTransform(dropdown2.menu, additionalShift);
        this.markAsConflicted(dropdown2.element);
    }
    
    applyTransform(element, transform) {
        element.style.transform = transform;
        element.style.transition = 'transform 0.3s ease';
    }
    
    resetPosition(id) {
        const dropdown = this.dropdowns[id];
        if (!dropdown || !dropdown.menu) return;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        dropdown.menu.style.transform = '';
        dropdown.menu.style.transition = '';
        
        // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
        this.removeShiftedMarker(dropdown.element);
        this.removeConflictMarker(dropdown.element);
    }
    
    markAsShifted(element) {
        element.classList.add('dropdown-shifted');
    }
    
    removeShiftedMarker(element) {
        element.classList.remove('dropdown-shifted');
    }
    
    markAsConflicted(element) {
        element.classList.add('dropdown-conflict');
    }
    
    removeConflictMarker(element) {
        element.classList.remove('dropdown-conflict');
    }
    
    clearConflictMarkers() {
        Object.keys(this.dropdowns).forEach(id => {
            const dropdown = this.dropdowns[id];
            if (dropdown) {
                this.removeShiftedMarker(dropdown.element);
                this.removeConflictMarker(dropdown.element);
            }
        });
    }
    
    getCurrentStrategy() {
        const width = window.innerWidth;
        
        if (width < 576) return this.strategies.xs;
        if (width < 768) return this.strategies.sm;
        if (width < 992) return this.strategies.md;
        return this.strategies.lg;
    }
    
    isMobile() {
        return window.innerWidth < 992; // Bootstrap lg breakpoint
    }
    
    getOpenDropdowns() {
        return Object.keys(this.dropdowns).filter(id => this.dropdowns[id].isOpen);
    }
    
    handleResize() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        Object.keys(this.dropdowns).forEach(id => {
            this.resetPosition(id);
        });
        
        console.log('üì± –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω, –ø–æ–∑–∏—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
    
    handleOutsideClick(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –≤–Ω–µ –≤—Å–µ—Ö dropdown
        const isInsideDropdown = Object.keys(this.dropdowns).some(id => {
            const dropdown = this.dropdowns[id];
            return dropdown.element.contains(event.target);
        });
        
        if (!isInsideDropdown) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ dropdown
            this.getOpenDropdowns().forEach(id => {
                const bsDropdown = bootstrap.Dropdown.getInstance(this.dropdowns[id].toggle);
                if (bsDropdown) {
                    bsDropdown.hide();
                }
            });
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    forceCloseAll() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö dropdown');
        this.getOpenDropdowns().forEach(id => {
            const bsDropdown = bootstrap.Dropdown.getInstance(this.dropdowns[id].toggle);
            if (bsDropdown) {
                bsDropdown.hide();
            }
        });
    }
    
    getStatus() {
        return {
            total: Object.keys(this.dropdowns).length,
            open: this.getOpenDropdowns().length,
            shifted: Object.keys(this.dropdowns).filter(id => 
                this.dropdowns[id].element.classList.contains('dropdown-shifted')
            ).length,
            conflicts: Object.keys(this.dropdowns).filter(id => 
                this.dropdowns[id].element.classList.contains('dropdown-conflict')
            ).length,
            strategy: this.getCurrentStrategy(),
            isMobile: this.isMobile()
        };
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debug() {
        console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è SmartDropdownManager:');
        console.log('Dropdown —ç–ª–µ–º–µ–Ω—Ç—ã:', this.dropdowns);
        console.log('–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', this.getStatus());
        console.log('–û—Ç–∫—Ä—ã—Ç—ã–µ dropdown:', this.getOpenDropdowns());
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
const smartDropdownStyles = `
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–º–µ—â—ë–Ω–Ω—ã—Ö dropdown */
    .dropdown-shifted .dropdown-toggle::after {
        border-left-color: orange !important;
        border-right-color: orange !important;
        border-top-color: orange !important;
    }
    
    .dropdown-shifted {
        position: relative;
    }
    
    .dropdown-shifted::before {
        content: '';
        position: absolute;
        top: 0;
        right: -3px;
        width: 2px;
        height: 100%;
        background: linear-gradient(45deg, orange, #ff6b35);
        border-radius: 1px;
        z-index: 1000;
        opacity: 0.7;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö dropdown */
    .dropdown-conflict .dropdown-toggle {
        background-color: rgba(255, 193, 7, 0.1) !important;
        border-radius: 4px;
    }
    
    .dropdown-conflict .dropdown-toggle::after {
        border-left-color: #dc3545 !important;
        border-right-color: #dc3545 !important;
        border-top-color: #dc3545 !important;
    }
    
    /* –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è dropdown –º–µ–Ω—é */
    .dropdown-menu {
        transition: transform 0.3s ease, opacity 0.2s ease;
    }
    
    .dropdown-menu.show {
        animation: dropdownFadeIn 0.3s ease;
    }
    
    @keyframes dropdownFadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media (max-width: 991.98px) {
        .dropdown-menu {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;
            border: 1px solid rgba(0, 0, 0, 0.1) !important;
            border-radius: 0.5rem !important;
        }
        
        .dropdown-item {
            padding: 0.7rem 1rem !important;
            transition: all 0.2s ease;
        }
        
        .dropdown-item:hover {
            background-color: rgba(0, 123, 255, 0.1) !important;
            transform: translateX(5px);
        }
    }
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
function addSmartDropdownStyles() {
    const styleId = 'smart-dropdown-styles';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
    if (document.getElementById(styleId)) {
        return;
    }
    
    const styleElement = document.createElement('style');
    styleElement.id = styleId;
    styleElement.textContent = smartDropdownStyles;
    document.head.appendChild(styleElement);
    
    console.log('üé® –°—Ç–∏–ª–∏ SmartDropdown –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
let smartDropdownManager = null;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
(function() {
    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    function initSmartDropdown() {
        addSmartDropdownStyles();
        smartDropdownManager = new SmartDropdownManager();
        
        // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.smartDropdownManager = smartDropdownManager;
        
        console.log('üöÄ SmartDropdownManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        console.log('üí° –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: window.smartDropdownManager.debug()');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSmartDropdown);
    } else {
        initSmartDropdown();
    }
})();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SmartDropdownManager;
}
