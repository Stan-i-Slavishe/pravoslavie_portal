/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–±–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –¥–æ–ª–≥–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
 */

class MobileFeedbackSystem {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.longPressDuration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        this.debounceTime = 300; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.longPressTimer = null;
        this.selectedOption = null;
        this.isModalOpen = false;
        this.lastTouchTime = 0;
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.overlay = null;
        this.indicator = null;
        this.form = null;
        this.textarea = null;
        this.submitBtn = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        if (this.isMobileDevice()) {
            this.init();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
     */
    isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
               ('ontouchstart' in window) ||
               window.innerWidth <= 768;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    init() {
        this.createHTML();
        this.initEventListeners();
        console.log('üî• –°–∏—Å—Ç–µ–º–∞ –º–æ–±–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    createHTML() {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        this.indicator = document.createElement('div');
        this.indicator.className = 'long-press-indicator';
        this.indicator.id = 'longPressIndicator';
        this.indicator.innerHTML = '<div class="long-press-circle"></div>';
        document.body.appendChild(this.indicator);

        // –û–≤–µ—Ä–ª–µ–π —Å —Ñ–æ—Ä–º–æ–π
        this.overlay = document.createElement('div');
        this.overlay.className = 'feedback-overlay';
        this.overlay.id = 'feedbackOverlay';
        this.overlay.innerHTML = `
            <div class="feedback-modal">
                <button class="feedback-close" id="feedbackClose">
                    <i class="bi bi-x"></i>
                </button>
                
                <div class="feedback-header">
                    <div class="feedback-icon">
                        <i class="bi bi-chat-heart"></i>
                    </div>
                    <h4>–£–ª—É—á—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h4>
                    <p>–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</p>
                </div>

                <form id="feedbackForm">
                    <div class="feedback-options">
                        <div class="feedback-option" data-value="bug">
                            <div class="feedback-option-icon">
                                <i class="bi bi-bug"></i>
                            </div>
                            <div class="feedback-option-text">
                                <div class="feedback-option-title">–ù–∞—à—ë–ª –æ—à–∏–±–∫—É</div>
                                <div class="feedback-option-desc">–°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–µ</div>
                            </div>
                        </div>

                        <div class="feedback-option" data-value="feature">
                            <div class="feedback-option-icon">
                                <i class="bi bi-lightbulb"></i>
                            </div>
                            <div class="feedback-option-text">
                                <div class="feedback-option-title">–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ</div>
                                <div class="feedback-option-desc">–ò–¥–µ—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è</div>
                            </div>
                        </div>

                        <div class="feedback-option" data-value="design">
                            <div class="feedback-option-icon">
                                <i class="bi bi-palette"></i>
                            </div>
                            <div class="feedback-option-text">
                                <div class="feedback-option-title">–î–∏–∑–∞–π–Ω –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</div>
                                <div class="feedback-option-desc">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞</div>
                            </div>
                        </div>

                        <div class="feedback-option" data-value="content">
                            <div class="feedback-option-icon">
                                <i class="bi bi-book"></i>
                            </div>
                            <div class="feedback-option-text">
                                <div class="feedback-option-title">–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</div>
                                <div class="feedback-option-desc">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å–∞–π—Ç–∞</div>
                            </div>
                        </div>

                        <div class="feedback-option" data-value="performance">
                            <div class="feedback-option-icon">
                                <i class="bi bi-speedometer2"></i>
                            </div>
                            <div class="feedback-option-text">
                                <div class="feedback-option-title">–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã</div>
                                <div class="feedback-option-desc">–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é</div>
                            </div>
                        </div>

                        <div class="feedback-option" data-value="other">
                            <div class="feedback-option-icon">
                                <i class="bi bi-chat-dots"></i>
                            </div>
                            <div class="feedback-option-text">
                                <div class="feedback-option-title">–î—Ä—É–≥–æ–µ</div>
                                <div class="feedback-option-desc">–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</div>
                            </div>
                        </div>
                    </div>

                    <textarea 
                        class="feedback-textarea" 
                        id="feedbackText" 
                        placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ..."
                        maxlength="1000">
                    </textarea>

                    <div class="feedback-buttons">
                        <button type="button" class="btn-feedback-cancel" id="feedbackCancel">
                            <i class="bi bi-x-circle"></i>–û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="submit" class="btn-feedback-submit" id="feedbackSubmit" disabled>
                            <i class="bi bi-send"></i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                        </button>
                    </div>
                </form>
            </div>
        `;
        document.body.appendChild(this.overlay);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.form = document.getElementById('feedbackForm');
        this.textarea = document.getElementById('feedbackText');
        this.submitBtn = document.getElementById('feedbackSubmit');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    initEventListeners() {
        // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        document.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
        document.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });
        document.addEventListener('touchmove', this.handleTouchEnd.bind(this), { passive: false });

        // –ö–ª–∏–∫–∏ –ø–æ –æ–ø—Ü–∏—è–º
        document.querySelectorAll('.feedback-option').forEach(option => {
            option.addEventListener('click', this.selectOption.bind(this));
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('feedbackClose').addEventListener('click', this.closeFeedback.bind(this));
        document.getElementById('feedbackCancel').addEventListener('click', this.closeFeedback.bind(this));
        this.overlay.addEventListener('click', (e) => {
            if (e.target === this.overlay) {
                this.closeFeedback();
            }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        this.textarea.addEventListener('input', this.validateForm.bind(this));

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        this.form.addEventListener('submit', this.submitFeedback.bind(this));

        // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isModalOpen) {
                this.closeFeedback();
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–∞—Å–∞–Ω–∏—è
     */
    handleTouchStart(e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ
        if (this.isModalOpen) return;

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        const currentTime = Date.now();
        if (currentTime - this.lastTouchTime < this.debounceTime) {
            return;
        }
        this.lastTouchTime = currentTime;

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        const target = e.target;
        if (target.closest('button, a, input, textarea, select, .feedback-overlay, .btn, [role="button"]')) {
            return;
        }

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∏ –∂–µ—Å—Ç—ã
        if (e.touches.length > 1) {
            return;
        }

        this.startLongPress(e.touches[0]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞—Å–∞–Ω–∏—è
     */
    handleTouchEnd(e) {
        this.cancelLongPress();
    }

    /**
     * –ù–∞—á–∞–ª–æ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
     */
    startLongPress(touch) {
        this.showIndicator(touch.clientX, touch.clientY);
        
        this.longPressTimer = setTimeout(() => {
            this.hideIndicator();
            this.showFeedback();
            
            // –í–∏–±—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            if (navigator.vibrate) {
                navigator.vibrate([50, 30, 50]);
            }
        }, this.longPressDuration);
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
     */
    cancelLongPress() {
        if (this.longPressTimer) {
            clearTimeout(this.longPressTimer);
            this.longPressTimer = null;
        }
        this.hideIndicator();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
     */
    showIndicator(x, y) {
        this.indicator.style.left = x + 'px';
        this.indicator.style.top = y + 'px';
        this.indicator.style.transform = 'translate(-50%, -50%)';
        this.indicator.style.display = 'flex';
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
     */
    hideIndicator() {
        this.indicator.style.display = 'none';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    showFeedback() {
        this.isModalOpen = true;
        this.overlay.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // –§–æ–∫—É—Å –Ω–∞ —Ñ–æ—Ä–º–µ –¥–ª—è –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            if (this.textarea) {
                this.textarea.focus();
            }
        }, 300);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    closeFeedback() {
        this.isModalOpen = false;
        this.overlay.classList.remove('show');
        document.body.style.overflow = '';
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            this.resetForm();
        }, 300);
    }

    /**
     * –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
     */
    resetForm() {
        // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
        document.querySelectorAll('.feedback-option').forEach(option => {
            option.classList.remove('selected');
        });
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        this.form.reset();
        this.selectedOption = null;
        this.validateForm();
    }

    /**
     * –í—ã–±–æ—Ä –æ–ø—Ü–∏–∏
     */
    selectOption(e) {
        const option = e.currentTarget;
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π
        document.querySelectorAll('.feedback-option').forEach(opt => {
            opt.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
        option.classList.add('selected');
        this.selectedOption = option.dataset.value;
        
        this.validateForm();
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
     */
    validateForm() {
        const hasOption = this.selectedOption !== null;
        const hasText = this.textarea.value.trim().length > 0;
        
        this.submitBtn.disabled = !(hasOption && hasText);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
     */
    async submitFeedback(e) {
        e.preventDefault();
        
        if (!this.selectedOption || !this.textarea.value.trim()) {
            return;
        }

        const feedbackData = {
            type: this.selectedOption,
            message: this.textarea.value.trim(),
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            screenResolution: `${screen.width}x${screen.height}`
        };

        try {
            this.submitBtn.disabled = true;
            this.submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';

            await this.sendToServer(feedbackData);
            
            this.showSuccessMessage();
            setTimeout(() => {
                this.closeFeedback();
            }, 2500);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
            this.showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', 'error');
            
        } finally {
            this.submitBtn.disabled = false;
            this.submitBtn.innerHTML = '<i class="bi bi-send"></i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async sendToServer(data) {
        const response = await fetch('/api/mobile-feedback/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': this.getCSRFToken()
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        return response.json();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
     */
    getCSRFToken() {
        const cookieValue = document.cookie
            .split('; ')
            .find(row => row.startsWith('csrftoken='))
            ?.split('=')[1];
        return cookieValue;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccessMessage() {
        const modal = document.querySelector('.feedback-modal');
        modal.innerHTML = `
            <div class="feedback-success-content">
                <div class="feedback-success-icon">
                    <i class="bi bi-check-lg"></i>
                </div>
                <h4>–°–ø–∞—Å–∏–±–æ!</h4>
                <p>–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º!</p>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showToast(message, type = 'success') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingToast = document.querySelector('.feedback-toast');
        if (existingToast) {
            existingToast.remove();
        }

        const toast = document.createElement('div');
        toast.className = `feedback-toast ${type}`;
        toast.innerHTML = `
            <i class="bi bi-${type === 'error' ? 'exclamation-triangle' : 'check-circle'}"></i>
            <span>${message}</span>
        `;
        
        document.body.appendChild(toast);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            toast.classList.add('show');
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                toast.remove();
            }, 300);
        }, 4000);
    }

    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    static init() {
        return new MobileFeedbackSystem();
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        MobileFeedbackSystem.init();
    });
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    MobileFeedbackSystem.init();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MobileFeedbackSystem;
}
if (typeof window !== 'undefined') {
    window.MobileFeedbackSystem = MobileFeedbackSystem;
}