// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JavaScript —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîî Initializing notification settings...');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
    setTimeout(() => {
        if (window.adminNotifications) {
            window.adminNotifications.loadActiveCategories();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        setupEventHandlers();
        updateCardStates();
        updateQuietHoursVisibility();
        updateChildModeVisibility();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        loadUserSettings();
    }, 500);
});

function setupEventHandlers() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    document.getElementById('notificationsEnabled').addEventListener('change', function() {
        toggleAllNotifications(this.checked);
        saveSettingsAutomatically();
    });
    
    document.getElementById('quietHoursEnabled').addEventListener('change', function() {
        updateQuietHoursVisibility();
        saveSettingsAutomatically();
    });
    
    document.getElementById('childMode').addEventListener('change', function() {
        updateChildModeVisibility();
        saveSettingsAutomatically();
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.querySelectorAll('.category-toggle').forEach(toggle => {
        toggle.addEventListener('change', function() {
            const category = this.dataset.category;
            const enabled = this.checked;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
            if (window.adminNotifications && !window.adminNotifications.isCategoryActive(category)) {
                console.warn(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}" –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
                this.checked = false;
                showAdminDisabledMessage(category);
                return;
            }
            
            updateCardState(category, enabled);
            saveSettingsAutomatically();
        });
    });
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    document.querySelectorAll('#quietStart, #quietEnd, #childBedtime').forEach(input => {
        input.addEventListener('change', saveSettingsAutomatically);
    });
    
    // –ö–Ω–æ–ø–∫–∏
    document.getElementById('saveSettings').addEventListener('click', () => saveSettings(true));
    document.getElementById('resetSettings').addEventListener('click', resetToDefaults);
}

function showAdminDisabledMessage(category) {
    const categoryNames = {
        'bedtime_stories': '–°–∫–∞–∑–∫–∏ –Ω–∞ –Ω–æ—á—å',
        'orthodox_calendar': '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
        'new_content': '–í–∏–¥–µ–æ-—Ä–∞—Å—Å–∫–∞–∑—ã',
        'fairy_tales': '–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏',
        'book_releases': '–ù–æ–≤—ã–µ –∫–Ω–∏–≥–∏',
        'audio_content': '–ê—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–Ω—Ç'
    };
    
    const categoryName = categoryNames[category] || category;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'alert alert-warning position-fixed';
    notification.style.cssText = `
        top: 20px;
        right: 20px;
        z-index: 1060;
        min-width: 300px;
        animation: slideIn 0.3s ease;
    `;
    
    notification.innerHTML = `
        <i class="fas fa-exclamation-triangle"></i>
        <strong>${categoryName}</strong><br>
        <small>–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</small>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 4000);
}

function toggleAllNotifications(enabled) {
    document.querySelectorAll('.category-toggle').forEach(toggle => {
        const category = toggle.dataset.category;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (window.adminNotifications && !window.adminNotifications.isCategoryActive(category)) {
            toggle.disabled = true;
            toggle.checked = false;
        } else {
            toggle.disabled = !enabled;
        }
    });
    
    document.querySelectorAll('.simple-card').forEach(card => {
        const category = card.dataset.category;
        
        if (window.adminNotifications && !window.adminNotifications.isCategoryActive(category)) {
            card.style.opacity = '0.3';
            card.classList.add('admin-disabled');
        } else {
            card.style.opacity = enabled ? '1' : '0.5';
            card.classList.remove('admin-disabled');
        }
    });
}

function updateCardState(category, enabled) {
    const card = document.querySelector(`[data-category="${category}"]`);
    if (!card) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (window.adminNotifications && !window.adminNotifications.isCategoryActive(category)) {
        card.classList.add('admin-disabled');
        card.style.opacity = '0.3';
        enabled = false;
    } else {
        card.classList.remove('admin-disabled');
        card.style.opacity = '1';
    }
    
    if (enabled) {
        card.classList.add('enabled');
    } else {
        card.classList.remove('enabled');
    }
}

function updateCardStates() {
    document.querySelectorAll('.category-toggle').forEach(toggle => {
        const category = toggle.dataset.category;
        const enabled = toggle.checked;
        updateCardState(category, enabled);
    });
}

function updateQuietHoursVisibility() {
    const enabled = document.getElementById('quietHoursEnabled').checked;
    const settings = document.getElementById('quietHoursSettings');
    
    settings.style.opacity = enabled ? '1' : '0.5';
    settings.querySelectorAll('input').forEach(input => input.disabled = !enabled);
}

function updateChildModeVisibility() {
    const enabled = document.getElementById('childMode').checked;
    const settings = document.getElementById('childModeSettings');
    
    settings.style.display = enabled ? 'block' : 'none';
}

async function saveSettingsAutomatically() {
    clearTimeout(window.autoSaveTimeout);
    window.autoSaveTimeout = setTimeout(async () => {
        await saveSettings(false);
    }, 1000);
}

async function saveSettings(showNotification = true) {
    try {
        const settings = {
            notifications_enabled: document.getElementById('notificationsEnabled').checked,
            quiet_hours_enabled: document.getElementById('quietHoursEnabled').checked,
            quiet_start: document.getElementById('quietStart').value,
            quiet_end: document.getElementById('quietEnd').value,
            child_mode: document.getElementById('childMode').checked,
            child_bedtime: document.getElementById('childBedtime').value,
            categories: {}
        };
        
        // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.querySelectorAll('.category-toggle').forEach(toggle => {
            const category = toggle.dataset.category;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (window.adminNotifications && !window.adminNotifications.isCategoryActive(category)) {
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            }
            
            settings.categories[category] = {
                enabled: toggle.checked
            };
        });
        
        const response = await fetch('/pwa/api/save-notification-settings/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken()
            },
            body: JSON.stringify(settings)
        });
        
        if (response.ok) {
            if (showNotification) {
                showSaveIndicator();
            }
            console.log('‚úÖ Settings saved successfully');
        } else {
            throw new Error('Failed to save settings');
        }
    } catch (error) {
        console.error('‚ùå Error saving settings:', error);
        if (showNotification) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
}

async function loadUserSettings() {
    try {
        const response = await fetch('/pwa/api/get-notification-settings/');
        if (response.ok) {
            const settings = await response.json();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            document.getElementById('notificationsEnabled').checked = settings.notifications_enabled;
            document.getElementById('quietHoursEnabled').checked = settings.quiet_hours_enabled;
            document.getElementById('quietStart').value = settings.quiet_start;
            document.getElementById('quietEnd').value = settings.quiet_end;
            document.getElementById('childMode').checked = settings.child_mode;
            document.getElementById('childBedtime').value = settings.child_bedtime;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É—á–µ—Ç–æ–º –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            for (const [category, categorySettings] of Object.entries(settings.categories)) {
                const toggle = document.querySelector(`[data-category="${category}"]`);
                if (toggle) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
                    if (window.adminNotifications && !window.adminNotifications.isCategoryActive(category)) {
                        toggle.checked = false;
                        toggle.disabled = true;
                    } else {
                        toggle.checked = categorySettings.enabled;
                        toggle.disabled = false;
                    }
                }
            }
            
            updateCardStates();
            updateQuietHoursVisibility();
            updateChildModeVisibility();
            
            console.log('‚úÖ Settings loaded');
        }
    } catch (error) {
        console.error('‚ùå Error loading settings:', error);
    }
}

function resetToDefaults() {
    if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
        document.getElementById('notificationsEnabled').checked = true;
        document.getElementById('quietHoursEnabled').checked = true;
        document.getElementById('quietStart').value = '22:00';
        document.getElementById('quietEnd').value = '08:00';
        document.getElementById('childMode').checked = false;
        document.getElementById('childBedtime').value = '20:00';
        
        // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.querySelectorAll('.category-toggle').forEach(toggle => {
            const category = toggle.dataset.category;
            
            if (window.adminNotifications && !window.adminNotifications.isCategoryActive(category)) {
                toggle.checked = false;
                toggle.disabled = true;
            } else {
                toggle.checked = category !== 'audio_content'; // –ê—É–¥–∏–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                toggle.disabled = false;
            }
        });
        
        updateCardStates();
        updateQuietHoursVisibility();
        updateChildModeVisibility();
        
        saveSettings(true);
    }
}

function showSaveIndicator() {
    const indicator = document.getElementById('saveIndicator');
    indicator.classList.add('show');
    
    setTimeout(() => {
        indicator.classList.remove('show');
    }, 3000);
}

function getCSRFToken() {
    const cookieValue = document.cookie
        .split('; ')
        .find(row => row.startsWith('csrftoken='));
    return cookieValue ? cookieValue.split('=')[1] : '';
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const style = document.createElement('style');
style.textContent = `
    .admin-disabled {
        position: relative;
        pointer-events: none;
    }
    
    .admin-disabled::after {
        content: "–û—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        white-space: nowrap;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .admin-disabled:hover::after {
        opacity: 1;
    }
    
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
`;
document.head.appendChild(style);
