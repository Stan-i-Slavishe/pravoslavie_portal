// –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï AJAX –ü–õ–ï–ô–õ–ò–°–¢–û–í + –ó–ê–ì–†–£–ó–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø
(function() {
    'use strict';
    
    console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–û–í –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û');
    
    function getCSRFToken() {
        return document.querySelector('[name=csrfmiddlewaretoken]')?.value ||
               document.querySelector('meta[name=csrf-token]')?.content ||
               getCookie('csrftoken');
    }
    
    function getCookie(name) {
        if (document.cookie) {
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                const [key, value] = cookie.trim().split('=');
                if (key === name) {
                    return decodeURIComponent(value);
                }
            }
        }
        return null;
    }
    
    function getStoryId() {
        const path = window.location.pathname;
        const parts = path.split('/').filter(Boolean);
        
        if (parts[0] === 'stories' && parts[1] && !parts[1].includes('playlists')) {
            return parts[1];
        }
        return null;
    }
    
    function notify(message, type = 'success') {
        const existing = document.querySelector('.emergency-notification');
        if (existing) existing.remove();
        
        const div = document.createElement('div');
        div.className = 'emergency-notification';
        div.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 99999;
            padding: 15px 20px; border-radius: 8px; color: white; font-weight: bold;
            background: ${type === 'success' ? '#28a745' : '#dc3545'};
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        div.textContent = message;
        document.body.appendChild(div);
        
        setTimeout(() => div && div.remove(), 3000);
        console.log(`üì¢ ${message}`);
    }
    
    async function handleCheckbox(checkbox) {
        const playlistId = checkbox.dataset.playlistId || checkbox.id.replace('playlist_', '');
        const isChecked = checkbox.checked;
        const storyId = getStoryId();
        
        console.log(`üîÑ Playlist: ${playlistId}, Checked: ${isChecked}, Story: ${storyId}`);
        
        if (!storyId) {
            notify('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–∞—Å—Å–∫–∞–∑–∞', 'error');
            checkbox.checked = !isChecked;
            return;
        }
        
        checkbox.disabled = true;
        
        try {
            const csrf = getCSRFToken();
            if (!csrf) {
                throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const url = isChecked ? 
                '/stories/playlists/add-to-playlist/' : 
                '/stories/playlists/remove-from-playlist/';
            
            console.log(`üì° –ó–∞–ø—Ä–æ—Å: ${url}`);
            console.log(`üì° –î–∞–Ω–Ω—ã–µ: story_id=${storyId}, playlist_id=${playlistId}`);
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrf,
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    story_id: storyId,
                    playlist_id: playlistId
                })
            });
            
            console.log(`üì° –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('üì° –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
            
            if (data.success) {
                notify(data.message || (isChecked ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç!' : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞!'), 'success');
                updateCounter(checkbox, isChecked);
            } else {
                throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
            checkbox.checked = !isChecked;
            notify(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        } finally {
            checkbox.disabled = false;
        }
    }
    
    function updateCounter(checkbox, wasAdded) {
        const container = checkbox.closest('.playlist-checkbox-row, .d-flex, .form-check');
        if (!container) return;
        
        const counter = container.querySelector('.small, .text-muted');
        if (!counter) return;
        
        const match = counter.textContent.match(/(\d+) —Ä–∞—Å—Å–∫–∞–∑–æ–≤?/);
        if (match) {
            let count = parseInt(match[1]);
            count += wasAdded ? 1 : -1;
            count = Math.max(0, count);
            
            counter.textContent = counter.textContent.replace(
                /(\d+) —Ä–∞—Å—Å–∫–∞–∑–æ–≤?/,
                `${count} —Ä–∞—Å—Å–∫–∞–∑${count === 1 ? '' : count < 5 ? '–∞' : '–æ–≤'}`
            );
        }
    }
    
    // üÜï –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
    async function loadPlaylistStates() {
        const storyId = getStoryId();
        if (!storyId) return;
        
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞:', storyId);
        
        try {
            const csrf = getCSRFToken();
            if (!csrf) return;
            
            const response = await fetch('/stories/playlists/get-story-status/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrf,
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ story_id: storyId })
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.playlists) {
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–µ–π–ª–∏—Å—Ç–∞—Ö:', data.playlists);
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
                    Object.entries(data.playlists).forEach(([playlistId, hasStory]) => {
                        const checkbox = document.querySelector(`[data-playlist-id="${playlistId}"]`);
                        if (checkbox) {
                            checkbox.checked = hasStory;
                            console.log(`üìå –ü–ª–µ–π–ª–∏—Å—Ç ${playlistId}: ${hasStory ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
                        }
                    });
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                    notify('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:', error);
        }
    }
    
    function init() {
        const selectors = [
            '.playlist-checkbox-item',
            '[data-playlist-id]',
            'input[type="checkbox"][id*="playlist"]',
            'input[type="checkbox"][data-playlist]'
        ];
        
        const checkboxes = [];
        selectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(cb => {
                if (!checkboxes.includes(cb)) {
                    checkboxes.push(cb);
                }
            });
        });
        
        checkboxes.forEach(checkbox => {
            checkbox.removeEventListener('change', handleCheckbox);
            checkbox.addEventListener('change', function() {
                handleCheckbox(this);
            });
        });
        
        console.log(`üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ ${checkboxes.length} —á–µ–∫–±–æ–∫—Å–æ–≤`);
        
        // üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ó–ê–ì–†–£–ñ–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–û–í
        if (checkboxes.length > 0) {
            setTimeout(loadPlaylistStates, 500); // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
        }
        
        return checkboxes.length;
    }
    
    const observer = new MutationObserver(() => {
        setTimeout(init, 100);
    });
    observer.observe(document.body, { childList: true, subtree: true });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.emergencyPlaylistFix = {
        getStoryId,
        getCSRFToken,
        init,
        loadPlaylistStates,
        test: () => {
            console.log('üß™ –¢–ï–°–¢ –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
            console.log('Story ID:', getStoryId());
            console.log('CSRF:', getCSRFToken() || '–ù–ï –ù–ê–ô–î–ï–ù');
            console.log('URL:', window.location.pathname);
            console.log('–ß–µ–∫–±–æ–∫—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', init());
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notify('–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å', 'success');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
            loadPlaylistStates();
        }
    };
    
    // –ó–∞–ø—É—Å–∫
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞
    setTimeout(() => {
        if (getStoryId()) {
            notify('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ!', 'success');
        }
    }, 1000);
    
    console.log('‚úÖ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–û–í –ì–û–¢–û–í–û!');
    
})();

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É
(function() {
    function addTestButton() {
        if (document.getElementById('emergencyTestBtn')) return;
        
        const btn = document.createElement('button');
        btn.id = 'emergencyTestBtn';
        btn.textContent = 'üö® –¢–ï–°–¢ –ü–õ–ï–ô–õ–ò–°–¢–û–í';
        btn.style.cssText = `
            position: fixed;
            top: 10px;
            left: 10px;
            z-index: 99999;
            padding: 10px 15px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        `;
        
        btn.onclick = () => {
            if (window.emergencyPlaylistFix) {
                window.emergencyPlaylistFix.test();
            } else {
                alert('–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            }
        };
        
        document.body.appendChild(btn);
        console.log('üö® –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(addTestButton, 2000);
})();