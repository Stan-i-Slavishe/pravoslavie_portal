// static/js/purchase_intent_tracker.js

class PurchaseIntentTracker {
    constructor() {
        this.setupEventListeners();
        this.sessionId = this.getOrCreateSessionId();
    }
    
    setupEventListeners() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–∫—É–ø–æ–∫
        document.addEventListener('click', (e) => {
            const button = e.target.closest('[data-purchase-intent]');
            if (button) {
                e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                this.trackPurchaseIntent(button);
                this.showComingSoonModal(button);
            }
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        document.addEventListener('click', (e) => {
            const notifyButton = e.target.closest('[data-notify-launch]');
            if (notifyButton) {
                this.showNotificationSubscription(notifyButton);
            }
        });
    }
    
    async trackPurchaseIntent(button) {
        const data = {
            content_type: button.dataset.contentType,
            object_id: button.dataset.objectId,
            button_type: button.dataset.buttonType,
            page_url: window.location.href,
            referer: document.referrer,
            session_key: this.sessionId,
            user_agent: navigator.userAgent,
            timestamp: new Date().toISOString()
        };
        
        try {
            const response = await fetch('/analytics/track-purchase-intent/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            console.log('Purchase intent tracked:', result);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
            this.updateClickCounter(button, result.total_clicks);
            
        } catch (error) {
            console.error('Error tracking purchase intent:', error);
        }
    }
    
    showComingSoonModal(button) {
        const contentType = button.dataset.contentType;
        const buttonType = button.dataset.buttonType;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'purchase-intent-modal';
        modal.innerHTML = `
            <div class="modal-overlay">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>üöÄ –°–∫–æ—Ä–æ –∑–∞–ø—É—Å–∫!</h3>
                        <button class="modal-close">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã!</p>
                        <p>–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ ${this.getContentTypeName(contentType)} 
                           —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏?</p>
                        
                        <form class="notify-form">
                            <input type="email" placeholder="–í–∞—à email" required class="email-input">
                            <input type="hidden" name="interested_in" value="${contentType}">
                            <input type="hidden" name="button_type" value="${buttonType}">
                            <button type="submit" class="btn-notify">–£–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω—è!</button>
                        </form>
                        
                        <div class="social-share">
                            <p>–ê –ø–æ–∫–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏:</p>
                            <div class="share-buttons">
                                <button onclick="shareToTelegram()" class="btn-telegram">Telegram</button>
                                <button onclick="shareToVK()" class="btn-vk">VKontakte</button>
                                <button onclick="shareToWhatsApp()" class="btn-whatsapp">WhatsApp</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.querySelector('.modal-close').onclick = () => modal.remove();
        modal.querySelector('.modal-overlay').onclick = (e) => {
            if (e.target === modal.querySelector('.modal-overlay')) {
                modal.remove();
            }
        };
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–¥–ø–∏—Å–∫–∏
        modal.querySelector('.notify-form').onsubmit = (e) => {
            e.preventDefault();
            this.submitNotificationRequest(e.target, modal);
        };
    }
    
    async submitNotificationRequest(form, modal) {
        const formData = new FormData(form);
        const data = {
            email: formData.get('email'),
            interested_in: formData.get('interested_in'),
            button_type: formData.get('button_type'),
            source_page: window.location.href
        };
        
        try {
            const response = await fetch('/analytics/subscribe-notifications/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (result.success) {
                modal.querySelector('.modal-body').innerHTML = `
                    <div class="success-message">
                        <h4>‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</h4>
                        <p>–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –∑–∞–ø—É—Å–∫–µ!</p>
                        <p><small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.</small></p>
                    </div>
                `;
                
                setTimeout(() => modal.remove(), 3000);
            } else {
                alert('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ' + result.error);
            }
            
        } catch (error) {
            console.error('Error subscribing:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    
    updateClickCounter(button, totalClicks) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
        if (document.body.classList.contains('admin-user')) {
            let counter = button.querySelector('.click-counter');
            if (!counter) {
                counter = document.createElement('span');
                counter.className = 'click-counter';
                button.appendChild(counter);
            }
            counter.textContent = `(${totalClicks} –∫–ª–∏–∫–æ–≤)`;
        }
    }
    
    getContentTypeName(contentType) {
        const names = {
            'book': '–∫–Ω–∏–≥–∞',
            'fairy_tale': '—Å–∫–∞–∑–∫–∞',
            'subscription': '–ø–æ–¥–ø–∏—Å–∫–∞',
            'audio': '–∞—É–¥–∏–æ'
        };
        return names[contentType] || '–∫–æ–Ω—Ç–µ–Ω—Ç';
    }
    
    getOrCreateSessionId() {
        let sessionId = sessionStorage.getItem('purchase_intent_session');
        if (!sessionId) {
            sessionId = 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('purchase_intent_session', sessionId);
        }
        return sessionId;
    }
    
    getCSRFToken() {
        return document.querySelector('[name=csrfmiddlewaretoken]')?.value || 
               document.querySelector('meta[name="csrf-token"]')?.content || '';
    }
}

// –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shareToTelegram() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent('–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª —Å —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∫–∞–∑–∫–∞–º–∏!');
    window.open(`https://t.me/share/url?url=${url}&text=${text}`, '_blank');
}

function shareToVK() {
    const url = encodeURIComponent(window.location.href);
    window.open(`https://vk.com/share.php?url=${url}`, '_blank');
}

function shareToWhatsApp() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent('–ü–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª!');
    window.open(`https://wa.me/?text=${text} ${url}`, '_blank');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new PurchaseIntentTracker();
});
