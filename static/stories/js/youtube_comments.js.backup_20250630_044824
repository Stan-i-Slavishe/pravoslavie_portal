/**
 * üé¨ –†–ê–ë–û–ß–ê–Ø AJAX –°–ò–°–¢–ï–ú–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –í –°–¢–ò–õ–ï YOUTUBE
 * –§–∞–π–ª: static/stories/js/youtube_comments.js
 */

class YouTubeComments {
    constructor() {
        this.csrfToken = this.getCSRFToken();
        this.storySlug = this.getStorySlug();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('YouTube Comments initialized:');
        console.log('Story slug:', this.storySlug);
        console.log('CSRF token:', this.csrfToken ? 'OK' : 'MISSING');
        
        if (!this.storySlug) {
            console.error('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å slug —Ä–∞—Å—Å–∫–∞–∑–∞');
            return;
        }
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.loadComments();
    }

    getCSRFToken() {
        return document.querySelector('[name=csrfmiddlewaretoken]').value;
    }

    getStorySlug() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
        const storyElement = document.querySelector('[data-story-slug]');
        if (storyElement) {
            return storyElement.dataset.storySlug;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL
        const urlParts = window.location.pathname.split('/');
        // URL –≤–∏–¥–∞: /stories/medicina-nuzhdaetsya-v-blagodati/
        // –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–µ—à–∞)
        for (let i = urlParts.length - 1; i >= 0; i--) {
            if (urlParts[i] && urlParts[i] !== 'stories') {
                return urlParts[i];
            }
        }
        
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å slug —Ä–∞—Å—Å–∫–∞–∑–∞');
        return null;
    }

    bindEvents() {
        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const mainCommentForm = document.getElementById('main-comment-form');
        if (mainCommentForm) {
            mainCommentForm.addEventListener('submit', (e) => this.handleMainCommentSubmit(e));
        }

        // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
        const mainTextarea = document.getElementById('comment-text');
        if (mainTextarea) {
            mainTextarea.addEventListener('input', (e) => this.updateCharCount(e.target));
        }

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => this.handleDynamicClicks(e));
        document.addEventListener('submit', (e) => this.handleDynamicSubmits(e));
        document.addEventListener('input', (e) => this.handleDynamicInputs(e));
    }

    handleDynamicClicks(e) {
        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å"
        if (e.target.matches('.reply-btn')) {
            e.preventDefault();
            this.showReplyForm(e.target.dataset.commentId);
        }

        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if (e.target.matches('.cancel-reply-btn')) {
            e.preventDefault();
            this.hideReplyForm(e.target.dataset.commentId);
        }

        // –ö–Ω–æ–ø–∫–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫
        if (e.target.matches('.like-btn, .dislike-btn')) {
            e.preventDefault();
            const commentId = e.target.dataset.commentId;
            const reactionType = e.target.matches('.like-btn') ? 'like' : 'dislike';
            this.toggleReaction(commentId, reactionType);
        }

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        if (e.target.matches('.delete-comment-btn')) {
            e.preventDefault();
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')) {
                this.deleteComment(e.target.dataset.commentId);
            }
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã
        if (e.target.matches('.toggle-replies-btn')) {
            e.preventDefault();
            this.toggleReplies(e.target.dataset.commentId);
        }
    }

    handleDynamicSubmits(e) {
        // –§–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–æ–≤
        if (e.target.matches('.reply-form')) {
            e.preventDefault();
            const commentId = e.target.dataset.commentId;
            this.handleReplySubmit(e, commentId);
        }
    }

    handleDynamicInputs(e) {
        // –°—á–µ—Ç—á–∏–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if (e.target.matches('.reply-textarea')) {
            this.updateCharCount(e.target);
        }
    }

    // ================================================
    // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ AJAX
    // ================================================

    async handleMainCommentSubmit(e) {
        e.preventDefault();
        
        const form = e.target;
        const textarea = form.querySelector('#comment-text');
        const submitBtn = form.querySelector('.submit-comment-btn');
        const text = textarea.value.trim();

        if (!text) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'error');
            return;
        }

        if (text.length > 2000) {
            this.showToast('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)', 'error');
            return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = true;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

        try {
            const response = await fetch(`/stories/ajax/comment/add/${this.storySlug}/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': this.csrfToken,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `text=${encodeURIComponent(text)}`
            });

            const data = await response.json();

            if (data.status === 'success') {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                const commentsContainer = document.getElementById('comments-list');
                if (commentsContainer) {
                    commentsContainer.insertAdjacentHTML('afterbegin', data.comment_html);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                this.updateCommentsCount(data.total_comments);

                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                textarea.value = '';
                this.updateCharCount(textarea);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showToast(data.message, 'success');

                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                const newComment = document.querySelector(`#comment-${data.comment_id}`);
                if (newComment) {
                    newComment.style.opacity = '0';
                    newComment.style.transform = 'translateY(-20px)';
                    setTimeout(() => {
                        newComment.style.transition = 'all 0.3s ease';
                        newComment.style.opacity = '1';
                        newComment.style.transform = 'translateY(0)';
                    }, 100);
                }
            } else {
                this.showToast(data.message, 'error');
            }
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'error');
            console.error('Error:', error);
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.disabled = false;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        }
    }

    async handleReplySubmit(e, commentId) {
        const form = e.target;
        const textarea = form.querySelector('.reply-textarea');
        const submitBtn = form.querySelector('.submit-reply-btn');
        const text = textarea.value.trim();

        if (!text) {
            this.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞', 'error');
            return;
        }

        if (text.length > 2000) {
            this.showToast('–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)', 'error');
            return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = true;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

        try {
            const response = await fetch(`/stories/ajax/reply/add/${commentId}/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': this.csrfToken,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `text=${encodeURIComponent(text)}`
            });

            const data = await response.json();

            if (data.status === 'success') {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
                let repliesContainer = document.querySelector(`#replies-${commentId}`);
                if (!repliesContainer) {
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    const commentElement = document.querySelector(`#comment-${commentId}`);
                    repliesContainer = document.createElement('div');
                    repliesContainer.id = `replies-${commentId}`;
                    repliesContainer.className = 'replies-container';
                    commentElement.appendChild(repliesContainer);
                }

                repliesContainer.insertAdjacentHTML('beforeend', data.reply_html);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                this.updateRepliesCount(commentId, data.replies_count);
                this.updateCommentsCount(data.total_comments);

                // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞
                this.hideReplyForm(commentId);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showToast(data.message, 'success');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–∫—Ä—ã—Ç—ã
                const repliesBtn = document.querySelector(`[data-comment-id="${commentId}"].toggle-replies-btn`);
                if (repliesBtn && repliesContainer.style.display === 'none') {
                    this.showReplies(commentId);
                }

                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                const newReply = document.querySelector(`#comment-${data.reply_id}`);
                if (newReply) {
                    newReply.style.opacity = '0';
                    newReply.style.transform = 'translateX(-20px)';
                    setTimeout(() => {
                        newReply.style.transition = 'all 0.3s ease';
                        newReply.style.opacity = '1';
                        newReply.style.transform = 'translateX(0)';
                    }, 100);
                }
            } else {
                this.showToast(data.message, 'error');
            }
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', 'error');
            console.error('Error:', error);
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.disabled = false;
            submitBtn.textContent = '–û—Ç–≤–µ—Ç–∏—Ç—å';
        }
    }

    async toggleReaction(commentId, reactionType) {
        try {
            const response = await fetch(`/stories/ajax/comment/${commentId}/react/${reactionType}/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': this.csrfToken,
                }
            });

            const data = await response.json();

            if (data.status === 'success') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
                const likeBtn = document.querySelector(`[data-comment-id="${commentId}"].like-btn`);
                const dislikeBtn = document.querySelector(`[data-comment-id="${commentId}"].dislike-btn`);

                if (likeBtn && dislikeBtn) {
                    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                    likeBtn.classList.remove('active');
                    dislikeBtn.classList.remove('active');

                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–∫—Ü–∏–∏
                    if (data.user_reaction === 'like') {
                        likeBtn.classList.add('active');
                    } else if (data.user_reaction === 'dislike') {
                        dislikeBtn.classList.add('active');
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    const likeCount = likeBtn.querySelector('.reaction-count');
                    const dislikeCount = dislikeBtn.querySelector('.reaction-count');

                    if (likeCount) likeCount.textContent = data.likes_count || '';
                    if (dislikeCount) dislikeCount.textContent = data.dislikes_count || '';
                }
            } else {
                this.showToast(data.message, 'error');
            }
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏', 'error');
            console.error('Error:', error);
        }
    }

    async deleteComment(commentId) {
        try {
            const response = await fetch(`/stories/ajax/comment/delete/${commentId}/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': this.csrfToken,
                }
            });

            const data = await response.json();

            if (data.status === 'success') {
                // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                const commentElement = document.querySelector(`#comment-${commentId}`);
                if (commentElement) {
                    commentElement.style.transition = 'all 0.3s ease';
                    commentElement.style.opacity = '0';
                    commentElement.style.transform = 'translateX(-100%)';
                    
                    setTimeout(() => {
                        commentElement.remove();
                    }, 300);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                this.updateCommentsCount(data.total_comments);
                if (data.parent_id) {
                    this.updateRepliesCount(data.parent_id, data.replies_count);
                }

                this.showToast(data.message, 'success');
            } else {
                this.showToast(data.message, 'error');
            }
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', 'error');
            console.error('Error:', error);
        }
    }

    // ================================================
    // –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø UI
    // ================================================

    showReplyForm(commentId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–æ–≤
        document.querySelectorAll('.reply-form-container').forEach(container => {
            container.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const replyContainer = document.querySelector(`#reply-form-${commentId}`);
        if (replyContainer) {
            replyContainer.style.display = 'block';
            const textarea = replyContainer.querySelector('.reply-textarea');
            if (textarea) {
                textarea.focus();
            }
        }
    }

    hideReplyForm(commentId) {
        const replyContainer = document.querySelector(`#reply-form-${commentId}`);
        if (replyContainer) {
            replyContainer.style.display = 'none';
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            const textarea = replyContainer.querySelector('.reply-textarea');
            if (textarea) {
                textarea.value = '';
                this.updateCharCount(textarea);
            }
        }
    }

    toggleReplies(commentId) {
        const repliesContainer = document.querySelector(`#replies-${commentId}`);
        const toggleBtn = document.querySelector(`[data-comment-id="${commentId}"].toggle-replies-btn`);
        
        if (repliesContainer && toggleBtn) {
            if (repliesContainer.style.display === 'none') {
                this.showReplies(commentId);
            } else {
                this.hideReplies(commentId);
            }
        }
    }

    showReplies(commentId) {
        const repliesContainer = document.querySelector(`#replies-${commentId}`);
        const toggleBtn = document.querySelector(`[data-comment-id="${commentId}"].toggle-replies-btn`);
        
        if (repliesContainer && toggleBtn) {
            repliesContainer.style.display = 'block';
            toggleBtn.innerHTML = '<i class="bi bi-chevron-up"></i> –°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã';
        }
    }

    hideReplies(commentId) {
        const repliesContainer = document.querySelector(`#replies-${commentId}`);
        const toggleBtn = document.querySelector(`[data-comment-id="${commentId}"].toggle-replies-btn`);
        
        if (repliesContainer && toggleBtn) {
            repliesContainer.style.display = 'none';
            const repliesCount = repliesContainer.children.length;
            toggleBtn.innerHTML = `<i class="bi bi-chevron-down"></i> –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã (${repliesCount})`;
        }
    }

    updateCharCount(textarea) {
        const maxLength = 2000;
        const currentLength = textarea.value.length;
        const counter = textarea.parentElement.querySelector('.char-counter');
        
        if (counter) {
            counter.textContent = `${currentLength}/${maxLength}`;
            counter.style.color = currentLength > maxLength ? '#dc3545' : '#6c757d';
        }
    }

    updateCommentsCount(count) {
        const counters = document.querySelectorAll('.total-comments-count');
        counters.forEach(counter => {
            counter.textContent = count;
        });
    }

    updateRepliesCount(commentId, count) {
        const toggleBtn = document.querySelector(`[data-comment-id="${commentId}"].toggle-replies-btn`);
        if (toggleBtn && count > 0) {
            toggleBtn.innerHTML = `<i class="bi bi-chevron-down"></i> –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã (${count})`;
            toggleBtn.style.display = 'block';
        } else if (toggleBtn && count === 0) {
            toggleBtn.style.display = 'none';
        }
    }

    // ================================================
    // –ó–ê–ì–†–£–ó–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
    // ================================================

    async loadComments(page = 1) {
        try {
            const response = await fetch(`/stories/ajax/comments/load/${this.storySlug}/?page=${page}`);
            const data = await response.json();

            if (data.status === 'success') {
                // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                const loadingIndicator = document.getElementById('comments-loading');
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                }

                const commentsContainer = document.getElementById('comments-list');
                if (commentsContainer) {
                    if (page === 1) {
                        commentsContainer.innerHTML = data.comments_html;
                    } else {
                        commentsContainer.insertAdjacentHTML('beforeend', data.comments_html);
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                this.updatePagination(data);
            }
        } catch (error) {
            console.error('Error loading comments:', error);
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const loadingIndicator = document.getElementById('comments-loading');
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
            }
        }
    }

    updatePagination(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        this.updateCommentsCount(data.total_comments);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const loadMoreBtn = document.getElementById('load-more-comments');
        if (loadMoreBtn) {
            if (data.has_next) {
                loadMoreBtn.style.display = 'block';
                loadMoreBtn.onclick = () => this.loadComments(data.current_page + 1);
            } else {
                loadMoreBtn.style.display = 'none';
            }
        }
    }

    // ================================================
    // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (Toast)
    // ================================================

    showToast(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º toast –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
            `;
            document.body.appendChild(toastContainer);
        }

        // –°–æ–∑–¥–∞–µ–º toast —ç–ª–µ–º–µ–Ω—Ç
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        toast.style.cssText = `
            background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff'};
            color: white;
            padding: 12px 20px;
            border-radius: 6px;
            margin-bottom: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
            word-wrap: break-word;
        `;
        toast.textContent = message;

        toastContainer.appendChild(toast);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
        }, 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 4000);
    }
}

// ================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ================================================

document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    if (document.getElementById('comments-section') || document.querySelector('[data-story-slug]')) {
        new YouTubeComments();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = YouTubeComments;
}