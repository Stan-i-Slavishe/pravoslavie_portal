// üõ°Ô∏è Service Worker –¥–ª—è –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞
// –í–µ—Ä—Å–∏—è: 1.0.0

const CACHE_NAME = 'pravoslavie-portal-v1';
const OFFLINE_URL = '/offline/';
const CACHE_VERSION = '1.0.0';

// ‚≠ê –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CRITICAL_CACHE = [
  '/',
  '/fairy-tales/',
  '/stories/',
  '/books/',
  '/shop/',
  '/offline/',
  '/static/css/bootstrap.min.css',
  '/static/css/all.min.css',
  '/static/js/bootstrap.bundle.min.js',
  '/static/manifest.json'
];

// üßö –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞
const FAIRY_TALES_CACHE = [
  '/fairy-tales/category/straxi/',
  '/fairy-tales/category/samoocenka/',
  '/fairy-tales/category/otnosheniya/',
  '/fairy-tales/category/povedenie/'
];

// üìö –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —á—Ç–µ–Ω–∏—è
const BOOKS_CACHE = [
  '/books/category/detskie/',
  '/books/category/duhovnye/',
  '/books/category/semeynye/'
];

// üé¨ –ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ä–µ—Å—É—Ä—Å—ã (–∫–µ—à–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
const MEDIA_CACHE = [
  '/stories/playlists/',
  '/audio/'
];

// üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
  console.log('üöÄ Service Worker: Installing...');
  
  event.waitUntil(
    Promise.all([
      // –ö–µ—à–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      caches.open(CACHE_NAME + '-critical').then(cache => {
        console.log('üì¶ Caching critical resources...');
        return cache.addAll(CRITICAL_CACHE.map(url => new Request(url, {
          cache: 'reload'
        })));
      }),
      
      // –ö–µ—à–∏—Ä—É–µ–º —Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π
      caches.open(CACHE_NAME + '-fairy-tales').then(cache => {
        console.log('üßö Caching fairy tales...');
        return cache.addAll(FAIRY_TALES_CACHE);
      }),
      
      // –ö–µ—à–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏
      caches.open(CACHE_NAME + '-books').then(cache => {
        console.log('üìö Caching books...');
        return cache.addAll(BOOKS_CACHE);
      })
    ]).then(() => {
      console.log('‚úÖ Service Worker: Installation complete!');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW
      return self.skipWaiting();
    }).catch(error => {
      console.error('‚ùå Service Worker: Installation failed:', error);
    })
  );
});

// üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
  console.log('üîÑ Service Worker: Activating...');
  
  event.waitUntil(
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName.indexOf(CACHE_NAME) === 0 && cacheName !== CACHE_NAME + '-critical' && 
              cacheName !== CACHE_NAME + '-fairy-tales' && cacheName !== CACHE_NAME + '-books') {
            console.log('üóëÔ∏è Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('‚úÖ Service Worker: Activation complete!');
      // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      return self.clients.claim();
    })
  );
});

// üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', event => {
  const request = event.request;
  const url = new URL(request.url);
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –¥—Ä—É–≥–∏–º –¥–æ–º–µ–Ω–∞–º –∏ –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
  if (url.origin !== location.origin || request.method !== 'GET') {
    return;
  }
  
  // üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  
  // 1. üßö –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏ - Cache First (–≤–∞–∂–Ω–æ –¥–ª—è –æ—Ñ–ª–∞–π–Ω)
  if (url.pathname.startsWith('/fairy-tales/')) {
    event.respondWith(cacheFirst(request, CACHE_NAME + '-fairy-tales'));
    return;
  }
  
  // 2. üìö –ö–Ω–∏–≥–∏ - Cache First
  if (url.pathname.startsWith('/books/')) {
    event.respondWith(cacheFirst(request, CACHE_NAME + '-books'));
    return;
  }
  
  // 3. üé¨ –í–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - Network First
  if (url.pathname.startsWith('/stories/') || url.pathname.startsWith('/audio/')) {
    event.respondWith(networkFirst(request, CACHE_NAME + '-critical'));
    return;
  }
  
  // 4. üõí –ú–∞–≥–∞–∑–∏–Ω –∏ –∫–æ—Ä–∑–∏–Ω–∞ - —Ç–æ–ª—å–∫–æ Network (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
  if (url.pathname.startsWith('/shop/') || url.pathname.startsWith('/cart/')) {
    event.respondWith(networkOnly(request));
    return;
  }
  
  // 5. üè† –ì–ª–∞–≤–Ω–∞—è –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - Stale While Revalidate
  if (CRITICAL_CACHE.includes(url.pathname)) {
    event.respondWith(staleWhileRevalidate(request, CACHE_NAME + '-critical'));
    return;
  }
  
  // 6. üì∑ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - Cache First —Å –¥–ª–∏–Ω–Ω—ã–º TTL
  if (url.pathname.startsWith('/static/') || url.pathname.startsWith('/media/')) {
    event.respondWith(cacheFirst(request, CACHE_NAME + '-static', 86400000)); // 24 —á–∞—Å–∞
    return;
  }
  
  // 7. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - Network First —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
  event.respondWith(networkFirstWithOffline(request));
});

// üì¶ Cache First —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function cacheFirst(request, cacheName, maxAge = 3600000) {
  try {
    const cache = await caches.open(cacheName);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      const cachedDate = new Date(cachedResponse.headers.get('date'));
      const now = new Date();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞
      if (now - cachedDate < maxAge) {
        console.log('üì¶ Cache hit:', request.url);
        return cachedResponse;
      }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      console.log('üåê Network hit, updating cache:', request.url);
      await cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('üì¶ Cache fallback:', request.url);
    const cache = await caches.open(cacheName);
    return await cache.match(request) || await cache.match(OFFLINE_URL);
  }
}

// üåê Network First —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function networkFirst(request, cacheName) {
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
      await cache.put(request, networkResponse.clone());
      console.log('üåê Network first, cached:', request.url);
    }
    
    return networkResponse;
  } catch (error) {
    console.log('üì¶ Network failed, cache fallback:', request.url);
    const cache = await caches.open(cacheName);
    return await cache.match(request) || await cache.match(OFFLINE_URL);
  }
}

// ‚ö° Stale While Revalidate —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function staleWhileRevalidate(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);
  
  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
  const networkResponsePromise = fetch(request).then(networkResponse => {
    if (networkResponse.ok) {
      cache.put(request, networkResponse.clone());
      console.log('‚ö° Background update:', request.url);
    }
    return networkResponse;
  }).catch(() => {
    console.log('‚ö° Background update failed:', request.url);
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –∂–¥–µ–º —Å–µ—Ç—å
  return cachedResponse || networkResponsePromise || cache.match(OFFLINE_URL);
}

// üåê Network Only —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async function networkOnly(request) {
  try {
    return await fetch(request);
  } catch (error) {
    // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return await caches.match(OFFLINE_URL);
  }
}

// üåê Network First —Å –æ—Ñ–ª–∞–π–Ω —Ñ–æ–ª–ª–±—ç–∫–æ–º
async function networkFirstWithOffline(request) {
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(CACHE_NAME + '-critical');
      await cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    const cache = await caches.open(CACHE_NAME + '-critical');
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return await cache.match(OFFLINE_URL);
  }
}

// üîî Background Sync –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
self.addEventListener('sync', event => {
  console.log('üîÑ Background sync triggered:', event.tag);
  
  if (event.tag === 'playlist-sync') {
    event.waitUntil(syncPlaylists());
  }
  
  if (event.tag === 'favorites-sync') {
    event.waitUntil(syncFavorites());
  }
  
  if (event.tag === 'cart-sync') {
    event.waitUntil(syncCart());
  }
});

// üéµ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
async function syncPlaylists() {
  try {
    console.log('üéµ Syncing playlists...');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–∑ IndexedDB
    const pendingPlaylists = await getPendingPlaylists();
    
    for (const playlist of pendingPlaylists) {
      try {
        await fetch('/stories/playlists/sync/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': await getCSRFToken()
          },
          body: JSON.stringify(playlist)
        });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        await markPlaylistSynced(playlist.id);
        console.log('‚úÖ Playlist synced:', playlist.name);
      } catch (error) {
        console.error('‚ùå Failed to sync playlist:', playlist.name, error);
      }
    }
  } catch (error) {
    console.error('‚ùå Playlist sync failed:', error);
  }
}

// ‚≠ê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async function syncFavorites() {
  try {
    console.log('‚≠ê Syncing favorites...');
    
    const pendingFavorites = await getPendingFavorites();
    
    for (const favorite of pendingFavorites) {
      try {
        await fetch('/favorites/sync/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': await getCSRFToken()
          },
          body: JSON.stringify(favorite)
        });
        
        await markFavoriteSynced(favorite.id);
        console.log('‚úÖ Favorite synced:', favorite.item_id);
      } catch (error) {
        console.error('‚ùå Failed to sync favorite:', favorite.item_id, error);
      }
    }
  } catch (error) {
    console.error('‚ùå Favorites sync failed:', error);
  }
}

// üõí –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
async function syncCart() {
  try {
    console.log('üõí Syncing cart...');
    
    const pendingCartItems = await getPendingCartItems();
    
    for (const item of pendingCartItems) {
      try {
        await fetch('/shop/cart/sync/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': await getCSRFToken()
          },
          body: JSON.stringify(item)
        });
        
        await markCartItemSynced(item.id);
        console.log('‚úÖ Cart item synced:', item.product_id);
      } catch (error) {
        console.error('‚ùå Failed to sync cart item:', item.product_id, error);
      }
    }
  } catch (error) {
    console.error('‚ùå Cart sync failed:', error);
  }
}

// üîî Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('push', event => {
  console.log('üîî Push notification received');
  
  const options = {
    body: '–£ –Ω–∞—Å –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –¥–ª—è –≤–∞—Å!',
    icon: '/static/icons/icon-192x192.png',
    badge: '/static/icons/badge-72x72.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        icon: '/static/icons/checkmark.png'
      },
      {
        action: 'close',
        title: '–ó–∞–∫—Ä—ã—Ç—å',
        icon: '/static/icons/xmark.png'
      }
    ],
    requireInteraction: false,
    silent: false
  };
  
  if (event.data) {
    const data = event.data.json();
    options.body = data.body || options.body;
    options.data.url = data.url || '/';
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (data.type === 'bedtime_story') {
      options.body = 'üåô –í—Ä–µ–º—è —Å–∫–∞–∑–∫–∏ –Ω–∞ –Ω–æ—á—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –º–∞–ª—ã—à–∞';
      options.data.url = '/fairy-tales/';
      options.requireInteraction = true;
    } else if (data.type === 'orthodox_calendar') {
      options.body = `‚õ™ ${data.body}`;
      options.data.url = data.url || '/stories/';
    } else if (data.type === 'new_content') {
      options.body = `üìö ${data.body}`;
      options.data.url = data.url || '/';
    }
  }
  
  event.waitUntil(
    self.registration.showNotification('–î–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏', options)
  );
});

// üëÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', event => {
  console.log('üëÜ Notification clicked:', event.action);
  
  event.notification.close();
  
  if (event.action === 'close') {
    return;
  }
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const urlToOpen = event.notification.data.url || '/';
  
  event.waitUntil(
    clients.matchAll({
      type: 'window',
      includeUncontrolled: true
    }).then(clientList => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º
      for (const client of clientList) {
        if (client.url.includes(self.location.origin) && 'focus' in client) {
          return client.focus().then(() => {
            return client.navigate(urlToOpen);
          });
        }
      }
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen);
      }
    })
  );
});

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB
async function getPendingPlaylists() {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB
  return [];
}

async function markPlaylistSynced(id) {
  // –ü–æ–º–µ—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
}

async function getPendingFavorites() {
  return [];
}

async function markFavoriteSynced(id) {
  // –ü–æ–º–µ—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
}

async function getPendingCartItems() {
  return [];
}

async function markCartItemSynced(id) {
  // –ü–æ–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
}

async function getCSRFToken() {
  // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è Django
  try {
    const response = await fetch('/get-csrf-token/');
    const data = await response.json();
    return data.csrfToken;
  } catch (error) {
    return '';
  }
}

console.log('üõ°Ô∏è Service Worker loaded successfully!');
