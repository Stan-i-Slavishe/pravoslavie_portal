from django.contrib import admin
from django.utils.html import format_html
from django.db import models
from django.core.cache import cache
from .models import (
    Story, StoryLike, 
    Playlist, PlaylistItem, StoryView, StoryRecommendation,
    SearchQuery, UserRecommendation, UserWatchHistory,
    StoryComment, CommentReaction, CommentReport
)


# ==========================================
# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –î–õ–Ø STORIES
# ==========================================

@admin.register(Story)
class StoryAdmin(admin.ModelAdmin):
    list_display = [
        'title', 
        'category', 
        'views_count', 
        'likes_count_display',
        'comments_count_display',
        'is_featured', 
        'is_published', 
        'created_at'
    ]
    list_filter = [
        'is_published', 
        'is_featured', 
        'category', 
        'created_at'
    ]
    search_fields = ['title', 'description']
    prepopulated_fields = {'slug': ('title',)}
    filter_horizontal = ['tags']
    readonly_fields = [
        'views_count', 
        'youtube_embed_id', 
        'created_at', 
        'updated_at',
        'likes_count_display',
        'comments_count_display'
    ]
    
    # –ö–†–ò–¢–ò–ß–ù–û: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
    list_select_related = ['category']
    list_prefetch_related = ['tags', 'likes', 'comments']
    
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    list_per_page = 25
    list_max_show_all = 100
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'description')
        }),
        ('YouTube –≤–∏–¥–µ–æ', {
            'fields': ('youtube_url', 'youtube_embed_id'),
            'description': '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ. ID –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
        }),
        ('–ú–µ–¥–∏–∞', {
            'fields': ('thumbnail', 'duration'),
            'classes': ('collapse',)
        }),
        ('–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è', {
            'fields': ('category', 'tags')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', {
            'fields': ('is_published', 'is_featured')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': (
                'views_count', 
                'likes_count_display',
                'comments_count_display',
                'created_at', 
                'updated_at'
            ),
            'classes': ('collapse',)
        }),
    )

    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QuerySet —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ JOIN'–∞–º–∏"""
        return super().get_queryset(request).select_related(
            'category'
        ).prefetch_related(
            models.Prefetch(
                'likes',
                queryset=StoryLike.objects.select_related('user')
            ),
            models.Prefetch(
                'comments',
                queryset=StoryComment.objects.filter(is_approved=True)
            )
        ).annotate(
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–æ–≤ –ø—Ä—è–º–æ –≤ SQL
            total_likes=models.Count('likes', distinct=True),
            total_comments=models.Count('comments', filter=models.Q(comments__is_approved=True), distinct=True)
        )

    def likes_count_display(self, obj):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ª–∞–π–∫–æ–≤"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return getattr(obj, 'total_likes', obj.likes.count())
    likes_count_display.short_description = "üëç –õ–∞–π–∫–∏"
    likes_count_display.admin_order_field = 'total_likes'

    def comments_count_display(self, obj):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return getattr(obj, 'total_comments', obj.comments.filter(is_approved=True).count())
    comments_count_display.short_description = "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    comments_count_display.admin_order_field = 'total_comments'

    def save_model(self, request, obj, form, change):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        if obj.youtube_url and not obj.youtube_embed_id:
            obj.youtube_embed_id = obj.extract_youtube_id(obj.youtube_url)
        
        super().save_model(request, obj, form, change)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        cache_keys = [
            f'story_detail_{obj.slug}',
            'stories_list',
            'featured_stories'
        ]
        cache.delete_many(cache_keys)

    class Media:
        css = {
            'all': ('admin/css/stories_admin.css',)
        }


# ==========================================
# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –î–õ–Ø –ü–õ–ï–ô–õ–ò–°–¢–û–í
# ==========================================

class PlaylistItemInline(admin.TabularInline):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–ª–∞–π–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    model = PlaylistItem
    extra = 0
    min_num = 0
    max_num = 20  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–ª–∞–π–Ω–æ–≤
    fields = ['story', 'order']
    ordering = ['order']
    autocomplete_fields = ['story']
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω–∞
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('story')


@admin.register(Playlist)
class PlaylistAdmin(admin.ModelAdmin):
    list_display = [
        'title',
        'creator',
        'story_count_display',
        'playlist_type',
        'is_active',
        'views_count', 
        'created_at'
    ]
    list_filter = [
        'playlist_type',
        'is_active',
        'created_at',
        'creator'
    ]
    search_fields = ['title', 'description', 'creator__username']
    prepopulated_fields = {'slug': ('title',)}
    readonly_fields = ['views_count', 'created_at', 'updated_at']
    inlines = [PlaylistItemInline]
    
    # –ö–†–ò–¢–ò–ß–ù–û: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    list_select_related = ['creator']
    list_per_page = 20
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'description', 'creator')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('playlist_type', 'is_active', 'cover_image')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('views_count', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QuerySet —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏"""
        return super().get_queryset(request).select_related(
            'creator'
        ).annotate(
            items_count=models.Count('playlist_items', distinct=True)
        )
    
    def story_count_display(self, obj):
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞"""
        return getattr(obj, 'items_count', 0)
    story_count_display.short_description = "–ö–æ–ª-–≤–æ —Ä–∞—Å—Å–∫–∞–∑–æ–≤"
    story_count_display.admin_order_field = 'items_count'


# ==========================================
# –£–ü–†–û–©–ï–ù–ù–´–ï –ê–î–ú–ò–ù–ö–ò –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô
# ==========================================

@admin.register(StoryLike)
class StoryLikeAdmin(admin.ModelAdmin):
    list_display = ['story_title', 'user', 'created_at']
    list_filter = ['created_at']
    search_fields = ['story__title', 'user__username']
    readonly_fields = ['created_at']
    list_select_related = ['story', 'user']
    list_per_page = 50
    
    def story_title(self, obj):
        return obj.story.title
    story_title.short_description = "–†–∞—Å—Å–∫–∞–∑"
    story_title.admin_order_field = 'story__title'


@admin.register(StoryView)
class StoryViewAdmin(admin.ModelAdmin):
    list_display = [
        'story_title', 
        'user_display', 
        'view_count', 
        'last_viewed'
    ]
    list_filter = [
        'last_viewed', 
        ('story', admin.RelatedOnlyFieldListFilter)
    ]
    search_fields = ['story__title', 'user__username']
    readonly_fields = ['first_viewed', 'last_viewed']
    date_hierarchy = 'last_viewed'
    list_select_related = ['story', 'user']
    list_per_page = 100
    
    def story_title(self, obj):
        return obj.story.title
    story_title.short_description = "–†–∞—Å—Å–∫–∞–∑"
    story_title.admin_order_field = 'story__title'
    
    def user_display(self, obj):
        return obj.user.username if obj.user else f"IP: {obj.ip_address}"
    user_display.short_description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"


@admin.register(SearchQuery)
class SearchQueryAdmin(admin.ModelAdmin):
    list_display = ['query', 'count', 'last_searched']
    list_filter = ['last_searched']
    search_fields = ['query']
    readonly_fields = ['created_at', 'last_searched']
    ordering = ['-count', '-last_searched']
    list_per_page = 50


# ==========================================
# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
# ==========================================

@admin.register(StoryComment)
class StoryCommentAdmin(admin.ModelAdmin):
    list_display = [
        'comment_preview',
        'user',
        'story_title',
        'reaction_score',
        'replies_count',
        'is_approved',
        'created_at'
    ]
    list_filter = [
        'is_approved',
        'is_pinned',
        'created_at',
        ('story', admin.RelatedOnlyFieldListFilter),
        ('user', admin.RelatedOnlyFieldListFilter)
    ]
    search_fields = [
        'text',
        'user__username',
        'story__title'
    ]
    readonly_fields = [
        'likes_count',
        'dislikes_count',
        'replies_count',
        'created_at',
        'updated_at'
    ]
    list_editable = ['is_approved']
    date_hierarchy = 'created_at'
    ordering = ['-created_at']
    
    # –ö–†–ò–¢–ò–ß–ù–û: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    list_select_related = ['user', 'story', 'parent']
    list_per_page = 30
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QuerySet"""
        return super().get_queryset(request).select_related(
            'user', 'story', 'parent__user'
        ).annotate(
            # –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –≤ SQL
            total_likes=models.Count(
                'reactions',
                filter=models.Q(reactions__reaction_type='like'),
                distinct=True
            ),
            total_dislikes=models.Count(
                'reactions',
                filter=models.Q(reactions__reaction_type='dislike'),
                distinct=True
            )
        )
    
    def story_title(self, obj):
        return obj.story.title
    story_title.short_description = "–†–∞—Å—Å–∫–∞–∑"
    story_title.admin_order_field = 'story__title'
    
    def comment_preview(self, obj):
        """–ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–≤—å—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        preview = obj.text[:80]
        if len(obj.text) > 80:
            preview += '...'
        
        if obj.parent:
            return format_html(
                '<div style="margin-left: 20px; color: #666;">‚Ü≥ {}</div>',
                preview
            )
        return format_html('<div>{}</div>', preview)
    comment_preview.short_description = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
    
    def reaction_score(self, obj):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç —Ä–µ–∞–∫—Ü–∏–π"""
        likes = getattr(obj, 'total_likes', obj.likes_count)
        dislikes = getattr(obj, 'total_dislikes', obj.dislikes_count)
        score = likes - dislikes
        
        if score > 0:
            return format_html('<span style="color: green;">+{}</span>', score)
        elif score < 0:
            return format_html('<span style="color: red;">{}</span>', score)
        return score
    reaction_score.short_description = '–†–µ–π—Ç–∏–Ω–≥'
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = ['approve_comments', 'disapprove_comments']
    
    def approve_comments(self, request, queryset):
        count = queryset.update(is_approved=True)
        self.message_user(request, f'{count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ.')
    approve_comments.short_description = '–û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ'
    
    def disapprove_comments(self, request, queryset):
        count = queryset.update(is_approved=False)
        self.message_user(request, f'{count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫—Ä—ã—Ç–æ.')
    disapprove_comments.short_description = '–°–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ'


# ==========================================
# –£–ü–†–û–©–ï–ù–ù–´–ï –ê–î–ú–ò–ù–ö–ò –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô
# ==========================================

@admin.register(CommentReaction)
class CommentReactionAdmin(admin.ModelAdmin):
    list_display = ['comment_id', 'user', 'reaction_type', 'created_at']
    list_filter = ['reaction_type', 'created_at']
    search_fields = ['user__username']
    readonly_fields = ['created_at']
    list_select_related = ['user', 'comment']
    list_per_page = 100
    
    def comment_id(self, obj):
        return f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π #{obj.comment.id}"
    comment_id.short_description = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'


@admin.register(PlaylistItem)
class PlaylistItemAdmin(admin.ModelAdmin):
    list_display = ['playlist_title', 'story_title', 'order']
    list_filter = [
        ('playlist', admin.RelatedOnlyFieldListFilter),
        'added_at'
    ]
    search_fields = ['playlist__title', 'story__title']
    ordering = ['playlist', 'order']
    readonly_fields = ['added_at']
    list_select_related = ['playlist', 'story']
    list_per_page = 50
    
    def playlist_title(self, obj):
        return obj.playlist.title
    playlist_title.short_description = "–ü–ª–µ–π–ª–∏—Å—Ç"
    playlist_title.admin_order_field = 'playlist__title'
    
    def story_title(self, obj):
        return obj.story.title
    story_title.short_description = "–†–∞—Å—Å–∫–∞–∑"
    story_title.admin_order_field = 'story__title'


# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
admin.site.register(StoryRecommendation)
admin.site.register(UserRecommendation)
admin.site.register(UserWatchHistory)
admin.site.register(CommentReport)


# ==========================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø
# ==========================================

# –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
admin.site.site_title = "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
admin.site.index_title = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
