# Generated by Django 4.2.7 on 2025-06-30 04:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название плейлиста')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='URL (slug)')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('playlist_type', models.CharField(choices=[('public', 'Публичный'), ('private', 'Приватный'), ('featured', 'Рекомендуемый'), ('series', 'Серия')], default='public', max_length=20, verbose_name='Тип плейлиста')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='playlists/covers/', verbose_name='Обложка плейлиста')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Просмотры')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Плейлист',
                'verbose_name_plural': 'Плейлисты',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=255, verbose_name='Запрос')),
                ('count', models.PositiveIntegerField(default=1, verbose_name='Количество поисков')),
                ('last_searched', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Поисковый запрос',
                'verbose_name_plural': 'Поисковые запросы',
                'ordering': ['-count', '-last_searched'],
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='URL (slug)')),
                ('description', models.TextField(verbose_name='Описание')),
                ('youtube_url', models.URLField(help_text='Ссылка на видео YouTube (например: https://www.youtube.com/watch?v=VIDEO_ID)', verbose_name='YouTube URL')),
                ('youtube_embed_id', models.CharField(blank=True, help_text='Автоматически извлекается из URL', max_length=100, verbose_name='YouTube ID')),
                ('duration', models.CharField(blank=True, help_text='Например: 15:32', max_length=20, verbose_name='Длительность')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Количество просмотров')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Рекомендуемое')),
                ('is_published', models.BooleanField(default=True, verbose_name='Опубликовано')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category', verbose_name='Категория')),
                ('tags', models.ManyToManyField(blank=True, to='core.tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Рассказ',
                'verbose_name_plural': 'Рассказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserWatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watched_at', models.DateTimeField(auto_now_add=True)),
                ('watch_duration', models.PositiveIntegerField(default=0, verbose_name='Длительность просмотра (сек)')),
                ('completed', models.BooleanField(default=False, verbose_name='Просмотрено полностью')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_views', to='stories.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'История просмотров',
                'verbose_name_plural': 'История просмотров',
                'ordering': ['-watched_at'],
            },
        ),
        migrations.CreateModel(
            name='PlaylistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядок в плейлисте', verbose_name='Порядок')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Добавлено')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlist_items', to='stories.playlist', verbose_name='Плейлист')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlist_items', to='stories.story', verbose_name='Рассказ')),
            ],
            options={
                'verbose_name': 'Элемент плейлиста',
                'verbose_name_plural': 'Элементы плейлиста',
                'ordering': ['order', 'added_at'],
            },
        ),
        migrations.AddField(
            model_name='playlist',
            name='stories',
            field=models.ManyToManyField(related_name='playlists', through='stories.PlaylistItem', to='stories.story', verbose_name='Рассказы'),
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0, verbose_name='Оценка релевантности')),
                ('reason', models.CharField(choices=[('similar_category', 'Похожая категория'), ('similar_tags', 'Похожие теги'), ('popular', 'Популярное'), ('new', 'Новое'), ('similar_users', 'Похожие пользователи')], max_length=100, verbose_name='Причина рекомендации')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_viewed', models.BooleanField(default=False, verbose_name='Просмотрено')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_recommendations', to='stories.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Рекомендация',
                'verbose_name_plural': 'Рекомендации',
                'ordering': ['-score', '-created_at'],
                'unique_together': {('user', 'story')},
            },
        ),
        migrations.CreateModel(
            name='StoryView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес')),
                ('view_count', models.PositiveIntegerField(default=1, verbose_name='Количество просмотров')),
                ('first_viewed', models.DateTimeField(auto_now_add=True, verbose_name='Первый просмотр')),
                ('last_viewed', models.DateTimeField(auto_now=True, verbose_name='Последний просмотр')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='stories.story')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Просмотр',
                'verbose_name_plural': 'Просмотры',
                'indexes': [models.Index(fields=['story', 'user'], name='stories_sto_story_i_8c4de9_idx'), models.Index(fields=['story', 'ip_address'], name='stories_sto_story_i_37fd27_idx')],
                'unique_together': {('story', 'user'), ('story', 'ip_address')},
            },
        ),
        migrations.CreateModel(
            name='StoryRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(default=0.0, help_text='От 0.0 до 1.0', verbose_name='Оценка сходства')),
                ('recommendation_type', models.CharField(choices=[('category', 'По категории'), ('tags', 'По тегам'), ('popularity', 'По популярности'), ('collaborative', 'Коллаборативная фильтрация'), ('content', 'По содержанию')], default='category', max_length=50, verbose_name='Тип рекомендации')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('recommended_story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_recommendations', to='stories.story', verbose_name='Рекомендуемый рассказ')),
                ('source_story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_recommendations', to='stories.story', verbose_name='Исходный рассказ')),
            ],
            options={
                'verbose_name': 'Рекомендация',
                'verbose_name_plural': 'Рекомендации',
                'ordering': ['-similarity_score', '-created_at'],
                'indexes': [models.Index(fields=['source_story', 'similarity_score'], name='stories_sto_source__9352ed_idx'), models.Index(fields=['recommendation_type'], name='stories_sto_recomme_6b4e43_idx')],
                'unique_together': {('source_story', 'recommended_story')},
            },
        ),
        migrations.CreateModel(
            name='StoryLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='stories.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Лайк',
                'verbose_name_plural': 'Лайки',
                'unique_together': {('story', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='playlistitem',
            index=models.Index(fields=['playlist', 'order'], name='stories_pla_playlis_bb74ce_idx'),
        ),
        migrations.AddIndex(
            model_name='playlistitem',
            index=models.Index(fields=['story'], name='stories_pla_story_i_4af556_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playlistitem',
            unique_together={('playlist', 'story')},
        ),
    ]
