# Generated by Django 4.2.7 on 2025-07-04 00:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('stories', '0004_fix_playlist_final'),
    ]

    operations = [
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=255, verbose_name='Запрос')),
                ('count', models.PositiveIntegerField(default=1, verbose_name='Количество поисков')),
                ('last_searched', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Поисковый запрос',
                'verbose_name_plural': 'Поисковые запросы',
                'ordering': ['-count', '-last_searched'],
            },
        ),
        migrations.CreateModel(
            name='StoryLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Лайк',
                'verbose_name_plural': 'Лайки',
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0, verbose_name='Оценка релевантности')),
                ('reason', models.CharField(choices=[('similar_category', 'Похожая категория'), ('similar_tags', 'Похожие теги'), ('popular', 'Популярное'), ('new', 'Новое'), ('similar_users', 'Похожие пользователи')], max_length=100, verbose_name='Причина рекомендации')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_viewed', models.BooleanField(default=False, verbose_name='Просмотрено')),
            ],
            options={
                'verbose_name': 'Рекомендация',
                'verbose_name_plural': 'Рекомендации',
                'ordering': ['-score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserWatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watched_at', models.DateTimeField(auto_now_add=True)),
                ('watch_duration', models.PositiveIntegerField(default=0, verbose_name='Длительность просмотра (сек)')),
                ('completed', models.BooleanField(default=False, verbose_name='Просмотрено полностью')),
            ],
            options={
                'verbose_name': 'История просмотров',
                'verbose_name_plural': 'История просмотров',
                'ordering': ['-watched_at'],
            },
        ),
        migrations.AlterModelOptions(
            name='playlist',
            options={'ordering': ['-created_at'], 'verbose_name': 'Плейлист', 'verbose_name_plural': 'Плейлисты'},
        ),
        migrations.AlterModelOptions(
            name='playlistitem',
            options={'ordering': ['order', 'added_at'], 'verbose_name': 'Элемент плейлиста', 'verbose_name_plural': 'Элементы плейлиста'},
        ),
        migrations.AlterModelOptions(
            name='storyrecommendation',
            options={'ordering': ['-similarity_score', '-created_at'], 'verbose_name': 'Рекомендация', 'verbose_name_plural': 'Рекомендации'},
        ),
        migrations.RemoveIndex(
            model_name='playlist',
            name='stories_pla_creator_0f3ab6_idx',
        ),
        migrations.RemoveIndex(
            model_name='playlist',
            name='stories_pla_playlis_4a6e78_idx',
        ),
        migrations.RemoveIndex(
            model_name='story',
            name='stories_sto_created_afacec_idx',
        ),
        migrations.RemoveIndex(
            model_name='story',
            name='stories_sto_is_publ_d6a0a0_idx',
        ),
        migrations.RemoveIndex(
            model_name='story',
            name='stories_sto_categor_ede9c3_idx',
        ),
        migrations.RemoveIndex(
            model_name='storyrecommendation',
            name='stories_sto_story_i_44e4ea_idx',
        ),
        migrations.RemoveIndex(
            model_name='storyview',
            name='stories_sto_story_i_7a58d9_idx',
        ),
        migrations.RemoveIndex(
            model_name='storyview',
            name='stories_sto_user_id_8966d8_idx',
        ),
        migrations.AlterUniqueTogether(
            name='playlist',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='storyrecommendation',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='story',
            name='content',
        ),
        migrations.RemoveField(
            model_name='story',
            name='likes_count',
        ),
        migrations.AddField(
            model_name='playlist',
            name='cover_image',
            field=models.ImageField(blank=True, null=True, upload_to='playlists/covers/', verbose_name='Обложка плейлиста'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='Активен'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='stories',
            field=models.ManyToManyField(related_name='playlists', through='stories.PlaylistItem', to='stories.story', verbose_name='Рассказы'),
        ),
        migrations.AddField(
            model_name='story',
            name='duration',
            field=models.CharField(blank=True, help_text='Например: 15:32', max_length=20, verbose_name='Длительность'),
        ),
        migrations.AddField(
            model_name='storyrecommendation',
            name='similarity_score',
            field=models.FloatField(default=0.0, help_text='От 0.0 до 1.0', verbose_name='Оценка сходства'),
        ),
        migrations.AddField(
            model_name='storyrecommendation',
            name='source_story',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='source_recommendations', to='stories.story', verbose_name='Исходный рассказ'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='playlist',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='description',
            field=models.TextField(blank=True, verbose_name='Описание'),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='playlist_type',
            field=models.CharField(choices=[('public', 'Публичный'), ('private', 'Приватный'), ('featured', 'Рекомендуемый'), ('series', 'Серия')], default='public', max_length=20, verbose_name='Тип плейлиста'),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='slug',
            field=models.SlugField(max_length=200, unique=True, verbose_name='URL (slug)'),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='playlist',
            name='views_count',
            field=models.PositiveIntegerField(default=0, verbose_name='Просмотры'),
        ),
        migrations.AlterField(
            model_name='playlistitem',
            name='added_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Добавлено'),
        ),
        migrations.AlterField(
            model_name='playlistitem',
            name='order',
            field=models.PositiveIntegerField(default=0, help_text='Порядок в плейлисте', verbose_name='Порядок'),
        ),
        migrations.AlterField(
            model_name='story',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category', verbose_name='Категория'),
        ),
        migrations.AlterField(
            model_name='story',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Дата создания'),
        ),
        migrations.AlterField(
            model_name='story',
            name='description',
            field=models.TextField(verbose_name='Описание'),
        ),
        migrations.AlterField(
            model_name='story',
            name='is_featured',
            field=models.BooleanField(default=False, verbose_name='Рекомендуемое'),
        ),
        migrations.AlterField(
            model_name='story',
            name='slug',
            field=models.SlugField(max_length=200, unique=True, verbose_name='URL (slug)'),
        ),
        migrations.AlterField(
            model_name='story',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.tag', verbose_name='Теги'),
        ),
        migrations.AlterField(
            model_name='story',
            name='title',
            field=models.CharField(max_length=200, verbose_name='Название'),
        ),
        migrations.AlterField(
            model_name='story',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Дата обновления'),
        ),
        migrations.AlterField(
            model_name='story',
            name='views_count',
            field=models.PositiveIntegerField(default=0, verbose_name='Количество просмотров'),
        ),
        migrations.AlterField(
            model_name='story',
            name='youtube_embed_id',
            field=models.CharField(blank=True, help_text='Автоматически извлекается из URL', max_length=100, verbose_name='YouTube ID'),
        ),
        migrations.AlterField(
            model_name='story',
            name='youtube_url',
            field=models.URLField(help_text='Ссылка на видео YouTube (например: https://www.youtube.com/watch?v=VIDEO_ID)', verbose_name='YouTube URL'),
        ),
        migrations.AlterField(
            model_name='storyrecommendation',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Дата создания'),
        ),
        migrations.AlterField(
            model_name='storyrecommendation',
            name='recommendation_type',
            field=models.CharField(choices=[('category', 'По категории'), ('tags', 'По тегам'), ('popularity', 'По популярности'), ('collaborative', 'Коллаборативная фильтрация'), ('content', 'По содержанию')], default='category', max_length=50, verbose_name='Тип рекомендации'),
        ),
        migrations.AlterField(
            model_name='storyrecommendation',
            name='recommended_story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_recommendations', to='stories.story', verbose_name='Рекомендуемый рассказ'),
        ),
        migrations.AlterUniqueTogether(
            name='storyrecommendation',
            unique_together={('source_story', 'recommended_story')},
        ),
        migrations.AlterUniqueTogether(
            name='storyview',
            unique_together={('story', 'user'), ('story', 'ip_address')},
        ),
        migrations.AddIndex(
            model_name='storyrecommendation',
            index=models.Index(fields=['source_story', 'similarity_score'], name='stories_sto_source__9352ed_idx'),
        ),
        migrations.AddIndex(
            model_name='storyview',
            index=models.Index(fields=['story', 'user'], name='stories_sto_story_i_8c4de9_idx'),
        ),
        migrations.AddIndex(
            model_name='storyview',
            index=models.Index(fields=['story', 'ip_address'], name='stories_sto_story_i_37fd27_idx'),
        ),
        migrations.AddField(
            model_name='userwatchhistory',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_views', to='stories.story'),
        ),
        migrations.AddField(
            model_name='userwatchhistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_history', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userrecommendation',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_recommendations', to='stories.story'),
        ),
        migrations.AddField(
            model_name='userrecommendation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='storylike',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='stories.story'),
        ),
        migrations.AddField(
            model_name='storylike',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RemoveField(
            model_name='storyrecommendation',
            name='score',
        ),
        migrations.RemoveField(
            model_name='storyrecommendation',
            name='story',
        ),
        migrations.AlterUniqueTogether(
            name='userrecommendation',
            unique_together={('user', 'story')},
        ),
        migrations.AlterUniqueTogether(
            name='storylike',
            unique_together={('story', 'user')},
        ),
    ]
