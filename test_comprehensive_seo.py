#!/usr/bin/env python
"""
COMPREHENSIVE SEO INTEGRATION TEST
==================================
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SEO –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞
"""

import os
import sys
import django
import json
import re
from pathlib import Path
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
PROJECT_ROOT = Path(r'E:\pravoslavie_portal')
sys.path.append(str(PROJECT_ROOT))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

try:
    django.setup()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django: {e}")
    sys.exit(1)

class SEOTester:
    def __init__(self):
        self.passed_tests = 0
        self.total_tests = 0
        self.results = []
        
    def test(self, test_name, test_func):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.total_tests += 1
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        print("-" * 50)
        
        try:
            result = test_func()
            if result:
                self.passed_tests += 1
                self.results.append({"name": test_name, "status": "‚úÖ PASS", "details": ""})
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                self.results.append({"name": test_name, "status": "‚ùå FAIL", "details": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"})
                print(f"‚ùå {test_name} - –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            self.results.append({"name": test_name, "status": "üí• ERROR", "details": str(e)})
            print(f"üí• {test_name} - –û–®–ò–ë–ö–ê: {e}")
            
        return result
    
    def test_file_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã SEO —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            'core/seo/__init__.py',
            'core/seo/meta_tags.py', 
            'core/seo/schema_org.py',
            'core/seo/sitemaps.py',
            'core/templatetags/__init__.py',
            'core/templatetags/seo_tags.py',
            'core/views/__init__.py',
            'core/views/main_views.py',
            'core/views/seo_views.py',
        ]
        
        missing_files = []
        for file_path in required_files:
            full_path = PROJECT_ROOT / file_path
            if not full_path.exists():
                missing_files.append(file_path)
                print(f"   ‚ùå {file_path}")
            else:
                print(f"   ‚úÖ {file_path}")
        
        if missing_files:
            print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return False
        
        print("‚ú® –í—Å–µ —Ñ–∞–π–ª—ã SEO —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–π–¥–µ–Ω—ã!")
        return True
    
    def test_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ SEO –º–æ–¥—É–ª–µ–π"""
        imports_to_test = [
            ('core.seo', ['page_meta', 'SEOManager', 'get_schema_data']),
            ('core.seo.meta_tags', ['SEOManager', 'page_meta']),
            ('core.seo.schema_org', ['SchemaGenerator', 'get_schema_data']),
            ('core.seo.sitemaps', ['sitemaps']),
            ('core.templatetags.seo_tags', ['render_meta_tags', 'schema_ld', 'canonical_url']),
            ('core.views', ['HomeView', 'AboutView', 'ContactView']),
        ]
        
        failed_imports = []
        
        for module_name, items in imports_to_test:
            try:
                module = __import__(module_name, fromlist=items)
                for item in items:
                    if hasattr(module, item):
                        print(f"   ‚úÖ {module_name}.{item}")
                    else:
                        print(f"   ‚ùå {module_name}.{item} - –ù–ï –ù–ê–ô–î–ï–ù")
                        failed_imports.append(f"{module_name}.{item}")
            except ImportError as e:
                print(f"   üí• {module_name} - –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
                failed_imports.extend([f"{module_name}.{item}" for item in items])
        
        if failed_imports:
            print(f"\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: {', '.join(failed_imports)}")
            return False
            
        print("‚ú® –í—Å–µ SEO –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    
    def test_meta_tags_generation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤"""
        from core.seo import page_meta
        
        pages_to_test = ['home', 'about', 'contact', 'books_list', 'stories_list', 'shop']
        
        for page in pages_to_test:
            try:
                meta = page_meta(page)
                
                required_fields = ['title', 'description']
                missing_fields = [field for field in required_fields if not meta.get(field)]
                
                if missing_fields:
                    print(f"   ‚ùå {page}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
                    return False
                else:
                    print(f"   ‚úÖ {page}: title='{meta['title'][:50]}...', description='{meta['description'][:50]}...'")
                    
            except Exception as e:
                print(f"   üí• {page}: {e}")
                return False
        
        print("‚ú® –í—Å–µ –º–µ—Ç–∞-—Ç–µ–≥–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    
    def test_schema_org_generation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Schema.org"""
        from core.seo.schema_org import SchemaGenerator, get_schema_data
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Å—Ö–µ–º
        generator = SchemaGenerator()
        
        # –¢–µ—Å—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        try:
            org_schema = generator.get_organization_schema()
            if org_schema.get('@type') != 'Organization':
                print("   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ö–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
                return False
            print("   ‚úÖ –°—Ö–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        
        # –¢–µ—Å—Ç —Å–∞–π—Ç–∞
        try:
            site_schema = generator.get_website_schema()
            if site_schema.get('@type') != 'WebSite':
                print("   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∞–π—Ç–∞")
                return False
            print("   ‚úÖ –°—Ö–µ–º–∞ —Å–∞–π—Ç–∞")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã —Å–∞–π—Ç–∞: {e}")
            return False
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_schema_data
        try:
            schema_json = get_schema_data('organization')
            if not schema_json or not json.loads(schema_json):
                print("   ‚ùå get_schema_data –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON")
                return False
            print("   ‚úÖ get_schema_data —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ get_schema_data: {e}")
            return False
        
        print("‚ú® –í—Å–µ Schema.org —Å—Ö–µ–º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    
    def test_model_compatibility(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–¥–µ–ª—è–º–∏"""
        from core.seo.schema_org import SchemaGenerator
        
        generator = SchemaGenerator()
        
        # –¢–µ—Å—Ç —Å –º–æ–¥–µ–ª—å—é Book
        try:
            from books.models import Book
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç Book
            class MockBook:
                title = "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–∞—è –∫–Ω–∏–≥–∞"
                description = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SEO"
                created_at = "2024-01-01T00:00:00Z"
                updated_at = "2024-01-01T00:00:00Z"
                slug = "test-book"
                price = 0
                cover = None
                author = "–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä"
                
                class reviews:
                    @staticmethod
                    def exists():
                        return False
            
            mock_book = MockBook()
            book_schema = generator.get_book_schema(mock_book)
            
            if not book_schema or book_schema.get('@type') != 'Book':
                print("   ‚ùå –°—Ö–µ–º–∞ –∫–Ω–∏–≥–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–µ–≤–µ—Ä–Ω–æ")
                return False
            print("   ‚úÖ –°—Ö–µ–º–∞ –∫–Ω–∏–≥–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞")
            
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã –∫–Ω–∏–≥–∏: {e}")
            return False
        
        # –¢–µ—Å—Ç —Å –º–æ–¥–µ–ª—å—é Story
        try:
            class MockStory:
                title = "–¢–µ—Å—Ç–æ–≤—ã–π –¥—É—Ö–æ–≤–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑"
                description = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞"
                created_at = "2024-01-01T00:00:00Z"
                updated_at = "2024-01-01T00:00:00Z"
                slug = "test-story"
                youtube_embed = '<iframe src="https://www.youtube.com/embed/dQw4w9WgXcQ"></iframe>'
            
            mock_story = MockStory()
            video_schema = generator.get_video_schema(mock_story)
            
            if not video_schema or video_schema.get('@type') != 'VideoObject':
                print("   ‚ùå –°—Ö–µ–º–∞ –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–µ–≤–µ—Ä–Ω–æ")
                return False
            print("   ‚úÖ –°—Ö–µ–º–∞ –≤–∏–¥–µ–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞")
            
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã –≤–∏–¥–µ–æ: {e}")
            return False
        
        print("‚ú® –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å SEO —Å—Ö–µ–º–∞–º–∏!")
        return True
    
    def test_templatetags(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ template tags"""
        from django.template import Template, Context
        from django.test import RequestFactory
        from django.conf import settings
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π request —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º HOST
        factory = RequestFactory()
        request = factory.get('/', HTTP_HOST='testserver')
        
        # –¢–µ—Å—Ç render_meta_tags
        try:
            template = Template('{% load seo_tags %}{% render_meta_tags "home" %}')
            context = Context({'request': request})
            rendered = template.render(context)
            print("   ‚úÖ render_meta_tags —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ render_meta_tags: {e}")
            return False
        
        # –¢–µ—Å—Ç schema_ld
        try:
            template = Template('{% load seo_tags %}{% schema_ld "organization" %}')
            context = Context({'request': request})
            rendered = template.render(context)
            if '<script type="application/ld+json">' not in rendered:
                print("   ‚ùå schema_ld –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–≥")
                return False
            print("   ‚úÖ schema_ld —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ schema_ld: {e}")
            return False
        
        # –¢–µ—Å—Ç canonical_url
        try:
            template = Template('{% load seo_tags %}{% canonical_url request %}')
            context = Context({'request': request})
            rendered = template.render(context).strip()
            if not rendered.startswith('http'):
                print(f"   ‚ùå canonical_url –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π URL: {rendered}")
                return False
            print("   ‚úÖ canonical_url —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ canonical_url: {e}")
            return False
        
        print("‚ú® –í—Å–µ template tags —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    
    def test_sitemap_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ sitemap"""
        try:
            from core.seo.sitemaps import sitemaps
            if not sitemaps:
                print("   ‚ùå Sitemap —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç")
                return False
            print(f"   ‚úÖ Sitemap —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª—ã: {', '.join(sitemaps.keys())}")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ sitemap: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ robots.txt view
        try:
            from core.views.seo_views import robots_txt
            print("   ‚úÖ robots_txt view –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ robots_txt view: {e}")
            return False
        
        print("‚ú® Sitemap —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    
    def test_url_patterns(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ SEO"""
        from django.urls import reverse, NoReverseMatch
        
        seo_urls = [
            ('robots_txt', 'robots.txt'),
            ('django.contrib.sitemaps.views.sitemap', 'sitemap.xml'),
        ]
        
        for url_name, expected_path in seo_urls:
            try:
                url = reverse(url_name)
                if expected_path not in url:
                    print(f"   ‚ùå {url_name}: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å {url}")
                    return False
                print(f"   ‚úÖ {url_name}: {url}")
            except NoReverseMatch:
                print(f"   ‚ùå {url_name}: URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            except Exception as e:
                print(f"   üí• {url_name}: {e}")
                return False
        
        print("‚ú® –í—Å–µ SEO URL –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
    
    def test_settings_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django –¥–ª—è SEO"""
        from django.conf import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        required_settings = {
            'INSTALLED_APPS': ['django.contrib.sitemaps'],
            'TEMPLATES': 'context_processors',
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ INSTALLED_APPS
        if 'django.contrib.sitemaps' not in settings.INSTALLED_APPS:
            print("   ‚ùå django.contrib.sitemaps –Ω–µ –≤ INSTALLED_APPS")
            return False
        print("   ‚úÖ django.contrib.sitemaps —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TEMPLATES context processors
        templates = getattr(settings, 'TEMPLATES', [])
        if templates:
            context_processors = templates[0].get('OPTIONS', {}).get('context_processors', [])
            if 'django.template.context_processors.request' not in context_processors:
                print("   ‚ùå request context processor –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            print("   ‚úÖ request context processor –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        print("‚ú® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django –¥–ª—è SEO –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        return True
    
    def test_meta_tags_content_quality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤"""
        from core.seo import page_meta
        
        pages = ['home', 'about', 'books_list', 'stories_list']
        
        for page in pages:
            meta = page_meta(page)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã title
            title = meta.get('title', '')
            if len(title) < 30 or len(title) > 60:
                print(f"   ‚ö†Ô∏è  {page}: title –¥–ª–∏–Ω–∞ {len(title)} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 30-60)")
            else:
                print(f"   ‚úÖ {page}: title –¥–ª–∏–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ ({len(title)})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã description
            description = meta.get('description', '')
            if len(description) < 120 or len(description) > 160:
                print(f"   ‚ö†Ô∏è  {page}: description –¥–ª–∏–Ω–∞ {len(description)} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 120-160)")
            else:
                print(f"   ‚úÖ {page}: description –¥–ª–∏–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ ({len(description)})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            keywords = meta.get('keywords', '')
            if not keywords:
                print(f"   ‚ö†Ô∏è  {page}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç keywords")
            else:
                print(f"   ‚úÖ {page}: keywords –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        print("‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
    
    def test_schema_org_validation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Schema.org JSON"""
        from core.seo.schema_org import get_schema_data
        
        schemas_to_test = [
            ('organization', None),
            ('website', None),
        ]
        
        for schema_type, obj in schemas_to_test:
            try:
                schema_json = get_schema_data(schema_type, obj)
                if not schema_json:
                    print(f"   ‚ùå {schema_type}: –ø—É—Å—Ç–∞—è —Å—Ö–µ–º–∞")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
                schema_data = json.loads(schema_json)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è Schema.org
                if '@context' not in schema_data:
                    print(f"   ‚ùå {schema_type}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @context")
                    return False
                    
                if '@type' not in schema_data:
                    print(f"   ‚ùå {schema_type}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @type")
                    return False
                
                print(f"   ‚úÖ {schema_type}: –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ö–µ–º–∞")
                
            except json.JSONDecodeError:
                print(f"   ‚ùå {schema_type}: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
                return False
            except Exception as e:
                print(f"   üí• {schema_type}: {e}")
                return False
        
        print("‚ú® –í—Å–µ Schema.org —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–Ω—ã!")
        return True
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ SEO –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 80)
        
        for result in self.results:
            print(f"{result['status']} {result['name']}")
            if result['details']:
                print(f"    ‚îî‚îÄ {result['details']}")
        
        print("\n" + "-" * 80)
        success_rate = (self.passed_tests / self.total_tests) * 100 if self.total_tests > 0 else 0
        
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}")
        print(f"   –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.total_tests - self.passed_tests}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate >= 90:
            print("\nüéâ –û–¢–õ–ò–ß–ù–û! SEO –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ!")
            print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è SEO!")
        elif success_rate >= 70:
            print("\n‚úÖ –•–û–†–û–®–û! SEO –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞.")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã.")
        elif success_rate >= 50:
            print("\n‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. SEO –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
            print("üõ†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        else:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–û! SEO –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
            print("üö® –ü—Ä–æ–µ–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å —Ç–µ–∫—É—â–∏–º–∏ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
        
        print("\n" + "=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üîç COMPREHENSIVE SEO INTEGRATION TEST")
    print("üéØ –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª '–î–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏'")
    print("=" * 80)
    
    tester = SEOTester()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ SEO —Ñ–∞–π–ª–æ–≤", tester.test_file_structure),
        ("–ò–º–ø–æ—Ä—Ç—ã SEO –º–æ–¥—É–ª–µ–π", tester.test_imports),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞-—Ç–µ–≥–æ–≤", tester.test_meta_tags_generation),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Schema.org", tester.test_schema_org_generation),
        ("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–æ–¥–µ–ª—è–º–∏", tester.test_model_compatibility),
        ("Template Tags", tester.test_templatetags),
        ("Sitemap —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", tester.test_sitemap_functionality),
        ("URL –ø–∞—Ç—Ç–µ—Ä–Ω—ã", tester.test_url_patterns),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django", tester.test_settings_configuration),
        ("–ö–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤", tester.test_meta_tags_content_quality),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è Schema.org", tester.test_schema_org_validation),
    ]
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    for test_name, test_func in tests:
        tester.test(test_name, test_func)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    tester.generate_report()

if __name__ == '__main__':
    main()
