#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª - –î–æ–±—Ä—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

def test_pwa_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö PWA —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PWA —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'static/manifest.json',
        'static/sw.js', 
        'static/js/pwa.js',
        'static/browserconfig.xml',
        'templates/offline/offline.html',
        'pwa/models.py',
        'pwa/views.py',
        'pwa/urls.py',
        'pwa/admin.py',
    ]
    
    missing_files = []
    existing_files = []
    
    for file_path in required_files:
        full_path = BASE_DIR / file_path
        if full_path.exists():
            existing_files.append(file_path)
            print(f"‚úÖ {file_path}")
        else:
            missing_files.append(file_path)
            print(f"‚ùå {file_path}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(existing_files)}/{len(required_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ –í—Å–µ PWA —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!")
    return True

def test_pwa_urls():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PWA URL –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ PWA URL –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    
    from django.urls import reverse
    from django.test import Client
    
    client = Client()
    
    pwa_urls = [
        ('pwa:manifest', 'manifest.json'),
        ('pwa:service_worker', 'sw.js'),
        ('pwa:offline', 'offline/'),
        ('pwa:get_csrf_token', 'get-csrf-token/'),
        ('pwa:ping', 'ping/'),
    ]
    
    working_urls = []
    broken_urls = []
    
    for url_name, url_path in pwa_urls:
        try:
            url = reverse(url_name)
            response = client.get(url)
            
            if response.status_code == 200:
                working_urls.append((url_name, url_path, response.status_code))
                print(f"‚úÖ {url_path} ‚Üí {response.status_code}")
            else:
                broken_urls.append((url_name, url_path, response.status_code))
                print(f"‚ö†Ô∏è  {url_path} ‚Üí {response.status_code}")
                
        except Exception as e:
            broken_urls.append((url_name, url_path, str(e)))
            print(f"‚ùå {url_path} ‚Üí {str(e)}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(working_urls)}/{len(pwa_urls)} URL —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if broken_urls:
        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ URL:")
        for url_name, url_path, error in broken_urls:
            print(f"   - {url_path}: {error}")
        return False
    
    print("‚úÖ –í—Å–µ PWA URL —Ä–∞–±–æ—Ç–∞—é—Ç!")
    return True

def test_pwa_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django –¥–ª—è PWA"""
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django...")
    
    from django.conf import settings
    
    checks = [
        ('pwa –≤ INSTALLED_APPS', 'pwa' in settings.INSTALLED_APPS),
        ('STATIC_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω', hasattr(settings, 'STATIC_URL')),
        ('STATIC_ROOT –Ω–∞—Å—Ç—Ä–æ–µ–Ω', hasattr(settings, 'STATIC_ROOT')),
        ('TEMPLATES –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', hasattr(settings, 'TEMPLATES')),
    ]
    
    passed_checks = []
    failed_checks = []
    
    for check_name, check_result in checks:
        if check_result:
            passed_checks.append(check_name)
            print(f"‚úÖ {check_name}")
        else:
            failed_checks.append(check_name)
            print(f"‚ùå {check_name}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(passed_checks)}/{len(checks)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if failed_checks:
        print(f"\n‚ö†Ô∏è  –ù–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        for check in failed_checks:
            print(f"   - {check}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    return True

def test_pwa_models():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–¥–µ–ª–∏ PWA"""
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π PWA...")
    
    try:
        from pwa.models import PushSubscription, PWAInstallEvent, OfflineAction, PWAAnalytics, CachedContent
        
        models = [
            ('PushSubscription', PushSubscription),
            ('PWAInstallEvent', PWAInstallEvent), 
            ('OfflineAction', OfflineAction),
            ('PWAAnalytics', PWAAnalytics),
            ('CachedContent', CachedContent),
        ]
        
        for model_name, model_class in models:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                model_class.objects.all().count()
                print(f"‚úÖ {model_name}")
            except Exception as e:
                print(f"‚ùå {model_name}: {str(e)}")
                return False
        
        print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ PWA —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        return False

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PWA"""
    print("="*60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PWA - –ü–†–ê–í–û–°–õ–ê–í–ù–´–ô –ü–û–†–¢–ê–õ")
    print("="*60)
    
    tests = [
        ("PWA —Ñ–∞–π–ª—ã", test_pwa_files),
        ("PWA URL –º–∞—Ä—à—Ä—É—Ç—ã", test_pwa_urls),
        ("Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", test_pwa_settings),
        ("PWA –º–æ–¥–µ–ª–∏", test_pwa_models),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name.upper()} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"))
        except Exception as e:
            results.append((test_name, f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}"))
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PWA")
    print("="*60)
    
    passed_tests = sum(1 for _, result in results if result.startswith("‚úÖ"))
    total_tests = len(results)
    
    for test_name, result in results:
        print(f"{result} {test_name}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! PWA –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –°–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫–∏ PWA (72x72, 192x192, 512x512)")
        print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: python manage.py migrate pwa")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ Chrome/Edge")
        print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É PWA –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º")
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    generate_test_report()
