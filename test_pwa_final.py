#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç PWA —Å –∏–∫–æ–Ω–∫–∞–º–∏
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

def test_pwa_icons():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫ PWA"""
    print("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫ PWA...")
    
    required_icons = [
        'static/icons/icon-72x72.png',
        'static/icons/icon-192x192.png',
        'static/icons/icon-512x512.png',
    ]
    
    existing_icons = []
    missing_icons = []
    
    for icon_path in required_icons:
        full_path = BASE_DIR / icon_path
        if full_path.exists() and full_path.stat().st_size > 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            existing_icons.append(icon_path)
            size_kb = full_path.stat().st_size / 1024
            print(f"‚úÖ {icon_path} ({size_kb:.1f} KB)")
        else:
            missing_icons.append(icon_path)
            print(f"‚ùå {icon_path}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(existing_icons)}/{len(required_icons)} –∏–∫–æ–Ω–æ–∫ –≥–æ—Ç–æ–≤–æ")
    
    if missing_icons:
        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏:")
        for icon in missing_icons:
            print(f"   - {icon}")
        return False
    
    print("‚úÖ –í—Å–µ –∏–∫–æ–Ω–∫–∏ PWA –≥–æ—Ç–æ–≤—ã!")
    return True

def test_pwa_manifest():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...")
    
    try:
        import json
        manifest_path = BASE_DIR / 'static' / 'manifest.json'
        
        with open(manifest_path, 'r', encoding='utf-8') as f:
            manifest = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['name', 'short_name', 'start_url', 'display', 'icons']
        
        for field in required_fields:
            if field in manifest:
                print(f"‚úÖ {field}: {manifest[field] if field != 'icons' else f'{len(manifest[field])} –∏–∫–æ–Ω–æ–∫'}")
            else:
                print(f"‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
        print(f"‚úÖ –ò–∫–æ–Ω–∫–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ: {len(manifest['icons'])}")
        for icon in manifest['icons']:
            print(f"   - {icon['sizes']}: {icon['src']}")
        
        print("‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {str(e)}")
        return False

def test_pwa_in_browser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç PWA –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ PWA –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
    
    from django.test import Client
    
    client = Client()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    response = client.get('/manifest.json')
    if response.status_code == 200:
        print("‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print(f"‚ùå –ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Service Worker
    response = client.get('/sw.js')
    if response.status_code == 200:
        print("‚úÖ Service Worker –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print(f"‚ùå Service Worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    response = client.get('/offline/')
    if response.status_code == 200:
        print("‚úÖ –û—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå –û—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
        return False
    
    print("‚úÖ PWA –≥–æ—Ç–æ–≤ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞!")
    return True

def generate_final_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PWA"""
    print("="*60)
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê PWA")
    print("="*60)
    
    tests = [
        ("–ò–∫–æ–Ω–∫–∏ PWA", test_pwa_icons),
        ("–ú–∞–Ω–∏—Ñ–µ—Å—Ç PWA", test_pwa_manifest),
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", test_pwa_in_browser),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name.upper()} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, "‚úÖ –ì–û–¢–û–í–û" if result else "‚ùå –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"))
        except Exception as e:
            results.append((test_name, f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}"))
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° PWA")
    print("="*60)
    
    ready_components = sum(1 for _, result in results if result.startswith("‚úÖ"))
    total_components = len(results)
    
    for test_name, result in results:
        print(f"{result} {test_name}")
    
    print(f"\nüìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å PWA: {ready_components}/{total_components}")
    
    if ready_components == total_components:
        print("\nüéâüéâüéâ PWA –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í! üéâüéâüéâ")
        print("\nüöÄ –ß—Ç–æ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:")
        print("   ‚úÖ –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –≤ Chrome/Edge")
        print("   ‚úÖ –£–≤–∏–¥–µ—Ç—å –ø—Ä–æ–º–ø—Ç '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'")
        print("   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PWA –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω")
        print("   ‚úÖ –†–∞–±–æ—Ç–∞—Ç—å –æ—Ñ–ª–∞–π–Ω —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
        print("   ‚úÖ –ü–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("\nüì± –í–∞—à –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª —Ç–µ–ø–µ—Ä—å PWA!")
    else:
        print(f"\n‚ö†Ô∏è  {total_components - ready_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    generate_final_report()
