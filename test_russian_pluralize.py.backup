"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
"""

def test_russian_pluralize():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–ª–æ–Ω–µ–Ω–∏—è"""
    
    def russian_pluralize(count, forms):
        try:
            count = int(count)
            forms_list = forms.split(',')
            
            if len(forms_list) != 3:
                return forms_list[0] if forms_list else ''
            
            form1, form2, form3 = forms_list  # —Ä–∞—Å—Å–∫–∞–∑, —Ä–∞—Å—Å–∫–∞–∑–∞, —Ä–∞—Å—Å–∫–∞–∑–æ–≤
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
            if count % 10 == 1 and count % 100 != 11:
                return form1  # 1, 21, 31... —Ä–∞—Å—Å–∫–∞–∑
            elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
                return form2  # 2, 3, 4, 22, 23, 24... —Ä–∞—Å—Å–∫–∞–∑–∞
            else:
                return form3  # 5, 6, 7, 8, 9, 10, 11, 12... —Ä–∞—Å—Å–∫–∞–∑–æ–≤
                
        except (ValueError, TypeError):
            return forms.split(',')[0] if forms else ''

    def russian_count_with_word(count, forms):
        word = russian_pluralize(count, forms)
        return f"{count} {word}"

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    forms = "—Ä–∞—Å—Å–∫–∞–∑,—Ä–∞—Å—Å–∫–∞–∑–∞,—Ä–∞—Å—Å–∫–∞–∑–æ–≤"
    
    test_cases = [
        (0, "0 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (1, "1 —Ä–∞—Å—Å–∫–∞–∑"),
        (2, "2 —Ä–∞—Å—Å–∫–∞–∑–∞"),
        (3, "3 —Ä–∞—Å—Å–∫–∞–∑–∞"),
        (4, "4 —Ä–∞—Å—Å–∫–∞–∑–∞"),
        (5, "5 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (6, "6 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (10, "10 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (11, "11 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (12, "12 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (13, "13 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (14, "14 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (15, "15 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (20, "20 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (21, "21 —Ä–∞—Å—Å–∫–∞–∑"),
        (22, "22 —Ä–∞—Å—Å–∫–∞–∑–∞"),
        (23, "23 —Ä–∞—Å—Å–∫–∞–∑–∞"),
        (24, "24 —Ä–∞—Å—Å–∫–∞–∑–∞"),
        (25, "25 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (30, "30 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (31, "31 —Ä–∞—Å—Å–∫–∞–∑"),
        (100, "100 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (101, "101 —Ä–∞—Å—Å–∫–∞–∑"),
        (102, "102 —Ä–∞—Å—Å–∫–∞–∑–∞"),
        (111, "111 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (112, "112 —Ä–∞—Å—Å–∫–∞–∑–æ–≤"),
        (121, "121 —Ä–∞—Å—Å–∫–∞–∑"),
        (122, "122 —Ä–∞—Å—Å–∫–∞–∑–∞"),
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:")
    print("=" * 50)
    
    all_passed = True
    for count, expected in test_cases:
        result = russian_count_with_word(count, forms)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {count:3d} ‚Üí {result:15s} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        if result != expected:
            all_passed = False
    
    print("=" * 50)
    if all_passed:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return all_passed

if __name__ == "__main__":
    test_russian_pluralize()
