#!/usr/bin/env python
"""
–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Schema.org
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(r'E:\pravoslavie_portal')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô SCHEMA.ORG")
print("=" * 50)

def test_schema_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ Schema.org"""
    try:
        from core.seo.schema_org import get_schema_data, SchemaGenerator
        print("‚úÖ Schema.org –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Schema.org: {e}")
        return False

def test_templatetags():
    """–¢–µ—Å—Ç templatetags"""
    try:
        from core.templatetags.seo_tags import schema_ld, social_image_url
        print("‚úÖ SEO templatetags –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ templatetags: {e}")
        return False

def test_book_model():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Book"""
    try:
        from books.models import Book
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ cover —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(Book, 'cover'):
            print("‚úÖ –ú–æ–¥–µ–ª—å Book –∏–º–µ–µ—Ç –ø–æ–ª–µ 'cover'")
            return True
        else:
            print("‚ùå –£ –º–æ–¥–µ–ª–∏ Book –Ω–µ—Ç –ø–æ–ª—è 'cover'")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ Book: {e}")
        return False

def test_schema_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –¥–ª—è –∫–Ω–∏–≥–∏"""
    try:
        from core.seo.schema_org import SchemaGenerator
        from books.models import Book
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î
        class MockBook:
            title = "–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞"
            description = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏"
            created_at = "2024-01-01T00:00:00Z"
            updated_at = "2024-01-01T00:00:00Z"
            slug = "test-book"
            price = 0
            cover = None
            
            def reviews(self):
                return None
                
        mock_book = MockBook()
        generator = SchemaGenerator()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É
        schema = generator.get_book_schema(mock_book)
        
        if schema and '@type' in schema and schema['@type'] == 'Book':
            print("‚úÖ Schema.org –¥–ª—è –∫–Ω–∏–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å—Ö–µ–º—ã –∫–Ω–∏–≥")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return False

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
tests = [
    test_schema_imports,
    test_templatetags,
    test_book_model,
    test_schema_generation
]

passed = 0
for test in tests:
    if test():
        passed += 1

print("\n" + "=" * 50)
print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

if passed == len(tests):
    print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    print("üöÄ –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ –≤ Schema.org")
else:
    print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")

print("\nüîÑ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: restart_fixed.bat")
