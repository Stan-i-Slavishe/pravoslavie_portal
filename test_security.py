"""
üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞
"""
import requests
import time
import sys

def test_security_system():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    base_url = "http://127.0.0.1:8000"
    
    print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print("\n‚úÖ –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    try:
        response = requests.get(f"{base_url}/")
        print(f"   –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {response.status_code}")
        
        response = requests.get(f"{base_url}/stories/")
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—Å–∫–∞–∑–æ–≤: {response.status_code}")
        
        response = requests.get(f"{base_url}/books/")
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–∏–≥: {response.status_code}")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py runserver")
        return
    
    # –¢–µ—Å—Ç 2: SQL Injection –ø–æ–ø—ã—Ç–∫–∏
    print("\nüö® –¢–µ—Å—Ç 2: SQL Injection –∞—Ç–∞–∫–∏")
    sql_payloads = [
        "/?id=1' OR '1'='1",
        "/?search='; DROP TABLE users; --",
        "/?q=1 UNION SELECT password FROM auth_user",
    ]
    
    for payload in sql_payloads:
        try:
            response = requests.get(f"{base_url}{payload}")
            if response.status_code == 403:
                print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
            else:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {payload} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        except:
            print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
    
    # –¢–µ—Å—Ç 3: XSS –ø–æ–ø—ã—Ç–∫–∏
    print("\nüö® –¢–µ—Å—Ç 3: XSS –∞—Ç–∞–∫–∏")
    xss_payloads = [
        "/?q=<script>alert('xss')</script>",
        "/?search=javascript:alert(1)",
        "/?name=<iframe src='evil.com'></iframe>",
    ]
    
    for payload in xss_payloads:
        try:
            response = requests.get(f"{base_url}{payload}")
            if response.status_code == 403:
                print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
            else:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {payload} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        except:
            print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
    
    # –¢–µ—Å—Ç 4: Path Traversal
    print("\nüö® –¢–µ—Å—Ç 4: Path Traversal –∞—Ç–∞–∫–∏")
    path_payloads = [
        "/?file=../../etc/passwd",
        "/?include=../../../windows/system32/config/system",
        "/?path=....//....//etc/shadow",
    ]
    
    for payload in path_payloads:
        try:
            response = requests.get(f"{base_url}{payload}")
            if response.status_code == 403:
                print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
            else:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {payload} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        except:
            print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
    
    # –¢–µ—Å—Ç 5: Admin —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüö® –¢–µ—Å—Ç 5: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∫–∏")
    admin_payloads = [
        "/wp-admin/",
        "/admin.php",
        "/phpmyadmin/",
        "/administrator/",
    ]
    
    for payload in admin_payloads:
        try:
            response = requests.get(f"{base_url}{payload}")
            if response.status_code == 403:
                print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
            else:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {payload} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        except:
            print(f"   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {payload}")
    
    # –¢–µ—Å—Ç 6: Rate Limiting
    print("\n‚è±Ô∏è –¢–µ—Å—Ç 6: Rate Limiting (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)")
    print("   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 70 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥...")
    
    blocked_count = 0
    success_count = 0
    
    for i in range(70):
        try:
            response = requests.get(f"{base_url}/", timeout=5)
            if response.status_code == 429:
                blocked_count += 1
            elif response.status_code == 200:
                success_count += 1
        except:
            blocked_count += 1
        
        if i % 10 == 0:
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/70")
    
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}")
    print(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_count}")
    
    if blocked_count > 5:
        print("   ‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("   ‚ö†Ô∏è Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
    
    # –¢–µ—Å—Ç 7: Security Headers
    print("\nüîí –¢–µ—Å—Ç 7: Security Headers")
    try:
        response = requests.get(f"{base_url}/")
        headers = response.headers
        
        security_headers = [
            'X-Content-Type-Options',
            'X-Frame-Options', 
            'X-XSS-Protection',
            'Content-Security-Policy',
            'Referrer-Policy'
        ]
        
        for header in security_headers:
            if header in headers:
                print(f"   ‚úÖ {header}: {headers[header]}")
            else:
                print(f"   ‚ùå {header}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
    except:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   üõ°Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è")
    print("   ‚è±Ô∏è Rate limiting —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç") 
    print("   üîí Security headers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/django.log")
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: python manage.py security_admin --stats")

if __name__ == "__main__":
    test_security_system()
